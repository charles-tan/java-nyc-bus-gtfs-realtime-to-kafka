// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main/resources/gtfs-realtime.proto

package com.google.transit.realtime;

/**
 * <pre>
 * Realtime positioning information for a given vehicle.
 * </pre>
 *
 * Protobuf type {@code transit_realtime.VehiclePosition}
 */
public final class VehiclePosition extends
    com.google.protobuf.GeneratedMessageV3.ExtendableMessage<
      VehiclePosition> implements
    // @@protoc_insertion_point(message_implements:transit_realtime.VehiclePosition)
    VehiclePositionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use VehiclePosition.newBuilder() to construct.
  private VehiclePosition(com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<com.google.transit.realtime.VehiclePosition, ?> builder) {
    super(builder);
  }
  private VehiclePosition() {
    stopId_ = "";
    currentStatus_ = 2;
    congestionLevel_ = 0;
    occupancyStatus_ = 0;
    multiCarriageDetails_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new VehiclePosition();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehiclePosition_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehiclePosition_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.transit.realtime.VehiclePosition.class, com.google.transit.realtime.VehiclePosition.Builder.class);
  }

  /**
   * Protobuf enum {@code transit_realtime.VehiclePosition.VehicleStopStatus}
   */
  public enum VehicleStopStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * The vehicle is just about to arrive at the stop (on a stop
     * display, the vehicle symbol typically flashes).
     * </pre>
     *
     * <code>INCOMING_AT = 0;</code>
     */
    INCOMING_AT(0),
    /**
     * <pre>
     * The vehicle is standing at the stop.
     * </pre>
     *
     * <code>STOPPED_AT = 1;</code>
     */
    STOPPED_AT(1),
    /**
     * <pre>
     * The vehicle has departed and is in transit to the next stop.
     * </pre>
     *
     * <code>IN_TRANSIT_TO = 2;</code>
     */
    IN_TRANSIT_TO(2),
    ;

    /**
     * <pre>
     * The vehicle is just about to arrive at the stop (on a stop
     * display, the vehicle symbol typically flashes).
     * </pre>
     *
     * <code>INCOMING_AT = 0;</code>
     */
    public static final int INCOMING_AT_VALUE = 0;
    /**
     * <pre>
     * The vehicle is standing at the stop.
     * </pre>
     *
     * <code>STOPPED_AT = 1;</code>
     */
    public static final int STOPPED_AT_VALUE = 1;
    /**
     * <pre>
     * The vehicle has departed and is in transit to the next stop.
     * </pre>
     *
     * <code>IN_TRANSIT_TO = 2;</code>
     */
    public static final int IN_TRANSIT_TO_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static VehicleStopStatus valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static VehicleStopStatus forNumber(int value) {
      switch (value) {
        case 0: return INCOMING_AT;
        case 1: return STOPPED_AT;
        case 2: return IN_TRANSIT_TO;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<VehicleStopStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        VehicleStopStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<VehicleStopStatus>() {
            public VehicleStopStatus findValueByNumber(int number) {
              return VehicleStopStatus.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.transit.realtime.VehiclePosition.getDescriptor().getEnumTypes().get(0);
    }

    private static final VehicleStopStatus[] VALUES = values();

    public static VehicleStopStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private VehicleStopStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:transit_realtime.VehiclePosition.VehicleStopStatus)
  }

  /**
   * <pre>
   * Congestion level that is affecting this vehicle.
   * </pre>
   *
   * Protobuf enum {@code transit_realtime.VehiclePosition.CongestionLevel}
   */
  public enum CongestionLevel
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_CONGESTION_LEVEL = 0;</code>
     */
    UNKNOWN_CONGESTION_LEVEL(0),
    /**
     * <code>RUNNING_SMOOTHLY = 1;</code>
     */
    RUNNING_SMOOTHLY(1),
    /**
     * <code>STOP_AND_GO = 2;</code>
     */
    STOP_AND_GO(2),
    /**
     * <code>CONGESTION = 3;</code>
     */
    CONGESTION(3),
    /**
     * <pre>
     * People leaving their cars.
     * </pre>
     *
     * <code>SEVERE_CONGESTION = 4;</code>
     */
    SEVERE_CONGESTION(4),
    ;

    /**
     * <code>UNKNOWN_CONGESTION_LEVEL = 0;</code>
     */
    public static final int UNKNOWN_CONGESTION_LEVEL_VALUE = 0;
    /**
     * <code>RUNNING_SMOOTHLY = 1;</code>
     */
    public static final int RUNNING_SMOOTHLY_VALUE = 1;
    /**
     * <code>STOP_AND_GO = 2;</code>
     */
    public static final int STOP_AND_GO_VALUE = 2;
    /**
     * <code>CONGESTION = 3;</code>
     */
    public static final int CONGESTION_VALUE = 3;
    /**
     * <pre>
     * People leaving their cars.
     * </pre>
     *
     * <code>SEVERE_CONGESTION = 4;</code>
     */
    public static final int SEVERE_CONGESTION_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CongestionLevel valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CongestionLevel forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_CONGESTION_LEVEL;
        case 1: return RUNNING_SMOOTHLY;
        case 2: return STOP_AND_GO;
        case 3: return CONGESTION;
        case 4: return SEVERE_CONGESTION;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CongestionLevel>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CongestionLevel> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CongestionLevel>() {
            public CongestionLevel findValueByNumber(int number) {
              return CongestionLevel.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.transit.realtime.VehiclePosition.getDescriptor().getEnumTypes().get(1);
    }

    private static final CongestionLevel[] VALUES = values();

    public static CongestionLevel valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CongestionLevel(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:transit_realtime.VehiclePosition.CongestionLevel)
  }

  /**
   * <pre>
   * The state of passenger occupancy for the vehicle or carriage.
   * Individual producers may not publish all OccupancyStatus values. Therefore, consumers
   * must not assume that the OccupancyStatus values follow a linear scale.
   * Consumers should represent OccupancyStatus values as the state indicated 
   * and intended by the producer. Likewise, producers must use OccupancyStatus values that
   * correspond to actual vehicle occupancy states.
   * For describing passenger occupancy levels on a linear scale, see `occupancy_percentage`.
   * This field is still experimental, and subject to change. It may be formally adopted in the future.
   * </pre>
   *
   * Protobuf enum {@code transit_realtime.VehiclePosition.OccupancyStatus}
   */
  public enum OccupancyStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * The vehicle or carriage is considered empty by most measures, and has few or no
     * passengers onboard, but is still accepting passengers.
     * </pre>
     *
     * <code>EMPTY = 0;</code>
     */
    EMPTY(0),
    /**
     * <pre>
     * The vehicle or carriage has a large number of seats available.
     * The amount of free seats out of the total seats available to be
     * considered large enough to fall into this category is determined at the
     * discretion of the producer.
     * </pre>
     *
     * <code>MANY_SEATS_AVAILABLE = 1;</code>
     */
    MANY_SEATS_AVAILABLE(1),
    /**
     * <pre>
     * The vehicle or carriage has a relatively small number of seats available.
     * The amount of free seats out of the total seats available to be
     * considered small enough to fall into this category is determined at the
     * discretion of the feed producer.
     * </pre>
     *
     * <code>FEW_SEATS_AVAILABLE = 2;</code>
     */
    FEW_SEATS_AVAILABLE(2),
    /**
     * <pre>
     * The vehicle or carriage can currently accommodate only standing passengers.
     * </pre>
     *
     * <code>STANDING_ROOM_ONLY = 3;</code>
     */
    STANDING_ROOM_ONLY(3),
    /**
     * <pre>
     * The vehicle or carriage can currently accommodate only standing passengers
     * and has limited space for them.
     * </pre>
     *
     * <code>CRUSHED_STANDING_ROOM_ONLY = 4;</code>
     */
    CRUSHED_STANDING_ROOM_ONLY(4),
    /**
     * <pre>
     * The vehicle or carriage is considered full by most measures, but may still be
     * allowing passengers to board.
     * </pre>
     *
     * <code>FULL = 5;</code>
     */
    FULL(5),
    /**
     * <pre>
     * The vehicle or carriage is not accepting passengers, but usually accepts passengers for boarding.
     * </pre>
     *
     * <code>NOT_ACCEPTING_PASSENGERS = 6;</code>
     */
    NOT_ACCEPTING_PASSENGERS(6),
    /**
     * <pre>
     * The vehicle or carriage doesn't have any occupancy data available at that time.
     * </pre>
     *
     * <code>NO_DATA_AVAILABLE = 7;</code>
     */
    NO_DATA_AVAILABLE(7),
    /**
     * <pre>
     * The vehicle or carriage is not boardable and never accepts passengers.
     * Useful for special vehicles or carriages (engine, maintenance carriage, etc…).
     * </pre>
     *
     * <code>NOT_BOARDABLE = 8;</code>
     */
    NOT_BOARDABLE(8),
    ;

    /**
     * <pre>
     * The vehicle or carriage is considered empty by most measures, and has few or no
     * passengers onboard, but is still accepting passengers.
     * </pre>
     *
     * <code>EMPTY = 0;</code>
     */
    public static final int EMPTY_VALUE = 0;
    /**
     * <pre>
     * The vehicle or carriage has a large number of seats available.
     * The amount of free seats out of the total seats available to be
     * considered large enough to fall into this category is determined at the
     * discretion of the producer.
     * </pre>
     *
     * <code>MANY_SEATS_AVAILABLE = 1;</code>
     */
    public static final int MANY_SEATS_AVAILABLE_VALUE = 1;
    /**
     * <pre>
     * The vehicle or carriage has a relatively small number of seats available.
     * The amount of free seats out of the total seats available to be
     * considered small enough to fall into this category is determined at the
     * discretion of the feed producer.
     * </pre>
     *
     * <code>FEW_SEATS_AVAILABLE = 2;</code>
     */
    public static final int FEW_SEATS_AVAILABLE_VALUE = 2;
    /**
     * <pre>
     * The vehicle or carriage can currently accommodate only standing passengers.
     * </pre>
     *
     * <code>STANDING_ROOM_ONLY = 3;</code>
     */
    public static final int STANDING_ROOM_ONLY_VALUE = 3;
    /**
     * <pre>
     * The vehicle or carriage can currently accommodate only standing passengers
     * and has limited space for them.
     * </pre>
     *
     * <code>CRUSHED_STANDING_ROOM_ONLY = 4;</code>
     */
    public static final int CRUSHED_STANDING_ROOM_ONLY_VALUE = 4;
    /**
     * <pre>
     * The vehicle or carriage is considered full by most measures, but may still be
     * allowing passengers to board.
     * </pre>
     *
     * <code>FULL = 5;</code>
     */
    public static final int FULL_VALUE = 5;
    /**
     * <pre>
     * The vehicle or carriage is not accepting passengers, but usually accepts passengers for boarding.
     * </pre>
     *
     * <code>NOT_ACCEPTING_PASSENGERS = 6;</code>
     */
    public static final int NOT_ACCEPTING_PASSENGERS_VALUE = 6;
    /**
     * <pre>
     * The vehicle or carriage doesn't have any occupancy data available at that time.
     * </pre>
     *
     * <code>NO_DATA_AVAILABLE = 7;</code>
     */
    public static final int NO_DATA_AVAILABLE_VALUE = 7;
    /**
     * <pre>
     * The vehicle or carriage is not boardable and never accepts passengers.
     * Useful for special vehicles or carriages (engine, maintenance carriage, etc…).
     * </pre>
     *
     * <code>NOT_BOARDABLE = 8;</code>
     */
    public static final int NOT_BOARDABLE_VALUE = 8;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OccupancyStatus valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static OccupancyStatus forNumber(int value) {
      switch (value) {
        case 0: return EMPTY;
        case 1: return MANY_SEATS_AVAILABLE;
        case 2: return FEW_SEATS_AVAILABLE;
        case 3: return STANDING_ROOM_ONLY;
        case 4: return CRUSHED_STANDING_ROOM_ONLY;
        case 5: return FULL;
        case 6: return NOT_ACCEPTING_PASSENGERS;
        case 7: return NO_DATA_AVAILABLE;
        case 8: return NOT_BOARDABLE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OccupancyStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OccupancyStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OccupancyStatus>() {
            public OccupancyStatus findValueByNumber(int number) {
              return OccupancyStatus.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.transit.realtime.VehiclePosition.getDescriptor().getEnumTypes().get(2);
    }

    private static final OccupancyStatus[] VALUES = values();

    public static OccupancyStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OccupancyStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:transit_realtime.VehiclePosition.OccupancyStatus)
  }

  public interface CarriageDetailsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.VehiclePosition.CarriageDetails)
      com.google.protobuf.GeneratedMessageV3.
          ExtendableMessageOrBuilder<CarriageDetails> {

    /**
     * <pre>
     * Identification of the carriage. Should be unique per vehicle.
     * </pre>
     *
     * <code>optional string id = 1;</code>
     * @return Whether the id field is set.
     */
    boolean hasId();
    /**
     * <pre>
     * Identification of the carriage. Should be unique per vehicle.
     * </pre>
     *
     * <code>optional string id = 1;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * Identification of the carriage. Should be unique per vehicle.
     * </pre>
     *
     * <code>optional string id = 1;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * User visible label that may be shown to the passenger to help identify
     * the carriage. Example: "7712", "Car ABC-32", etc...
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string label = 2;</code>
     * @return Whether the label field is set.
     */
    boolean hasLabel();
    /**
     * <pre>
     * User visible label that may be shown to the passenger to help identify
     * the carriage. Example: "7712", "Car ABC-32", etc...
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string label = 2;</code>
     * @return The label.
     */
    java.lang.String getLabel();
    /**
     * <pre>
     * User visible label that may be shown to the passenger to help identify
     * the carriage. Example: "7712", "Car ABC-32", etc...
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string label = 2;</code>
     * @return The bytes for label.
     */
    com.google.protobuf.ByteString
        getLabelBytes();

    /**
     * <pre>
     * Occupancy status for this given carriage, in this vehicle
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];</code>
     * @return Whether the occupancyStatus field is set.
     */
    boolean hasOccupancyStatus();
    /**
     * <pre>
     * Occupancy status for this given carriage, in this vehicle
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];</code>
     * @return The occupancyStatus.
     */
    com.google.transit.realtime.VehiclePosition.OccupancyStatus getOccupancyStatus();

    /**
     * <pre>
     * Occupancy percentage for this given carriage, in this vehicle.
     * Follows the same rules as "VehiclePosition.occupancy_percentage"
     * -1 in case data is not available for this given carriage (as protobuf defaults to 0 otherwise)
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional int32 occupancy_percentage = 4 [default = -1];</code>
     * @return Whether the occupancyPercentage field is set.
     */
    boolean hasOccupancyPercentage();
    /**
     * <pre>
     * Occupancy percentage for this given carriage, in this vehicle.
     * Follows the same rules as "VehiclePosition.occupancy_percentage"
     * -1 in case data is not available for this given carriage (as protobuf defaults to 0 otherwise)
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional int32 occupancy_percentage = 4 [default = -1];</code>
     * @return The occupancyPercentage.
     */
    int getOccupancyPercentage();

    /**
     * <pre>
     * Identifies the order of this carriage with respect to the other
     * carriages in the vehicle's list of CarriageDetails.
     * The first carriage in the direction of travel must have a value of 1.
     * The second value corresponds to the second carriage in the direction
     * of travel and must have a value of 2, and so forth.
     * For example, the first carriage in the direction of travel has a value of 1.
     * If the second carriage in the direction of travel has a value of 3,
     * consumers will discard data for all carriages (i.e., the multi_carriage_details field).
     * Carriages without data must be represented with a valid carriage_sequence number and the fields 
     * without data should be omitted (alternately, those fields could also be included and set to the "no data" values).
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional uint32 carriage_sequence = 5;</code>
     * @return Whether the carriageSequence field is set.
     */
    boolean hasCarriageSequence();
    /**
     * <pre>
     * Identifies the order of this carriage with respect to the other
     * carriages in the vehicle's list of CarriageDetails.
     * The first carriage in the direction of travel must have a value of 1.
     * The second value corresponds to the second carriage in the direction
     * of travel and must have a value of 2, and so forth.
     * For example, the first carriage in the direction of travel has a value of 1.
     * If the second carriage in the direction of travel has a value of 3,
     * consumers will discard data for all carriages (i.e., the multi_carriage_details field).
     * Carriages without data must be represented with a valid carriage_sequence number and the fields 
     * without data should be omitted (alternately, those fields could also be included and set to the "no data" values).
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional uint32 carriage_sequence = 5;</code>
     * @return The carriageSequence.
     */
    int getCarriageSequence();
  }
  /**
   * <pre>
   * Carriage specific details, used for vehicles composed of several carriages
   * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
   * </pre>
   *
   * Protobuf type {@code transit_realtime.VehiclePosition.CarriageDetails}
   */
  public static final class CarriageDetails extends
      com.google.protobuf.GeneratedMessageV3.ExtendableMessage<
        CarriageDetails> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.VehiclePosition.CarriageDetails)
      CarriageDetailsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CarriageDetails.newBuilder() to construct.
    private CarriageDetails(com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<com.google.transit.realtime.VehiclePosition.CarriageDetails, ?> builder) {
      super(builder);
    }
    private CarriageDetails() {
      id_ = "";
      label_ = "";
      occupancyStatus_ = 7;
      occupancyPercentage_ = -1;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CarriageDetails();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehiclePosition_CarriageDetails_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehiclePosition_CarriageDetails_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.VehiclePosition.CarriageDetails.class, com.google.transit.realtime.VehiclePosition.CarriageDetails.Builder.class);
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object id_ = "";
    /**
     * <pre>
     * Identification of the carriage. Should be unique per vehicle.
     * </pre>
     *
     * <code>optional string id = 1;</code>
     * @return Whether the id field is set.
     */
    @java.lang.Override
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Identification of the carriage. Should be unique per vehicle.
     * </pre>
     *
     * <code>optional string id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          id_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Identification of the carriage. Should be unique per vehicle.
     * </pre>
     *
     * <code>optional string id = 1;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LABEL_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object label_ = "";
    /**
     * <pre>
     * User visible label that may be shown to the passenger to help identify
     * the carriage. Example: "7712", "Car ABC-32", etc...
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string label = 2;</code>
     * @return Whether the label field is set.
     */
    @java.lang.Override
    public boolean hasLabel() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * User visible label that may be shown to the passenger to help identify
     * the carriage. Example: "7712", "Car ABC-32", etc...
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string label = 2;</code>
     * @return The label.
     */
    @java.lang.Override
    public java.lang.String getLabel() {
      java.lang.Object ref = label_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          label_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * User visible label that may be shown to the passenger to help identify
     * the carriage. Example: "7712", "Car ABC-32", etc...
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string label = 2;</code>
     * @return The bytes for label.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLabelBytes() {
      java.lang.Object ref = label_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        label_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OCCUPANCY_STATUS_FIELD_NUMBER = 3;
    private int occupancyStatus_ = 7;
    /**
     * <pre>
     * Occupancy status for this given carriage, in this vehicle
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];</code>
     * @return Whether the occupancyStatus field is set.
     */
    @java.lang.Override public boolean hasOccupancyStatus() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Occupancy status for this given carriage, in this vehicle
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];</code>
     * @return The occupancyStatus.
     */
    @java.lang.Override public com.google.transit.realtime.VehiclePosition.OccupancyStatus getOccupancyStatus() {
      com.google.transit.realtime.VehiclePosition.OccupancyStatus result = com.google.transit.realtime.VehiclePosition.OccupancyStatus.forNumber(occupancyStatus_);
      return result == null ? com.google.transit.realtime.VehiclePosition.OccupancyStatus.NO_DATA_AVAILABLE : result;
    }

    public static final int OCCUPANCY_PERCENTAGE_FIELD_NUMBER = 4;
    private int occupancyPercentage_ = -1;
    /**
     * <pre>
     * Occupancy percentage for this given carriage, in this vehicle.
     * Follows the same rules as "VehiclePosition.occupancy_percentage"
     * -1 in case data is not available for this given carriage (as protobuf defaults to 0 otherwise)
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional int32 occupancy_percentage = 4 [default = -1];</code>
     * @return Whether the occupancyPercentage field is set.
     */
    @java.lang.Override
    public boolean hasOccupancyPercentage() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Occupancy percentage for this given carriage, in this vehicle.
     * Follows the same rules as "VehiclePosition.occupancy_percentage"
     * -1 in case data is not available for this given carriage (as protobuf defaults to 0 otherwise)
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional int32 occupancy_percentage = 4 [default = -1];</code>
     * @return The occupancyPercentage.
     */
    @java.lang.Override
    public int getOccupancyPercentage() {
      return occupancyPercentage_;
    }

    public static final int CARRIAGE_SEQUENCE_FIELD_NUMBER = 5;
    private int carriageSequence_ = 0;
    /**
     * <pre>
     * Identifies the order of this carriage with respect to the other
     * carriages in the vehicle's list of CarriageDetails.
     * The first carriage in the direction of travel must have a value of 1.
     * The second value corresponds to the second carriage in the direction
     * of travel and must have a value of 2, and so forth.
     * For example, the first carriage in the direction of travel has a value of 1.
     * If the second carriage in the direction of travel has a value of 3,
     * consumers will discard data for all carriages (i.e., the multi_carriage_details field).
     * Carriages without data must be represented with a valid carriage_sequence number and the fields 
     * without data should be omitted (alternately, those fields could also be included and set to the "no data" values).
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional uint32 carriage_sequence = 5;</code>
     * @return Whether the carriageSequence field is set.
     */
    @java.lang.Override
    public boolean hasCarriageSequence() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Identifies the order of this carriage with respect to the other
     * carriages in the vehicle's list of CarriageDetails.
     * The first carriage in the direction of travel must have a value of 1.
     * The second value corresponds to the second carriage in the direction
     * of travel and must have a value of 2, and so forth.
     * For example, the first carriage in the direction of travel has a value of 1.
     * If the second carriage in the direction of travel has a value of 3,
     * consumers will discard data for all carriages (i.e., the multi_carriage_details field).
     * Carriages without data must be represented with a valid carriage_sequence number and the fields 
     * without data should be omitted (alternately, those fields could also be included and set to the "no data" values).
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional uint32 carriage_sequence = 5;</code>
     * @return The carriageSequence.
     */
    @java.lang.Override
    public int getCarriageSequence() {
      return carriageSequence_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .ExtendableMessage<com.google.transit.realtime.VehiclePosition.CarriageDetails>.ExtensionWriter
          extensionWriter = newExtensionWriter();
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, label_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeEnum(3, occupancyStatus_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt32(4, occupancyPercentage_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeUInt32(5, carriageSequence_);
      }
      extensionWriter.writeUntil(10000, output);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, label_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, occupancyStatus_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, occupancyPercentage_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, carriageSequence_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.transit.realtime.VehiclePosition.CarriageDetails)) {
        return super.equals(obj);
      }
      com.google.transit.realtime.VehiclePosition.CarriageDetails other = (com.google.transit.realtime.VehiclePosition.CarriageDetails) obj;

      if (hasId() != other.hasId()) return false;
      if (hasId()) {
        if (!getId()
            .equals(other.getId())) return false;
      }
      if (hasLabel() != other.hasLabel()) return false;
      if (hasLabel()) {
        if (!getLabel()
            .equals(other.getLabel())) return false;
      }
      if (hasOccupancyStatus() != other.hasOccupancyStatus()) return false;
      if (hasOccupancyStatus()) {
        if (occupancyStatus_ != other.occupancyStatus_) return false;
      }
      if (hasOccupancyPercentage() != other.hasOccupancyPercentage()) return false;
      if (hasOccupancyPercentage()) {
        if (getOccupancyPercentage()
            != other.getOccupancyPercentage()) return false;
      }
      if (hasCarriageSequence() != other.hasCarriageSequence()) return false;
      if (hasCarriageSequence()) {
        if (getCarriageSequence()
            != other.getCarriageSequence()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      if (!getExtensionFields().equals(other.getExtensionFields()))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
      }
      if (hasLabel()) {
        hash = (37 * hash) + LABEL_FIELD_NUMBER;
        hash = (53 * hash) + getLabel().hashCode();
      }
      if (hasOccupancyStatus()) {
        hash = (37 * hash) + OCCUPANCY_STATUS_FIELD_NUMBER;
        hash = (53 * hash) + occupancyStatus_;
      }
      if (hasOccupancyPercentage()) {
        hash = (37 * hash) + OCCUPANCY_PERCENTAGE_FIELD_NUMBER;
        hash = (53 * hash) + getOccupancyPercentage();
      }
      if (hasCarriageSequence()) {
        hash = (37 * hash) + CARRIAGE_SEQUENCE_FIELD_NUMBER;
        hash = (53 * hash) + getCarriageSequence();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.transit.realtime.VehiclePosition.CarriageDetails parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.VehiclePosition.CarriageDetails parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.VehiclePosition.CarriageDetails parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.VehiclePosition.CarriageDetails parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.VehiclePosition.CarriageDetails parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.VehiclePosition.CarriageDetails parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.VehiclePosition.CarriageDetails parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.transit.realtime.VehiclePosition.CarriageDetails parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.google.transit.realtime.VehiclePosition.CarriageDetails parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.transit.realtime.VehiclePosition.CarriageDetails parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.transit.realtime.VehiclePosition.CarriageDetails parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.transit.realtime.VehiclePosition.CarriageDetails parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.transit.realtime.VehiclePosition.CarriageDetails prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Carriage specific details, used for vehicles composed of several carriages
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * Protobuf type {@code transit_realtime.VehiclePosition.CarriageDetails}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<
          com.google.transit.realtime.VehiclePosition.CarriageDetails, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.VehiclePosition.CarriageDetails)
        com.google.transit.realtime.VehiclePosition.CarriageDetailsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehiclePosition_CarriageDetails_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehiclePosition_CarriageDetails_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.VehiclePosition.CarriageDetails.class, com.google.transit.realtime.VehiclePosition.CarriageDetails.Builder.class);
      }

      // Construct using com.google.transit.realtime.VehiclePosition.CarriageDetails.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        id_ = "";
        label_ = "";
        occupancyStatus_ = 7;
        occupancyPercentage_ = -1;
        carriageSequence_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehiclePosition_CarriageDetails_descriptor;
      }

      @java.lang.Override
      public com.google.transit.realtime.VehiclePosition.CarriageDetails getDefaultInstanceForType() {
        return com.google.transit.realtime.VehiclePosition.CarriageDetails.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.transit.realtime.VehiclePosition.CarriageDetails build() {
        com.google.transit.realtime.VehiclePosition.CarriageDetails result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.transit.realtime.VehiclePosition.CarriageDetails buildPartial() {
        com.google.transit.realtime.VehiclePosition.CarriageDetails result = new com.google.transit.realtime.VehiclePosition.CarriageDetails(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.transit.realtime.VehiclePosition.CarriageDetails result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.id_ = id_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.label_ = label_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.occupancyStatus_ = occupancyStatus_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.occupancyPercentage_ = occupancyPercentage_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.carriageSequence_ = carriageSequence_;
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public <Type> Builder setExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              com.google.transit.realtime.VehiclePosition.CarriageDetails, Type> extension,
          Type value) {
        return super.setExtension(extension, value);
      }
      @java.lang.Override
      public <Type> Builder setExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              com.google.transit.realtime.VehiclePosition.CarriageDetails, java.util.List<Type>> extension,
          int index, Type value) {
        return super.setExtension(extension, index, value);
      }
      @java.lang.Override
      public <Type> Builder addExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              com.google.transit.realtime.VehiclePosition.CarriageDetails, java.util.List<Type>> extension,
          Type value) {
        return super.addExtension(extension, value);
      }
      @java.lang.Override
      public <T> Builder clearExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              com.google.transit.realtime.VehiclePosition.CarriageDetails, T> extension) {
        return super.clearExtension(extension);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.VehiclePosition.CarriageDetails) {
          return mergeFrom((com.google.transit.realtime.VehiclePosition.CarriageDetails)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.VehiclePosition.CarriageDetails other) {
        if (other == com.google.transit.realtime.VehiclePosition.CarriageDetails.getDefaultInstance()) return this;
        if (other.hasId()) {
          id_ = other.id_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasLabel()) {
          label_ = other.label_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasOccupancyStatus()) {
          setOccupancyStatus(other.getOccupancyStatus());
        }
        if (other.hasOccupancyPercentage()) {
          setOccupancyPercentage(other.getOccupancyPercentage());
        }
        if (other.hasCarriageSequence()) {
          setCarriageSequence(other.getCarriageSequence());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                id_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                label_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                int tmpRaw = input.readEnum();
                com.google.transit.realtime.VehiclePosition.OccupancyStatus tmpValue =
                    com.google.transit.realtime.VehiclePosition.OccupancyStatus.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(3, tmpRaw);
                } else {
                  occupancyStatus_ = tmpRaw;
                  bitField0_ |= 0x00000004;
                }
                break;
              } // case 24
              case 32: {
                occupancyPercentage_ = input.readInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                carriageSequence_ = input.readUInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object id_ = "";
      /**
       * <pre>
       * Identification of the carriage. Should be unique per vehicle.
       * </pre>
       *
       * <code>optional string id = 1;</code>
       * @return Whether the id field is set.
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Identification of the carriage. Should be unique per vehicle.
       * </pre>
       *
       * <code>optional string id = 1;</code>
       * @return The id.
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            id_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Identification of the carriage. Should be unique per vehicle.
       * </pre>
       *
       * <code>optional string id = 1;</code>
       * @return The bytes for id.
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Identification of the carriage. Should be unique per vehicle.
       * </pre>
       *
       * <code>optional string id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        id_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Identification of the carriage. Should be unique per vehicle.
       * </pre>
       *
       * <code>optional string id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        id_ = getDefaultInstance().getId();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Identification of the carriage. Should be unique per vehicle.
       * </pre>
       *
       * <code>optional string id = 1;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        id_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object label_ = "";
      /**
       * <pre>
       * User visible label that may be shown to the passenger to help identify
       * the carriage. Example: "7712", "Car ABC-32", etc...
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string label = 2;</code>
       * @return Whether the label field is set.
       */
      public boolean hasLabel() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * User visible label that may be shown to the passenger to help identify
       * the carriage. Example: "7712", "Car ABC-32", etc...
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string label = 2;</code>
       * @return The label.
       */
      public java.lang.String getLabel() {
        java.lang.Object ref = label_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            label_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * User visible label that may be shown to the passenger to help identify
       * the carriage. Example: "7712", "Car ABC-32", etc...
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string label = 2;</code>
       * @return The bytes for label.
       */
      public com.google.protobuf.ByteString
          getLabelBytes() {
        java.lang.Object ref = label_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          label_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * User visible label that may be shown to the passenger to help identify
       * the carriage. Example: "7712", "Car ABC-32", etc...
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string label = 2;</code>
       * @param value The label to set.
       * @return This builder for chaining.
       */
      public Builder setLabel(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        label_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * User visible label that may be shown to the passenger to help identify
       * the carriage. Example: "7712", "Car ABC-32", etc...
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string label = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearLabel() {
        label_ = getDefaultInstance().getLabel();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * User visible label that may be shown to the passenger to help identify
       * the carriage. Example: "7712", "Car ABC-32", etc...
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string label = 2;</code>
       * @param value The bytes for label to set.
       * @return This builder for chaining.
       */
      public Builder setLabelBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        label_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private int occupancyStatus_ = 7;
      /**
       * <pre>
       * Occupancy status for this given carriage, in this vehicle
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];</code>
       * @return Whether the occupancyStatus field is set.
       */
      @java.lang.Override public boolean hasOccupancyStatus() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Occupancy status for this given carriage, in this vehicle
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];</code>
       * @return The occupancyStatus.
       */
      @java.lang.Override
      public com.google.transit.realtime.VehiclePosition.OccupancyStatus getOccupancyStatus() {
        com.google.transit.realtime.VehiclePosition.OccupancyStatus result = com.google.transit.realtime.VehiclePosition.OccupancyStatus.forNumber(occupancyStatus_);
        return result == null ? com.google.transit.realtime.VehiclePosition.OccupancyStatus.NO_DATA_AVAILABLE : result;
      }
      /**
       * <pre>
       * Occupancy status for this given carriage, in this vehicle
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];</code>
       * @param value The occupancyStatus to set.
       * @return This builder for chaining.
       */
      public Builder setOccupancyStatus(com.google.transit.realtime.VehiclePosition.OccupancyStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        occupancyStatus_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Occupancy status for this given carriage, in this vehicle
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];</code>
       * @return This builder for chaining.
       */
      public Builder clearOccupancyStatus() {
        bitField0_ = (bitField0_ & ~0x00000004);
        occupancyStatus_ = 7;
        onChanged();
        return this;
      }

      private int occupancyPercentage_ = -1;
      /**
       * <pre>
       * Occupancy percentage for this given carriage, in this vehicle.
       * Follows the same rules as "VehiclePosition.occupancy_percentage"
       * -1 in case data is not available for this given carriage (as protobuf defaults to 0 otherwise)
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional int32 occupancy_percentage = 4 [default = -1];</code>
       * @return Whether the occupancyPercentage field is set.
       */
      @java.lang.Override
      public boolean hasOccupancyPercentage() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Occupancy percentage for this given carriage, in this vehicle.
       * Follows the same rules as "VehiclePosition.occupancy_percentage"
       * -1 in case data is not available for this given carriage (as protobuf defaults to 0 otherwise)
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional int32 occupancy_percentage = 4 [default = -1];</code>
       * @return The occupancyPercentage.
       */
      @java.lang.Override
      public int getOccupancyPercentage() {
        return occupancyPercentage_;
      }
      /**
       * <pre>
       * Occupancy percentage for this given carriage, in this vehicle.
       * Follows the same rules as "VehiclePosition.occupancy_percentage"
       * -1 in case data is not available for this given carriage (as protobuf defaults to 0 otherwise)
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional int32 occupancy_percentage = 4 [default = -1];</code>
       * @param value The occupancyPercentage to set.
       * @return This builder for chaining.
       */
      public Builder setOccupancyPercentage(int value) {

        occupancyPercentage_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Occupancy percentage for this given carriage, in this vehicle.
       * Follows the same rules as "VehiclePosition.occupancy_percentage"
       * -1 in case data is not available for this given carriage (as protobuf defaults to 0 otherwise)
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional int32 occupancy_percentage = 4 [default = -1];</code>
       * @return This builder for chaining.
       */
      public Builder clearOccupancyPercentage() {
        bitField0_ = (bitField0_ & ~0x00000008);
        occupancyPercentage_ = -1;
        onChanged();
        return this;
      }

      private int carriageSequence_ ;
      /**
       * <pre>
       * Identifies the order of this carriage with respect to the other
       * carriages in the vehicle's list of CarriageDetails.
       * The first carriage in the direction of travel must have a value of 1.
       * The second value corresponds to the second carriage in the direction
       * of travel and must have a value of 2, and so forth.
       * For example, the first carriage in the direction of travel has a value of 1.
       * If the second carriage in the direction of travel has a value of 3,
       * consumers will discard data for all carriages (i.e., the multi_carriage_details field).
       * Carriages without data must be represented with a valid carriage_sequence number and the fields 
       * without data should be omitted (alternately, those fields could also be included and set to the "no data" values).
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional uint32 carriage_sequence = 5;</code>
       * @return Whether the carriageSequence field is set.
       */
      @java.lang.Override
      public boolean hasCarriageSequence() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Identifies the order of this carriage with respect to the other
       * carriages in the vehicle's list of CarriageDetails.
       * The first carriage in the direction of travel must have a value of 1.
       * The second value corresponds to the second carriage in the direction
       * of travel and must have a value of 2, and so forth.
       * For example, the first carriage in the direction of travel has a value of 1.
       * If the second carriage in the direction of travel has a value of 3,
       * consumers will discard data for all carriages (i.e., the multi_carriage_details field).
       * Carriages without data must be represented with a valid carriage_sequence number and the fields 
       * without data should be omitted (alternately, those fields could also be included and set to the "no data" values).
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional uint32 carriage_sequence = 5;</code>
       * @return The carriageSequence.
       */
      @java.lang.Override
      public int getCarriageSequence() {
        return carriageSequence_;
      }
      /**
       * <pre>
       * Identifies the order of this carriage with respect to the other
       * carriages in the vehicle's list of CarriageDetails.
       * The first carriage in the direction of travel must have a value of 1.
       * The second value corresponds to the second carriage in the direction
       * of travel and must have a value of 2, and so forth.
       * For example, the first carriage in the direction of travel has a value of 1.
       * If the second carriage in the direction of travel has a value of 3,
       * consumers will discard data for all carriages (i.e., the multi_carriage_details field).
       * Carriages without data must be represented with a valid carriage_sequence number and the fields 
       * without data should be omitted (alternately, those fields could also be included and set to the "no data" values).
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional uint32 carriage_sequence = 5;</code>
       * @param value The carriageSequence to set.
       * @return This builder for chaining.
       */
      public Builder setCarriageSequence(int value) {

        carriageSequence_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Identifies the order of this carriage with respect to the other
       * carriages in the vehicle's list of CarriageDetails.
       * The first carriage in the direction of travel must have a value of 1.
       * The second value corresponds to the second carriage in the direction
       * of travel and must have a value of 2, and so forth.
       * For example, the first carriage in the direction of travel has a value of 1.
       * If the second carriage in the direction of travel has a value of 3,
       * consumers will discard data for all carriages (i.e., the multi_carriage_details field).
       * Carriages without data must be represented with a valid carriage_sequence number and the fields 
       * without data should be omitted (alternately, those fields could also be included and set to the "no data" values).
       * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional uint32 carriage_sequence = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearCarriageSequence() {
        bitField0_ = (bitField0_ & ~0x00000010);
        carriageSequence_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:transit_realtime.VehiclePosition.CarriageDetails)
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.VehiclePosition.CarriageDetails)
    private static final com.google.transit.realtime.VehiclePosition.CarriageDetails DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.transit.realtime.VehiclePosition.CarriageDetails();
    }

    public static com.google.transit.realtime.VehiclePosition.CarriageDetails getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CarriageDetails>
        PARSER = new com.google.protobuf.AbstractParser<CarriageDetails>() {
      @java.lang.Override
      public CarriageDetails parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CarriageDetails> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CarriageDetails> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.transit.realtime.VehiclePosition.CarriageDetails getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int TRIP_FIELD_NUMBER = 1;
  private com.google.transit.realtime.TripDescriptor trip_;
  /**
   * <pre>
   * The Trip that this vehicle is serving.
   * Can be empty or partial if the vehicle can not be identified with a given
   * trip instance.
   * </pre>
   *
   * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
   * @return Whether the trip field is set.
   */
  @java.lang.Override
  public boolean hasTrip() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The Trip that this vehicle is serving.
   * Can be empty or partial if the vehicle can not be identified with a given
   * trip instance.
   * </pre>
   *
   * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
   * @return The trip.
   */
  @java.lang.Override
  public com.google.transit.realtime.TripDescriptor getTrip() {
    return trip_ == null ? com.google.transit.realtime.TripDescriptor.getDefaultInstance() : trip_;
  }
  /**
   * <pre>
   * The Trip that this vehicle is serving.
   * Can be empty or partial if the vehicle can not be identified with a given
   * trip instance.
   * </pre>
   *
   * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
   */
  @java.lang.Override
  public com.google.transit.realtime.TripDescriptorOrBuilder getTripOrBuilder() {
    return trip_ == null ? com.google.transit.realtime.TripDescriptor.getDefaultInstance() : trip_;
  }

  public static final int VEHICLE_FIELD_NUMBER = 8;
  private com.google.transit.realtime.VehicleDescriptor vehicle_;
  /**
   * <pre>
   * Additional information on the vehicle that is serving this trip.
   * </pre>
   *
   * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
   * @return Whether the vehicle field is set.
   */
  @java.lang.Override
  public boolean hasVehicle() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Additional information on the vehicle that is serving this trip.
   * </pre>
   *
   * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
   * @return The vehicle.
   */
  @java.lang.Override
  public com.google.transit.realtime.VehicleDescriptor getVehicle() {
    return vehicle_ == null ? com.google.transit.realtime.VehicleDescriptor.getDefaultInstance() : vehicle_;
  }
  /**
   * <pre>
   * Additional information on the vehicle that is serving this trip.
   * </pre>
   *
   * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
   */
  @java.lang.Override
  public com.google.transit.realtime.VehicleDescriptorOrBuilder getVehicleOrBuilder() {
    return vehicle_ == null ? com.google.transit.realtime.VehicleDescriptor.getDefaultInstance() : vehicle_;
  }

  public static final int POSITION_FIELD_NUMBER = 2;
  private com.google.transit.realtime.Position position_;
  /**
   * <pre>
   * Current position of this vehicle.
   * </pre>
   *
   * <code>optional .transit_realtime.Position position = 2;</code>
   * @return Whether the position field is set.
   */
  @java.lang.Override
  public boolean hasPosition() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Current position of this vehicle.
   * </pre>
   *
   * <code>optional .transit_realtime.Position position = 2;</code>
   * @return The position.
   */
  @java.lang.Override
  public com.google.transit.realtime.Position getPosition() {
    return position_ == null ? com.google.transit.realtime.Position.getDefaultInstance() : position_;
  }
  /**
   * <pre>
   * Current position of this vehicle.
   * </pre>
   *
   * <code>optional .transit_realtime.Position position = 2;</code>
   */
  @java.lang.Override
  public com.google.transit.realtime.PositionOrBuilder getPositionOrBuilder() {
    return position_ == null ? com.google.transit.realtime.Position.getDefaultInstance() : position_;
  }

  public static final int CURRENT_STOP_SEQUENCE_FIELD_NUMBER = 3;
  private int currentStopSequence_ = 0;
  /**
   * <pre>
   * The stop sequence index of the current stop. The meaning of
   * current_stop_sequence (i.e., the stop that it refers to) is determined by
   * current_status.
   * If current_status is missing IN_TRANSIT_TO is assumed.
   * </pre>
   *
   * <code>optional uint32 current_stop_sequence = 3;</code>
   * @return Whether the currentStopSequence field is set.
   */
  @java.lang.Override
  public boolean hasCurrentStopSequence() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * The stop sequence index of the current stop. The meaning of
   * current_stop_sequence (i.e., the stop that it refers to) is determined by
   * current_status.
   * If current_status is missing IN_TRANSIT_TO is assumed.
   * </pre>
   *
   * <code>optional uint32 current_stop_sequence = 3;</code>
   * @return The currentStopSequence.
   */
  @java.lang.Override
  public int getCurrentStopSequence() {
    return currentStopSequence_;
  }

  public static final int STOP_ID_FIELD_NUMBER = 7;
  @SuppressWarnings("serial")
  private volatile java.lang.Object stopId_ = "";
  /**
   * <pre>
   * Identifies the current stop. The value must be the same as in stops.txt in
   * the corresponding GTFS feed.
   * </pre>
   *
   * <code>optional string stop_id = 7;</code>
   * @return Whether the stopId field is set.
   */
  @java.lang.Override
  public boolean hasStopId() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * Identifies the current stop. The value must be the same as in stops.txt in
   * the corresponding GTFS feed.
   * </pre>
   *
   * <code>optional string stop_id = 7;</code>
   * @return The stopId.
   */
  @java.lang.Override
  public java.lang.String getStopId() {
    java.lang.Object ref = stopId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        stopId_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Identifies the current stop. The value must be the same as in stops.txt in
   * the corresponding GTFS feed.
   * </pre>
   *
   * <code>optional string stop_id = 7;</code>
   * @return The bytes for stopId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getStopIdBytes() {
    java.lang.Object ref = stopId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      stopId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CURRENT_STATUS_FIELD_NUMBER = 4;
  private int currentStatus_ = 2;
  /**
   * <pre>
   * The exact status of the vehicle with respect to the current stop.
   * Ignored if current_stop_sequence is missing.
   * </pre>
   *
   * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];</code>
   * @return Whether the currentStatus field is set.
   */
  @java.lang.Override public boolean hasCurrentStatus() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * The exact status of the vehicle with respect to the current stop.
   * Ignored if current_stop_sequence is missing.
   * </pre>
   *
   * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];</code>
   * @return The currentStatus.
   */
  @java.lang.Override public com.google.transit.realtime.VehiclePosition.VehicleStopStatus getCurrentStatus() {
    com.google.transit.realtime.VehiclePosition.VehicleStopStatus result = com.google.transit.realtime.VehiclePosition.VehicleStopStatus.forNumber(currentStatus_);
    return result == null ? com.google.transit.realtime.VehiclePosition.VehicleStopStatus.IN_TRANSIT_TO : result;
  }

  public static final int TIMESTAMP_FIELD_NUMBER = 5;
  private long timestamp_ = 0L;
  /**
   * <pre>
   * Moment at which the vehicle's position was measured. In POSIX time
   * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
   * </pre>
   *
   * <code>optional uint64 timestamp = 5;</code>
   * @return Whether the timestamp field is set.
   */
  @java.lang.Override
  public boolean hasTimestamp() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * Moment at which the vehicle's position was measured. In POSIX time
   * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
   * </pre>
   *
   * <code>optional uint64 timestamp = 5;</code>
   * @return The timestamp.
   */
  @java.lang.Override
  public long getTimestamp() {
    return timestamp_;
  }

  public static final int CONGESTION_LEVEL_FIELD_NUMBER = 6;
  private int congestionLevel_ = 0;
  /**
   * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
   * @return Whether the congestionLevel field is set.
   */
  @java.lang.Override public boolean hasCongestionLevel() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
   * @return The congestionLevel.
   */
  @java.lang.Override public com.google.transit.realtime.VehiclePosition.CongestionLevel getCongestionLevel() {
    com.google.transit.realtime.VehiclePosition.CongestionLevel result = com.google.transit.realtime.VehiclePosition.CongestionLevel.forNumber(congestionLevel_);
    return result == null ? com.google.transit.realtime.VehiclePosition.CongestionLevel.UNKNOWN_CONGESTION_LEVEL : result;
  }

  public static final int OCCUPANCY_STATUS_FIELD_NUMBER = 9;
  private int occupancyStatus_ = 0;
  /**
   * <pre>
   * If multi_carriage_status is populated with per-carriage OccupancyStatus,
   * then this field should describe the entire vehicle with all carriages accepting passengers considered.
   * </pre>
   *
   * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
   * @return Whether the occupancyStatus field is set.
   */
  @java.lang.Override public boolean hasOccupancyStatus() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <pre>
   * If multi_carriage_status is populated with per-carriage OccupancyStatus,
   * then this field should describe the entire vehicle with all carriages accepting passengers considered.
   * </pre>
   *
   * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
   * @return The occupancyStatus.
   */
  @java.lang.Override public com.google.transit.realtime.VehiclePosition.OccupancyStatus getOccupancyStatus() {
    com.google.transit.realtime.VehiclePosition.OccupancyStatus result = com.google.transit.realtime.VehiclePosition.OccupancyStatus.forNumber(occupancyStatus_);
    return result == null ? com.google.transit.realtime.VehiclePosition.OccupancyStatus.EMPTY : result;
  }

  public static final int OCCUPANCY_PERCENTAGE_FIELD_NUMBER = 10;
  private int occupancyPercentage_ = 0;
  /**
   * <pre>
   * A percentage value indicating the degree of passenger occupancy in the vehicle.
   * The values are represented as an integer without decimals. 0 means 0% and 100 means 100%.
   * The value 100 should represent the total maximum occupancy the vehicle was designed for,
   * including both seated and standing capacity, and current operating regulations allow.
   * The value may exceed 100 if there are more passengers than the maximum designed capacity.
   * The precision of occupancy_percentage should be low enough that individual passengers cannot be tracked boarding or alighting the vehicle.
   * If multi_carriage_status is populated with per-carriage occupancy_percentage, 
   * then this field should describe the entire vehicle with all carriages accepting passengers considered.
   * This field is still experimental, and subject to change. It may be formally adopted in the future.
   * </pre>
   *
   * <code>optional uint32 occupancy_percentage = 10;</code>
   * @return Whether the occupancyPercentage field is set.
   */
  @java.lang.Override
  public boolean hasOccupancyPercentage() {
    return ((bitField0_ & 0x00000200) != 0);
  }
  /**
   * <pre>
   * A percentage value indicating the degree of passenger occupancy in the vehicle.
   * The values are represented as an integer without decimals. 0 means 0% and 100 means 100%.
   * The value 100 should represent the total maximum occupancy the vehicle was designed for,
   * including both seated and standing capacity, and current operating regulations allow.
   * The value may exceed 100 if there are more passengers than the maximum designed capacity.
   * The precision of occupancy_percentage should be low enough that individual passengers cannot be tracked boarding or alighting the vehicle.
   * If multi_carriage_status is populated with per-carriage occupancy_percentage, 
   * then this field should describe the entire vehicle with all carriages accepting passengers considered.
   * This field is still experimental, and subject to change. It may be formally adopted in the future.
   * </pre>
   *
   * <code>optional uint32 occupancy_percentage = 10;</code>
   * @return The occupancyPercentage.
   */
  @java.lang.Override
  public int getOccupancyPercentage() {
    return occupancyPercentage_;
  }

  public static final int MULTI_CARRIAGE_DETAILS_FIELD_NUMBER = 11;
  @SuppressWarnings("serial")
  private java.util.List<com.google.transit.realtime.VehiclePosition.CarriageDetails> multiCarriageDetails_;
  /**
   * <pre>
   * Details of the multiple carriages of this given vehicle.
   * The first occurrence represents the first carriage of the vehicle, 
   * given the current direction of travel. 
   * The number of occurrences of the multi_carriage_details 
   * field represents the number of carriages of the vehicle.
   * It also includes non boardable carriages, 
   * like engines, maintenance carriages, etc… as they provide valuable 
   * information to passengers about where to stand on a platform.
   * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
   * </pre>
   *
   * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.transit.realtime.VehiclePosition.CarriageDetails> getMultiCarriageDetailsList() {
    return multiCarriageDetails_;
  }
  /**
   * <pre>
   * Details of the multiple carriages of this given vehicle.
   * The first occurrence represents the first carriage of the vehicle, 
   * given the current direction of travel. 
   * The number of occurrences of the multi_carriage_details 
   * field represents the number of carriages of the vehicle.
   * It also includes non boardable carriages, 
   * like engines, maintenance carriages, etc… as they provide valuable 
   * information to passengers about where to stand on a platform.
   * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
   * </pre>
   *
   * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.transit.realtime.VehiclePosition.CarriageDetailsOrBuilder> 
      getMultiCarriageDetailsOrBuilderList() {
    return multiCarriageDetails_;
  }
  /**
   * <pre>
   * Details of the multiple carriages of this given vehicle.
   * The first occurrence represents the first carriage of the vehicle, 
   * given the current direction of travel. 
   * The number of occurrences of the multi_carriage_details 
   * field represents the number of carriages of the vehicle.
   * It also includes non boardable carriages, 
   * like engines, maintenance carriages, etc… as they provide valuable 
   * information to passengers about where to stand on a platform.
   * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
   * </pre>
   *
   * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
   */
  @java.lang.Override
  public int getMultiCarriageDetailsCount() {
    return multiCarriageDetails_.size();
  }
  /**
   * <pre>
   * Details of the multiple carriages of this given vehicle.
   * The first occurrence represents the first carriage of the vehicle, 
   * given the current direction of travel. 
   * The number of occurrences of the multi_carriage_details 
   * field represents the number of carriages of the vehicle.
   * It also includes non boardable carriages, 
   * like engines, maintenance carriages, etc… as they provide valuable 
   * information to passengers about where to stand on a platform.
   * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
   * </pre>
   *
   * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
   */
  @java.lang.Override
  public com.google.transit.realtime.VehiclePosition.CarriageDetails getMultiCarriageDetails(int index) {
    return multiCarriageDetails_.get(index);
  }
  /**
   * <pre>
   * Details of the multiple carriages of this given vehicle.
   * The first occurrence represents the first carriage of the vehicle, 
   * given the current direction of travel. 
   * The number of occurrences of the multi_carriage_details 
   * field represents the number of carriages of the vehicle.
   * It also includes non boardable carriages, 
   * like engines, maintenance carriages, etc… as they provide valuable 
   * information to passengers about where to stand on a platform.
   * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
   * </pre>
   *
   * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
   */
  @java.lang.Override
  public com.google.transit.realtime.VehiclePosition.CarriageDetailsOrBuilder getMultiCarriageDetailsOrBuilder(
      int index) {
    return multiCarriageDetails_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (hasTrip()) {
      if (!getTrip().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasVehicle()) {
      if (!getVehicle().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasPosition()) {
      if (!getPosition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    for (int i = 0; i < getMultiCarriageDetailsCount(); i++) {
      if (!getMultiCarriageDetails(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (!extensionsAreInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessageV3
      .ExtendableMessage<com.google.transit.realtime.VehiclePosition>.ExtensionWriter
        extensionWriter = newExtensionWriter();
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getTrip());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(2, getPosition());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeUInt32(3, currentStopSequence_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      output.writeEnum(4, currentStatus_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      output.writeUInt64(5, timestamp_);
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      output.writeEnum(6, congestionLevel_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, stopId_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(8, getVehicle());
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      output.writeEnum(9, occupancyStatus_);
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      output.writeUInt32(10, occupancyPercentage_);
    }
    for (int i = 0; i < multiCarriageDetails_.size(); i++) {
      output.writeMessage(11, multiCarriageDetails_.get(i));
    }
    extensionWriter.writeUntil(10000, output);
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getTrip());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getPosition());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(3, currentStopSequence_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, currentStatus_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(5, timestamp_);
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(6, congestionLevel_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, stopId_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getVehicle());
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(9, occupancyStatus_);
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(10, occupancyPercentage_);
    }
    for (int i = 0; i < multiCarriageDetails_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, multiCarriageDetails_.get(i));
    }
    size += extensionsSerializedSize();
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.transit.realtime.VehiclePosition)) {
      return super.equals(obj);
    }
    com.google.transit.realtime.VehiclePosition other = (com.google.transit.realtime.VehiclePosition) obj;

    if (hasTrip() != other.hasTrip()) return false;
    if (hasTrip()) {
      if (!getTrip()
          .equals(other.getTrip())) return false;
    }
    if (hasVehicle() != other.hasVehicle()) return false;
    if (hasVehicle()) {
      if (!getVehicle()
          .equals(other.getVehicle())) return false;
    }
    if (hasPosition() != other.hasPosition()) return false;
    if (hasPosition()) {
      if (!getPosition()
          .equals(other.getPosition())) return false;
    }
    if (hasCurrentStopSequence() != other.hasCurrentStopSequence()) return false;
    if (hasCurrentStopSequence()) {
      if (getCurrentStopSequence()
          != other.getCurrentStopSequence()) return false;
    }
    if (hasStopId() != other.hasStopId()) return false;
    if (hasStopId()) {
      if (!getStopId()
          .equals(other.getStopId())) return false;
    }
    if (hasCurrentStatus() != other.hasCurrentStatus()) return false;
    if (hasCurrentStatus()) {
      if (currentStatus_ != other.currentStatus_) return false;
    }
    if (hasTimestamp() != other.hasTimestamp()) return false;
    if (hasTimestamp()) {
      if (getTimestamp()
          != other.getTimestamp()) return false;
    }
    if (hasCongestionLevel() != other.hasCongestionLevel()) return false;
    if (hasCongestionLevel()) {
      if (congestionLevel_ != other.congestionLevel_) return false;
    }
    if (hasOccupancyStatus() != other.hasOccupancyStatus()) return false;
    if (hasOccupancyStatus()) {
      if (occupancyStatus_ != other.occupancyStatus_) return false;
    }
    if (hasOccupancyPercentage() != other.hasOccupancyPercentage()) return false;
    if (hasOccupancyPercentage()) {
      if (getOccupancyPercentage()
          != other.getOccupancyPercentage()) return false;
    }
    if (!getMultiCarriageDetailsList()
        .equals(other.getMultiCarriageDetailsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    if (!getExtensionFields().equals(other.getExtensionFields()))
      return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasTrip()) {
      hash = (37 * hash) + TRIP_FIELD_NUMBER;
      hash = (53 * hash) + getTrip().hashCode();
    }
    if (hasVehicle()) {
      hash = (37 * hash) + VEHICLE_FIELD_NUMBER;
      hash = (53 * hash) + getVehicle().hashCode();
    }
    if (hasPosition()) {
      hash = (37 * hash) + POSITION_FIELD_NUMBER;
      hash = (53 * hash) + getPosition().hashCode();
    }
    if (hasCurrentStopSequence()) {
      hash = (37 * hash) + CURRENT_STOP_SEQUENCE_FIELD_NUMBER;
      hash = (53 * hash) + getCurrentStopSequence();
    }
    if (hasStopId()) {
      hash = (37 * hash) + STOP_ID_FIELD_NUMBER;
      hash = (53 * hash) + getStopId().hashCode();
    }
    if (hasCurrentStatus()) {
      hash = (37 * hash) + CURRENT_STATUS_FIELD_NUMBER;
      hash = (53 * hash) + currentStatus_;
    }
    if (hasTimestamp()) {
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
    }
    if (hasCongestionLevel()) {
      hash = (37 * hash) + CONGESTION_LEVEL_FIELD_NUMBER;
      hash = (53 * hash) + congestionLevel_;
    }
    if (hasOccupancyStatus()) {
      hash = (37 * hash) + OCCUPANCY_STATUS_FIELD_NUMBER;
      hash = (53 * hash) + occupancyStatus_;
    }
    if (hasOccupancyPercentage()) {
      hash = (37 * hash) + OCCUPANCY_PERCENTAGE_FIELD_NUMBER;
      hash = (53 * hash) + getOccupancyPercentage();
    }
    if (getMultiCarriageDetailsCount() > 0) {
      hash = (37 * hash) + MULTI_CARRIAGE_DETAILS_FIELD_NUMBER;
      hash = (53 * hash) + getMultiCarriageDetailsList().hashCode();
    }
    hash = hashFields(hash, getExtensionFields());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.transit.realtime.VehiclePosition parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.transit.realtime.VehiclePosition parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.transit.realtime.VehiclePosition parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.transit.realtime.VehiclePosition parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.transit.realtime.VehiclePosition parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.transit.realtime.VehiclePosition parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.transit.realtime.VehiclePosition parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.transit.realtime.VehiclePosition parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.google.transit.realtime.VehiclePosition parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.transit.realtime.VehiclePosition parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.transit.realtime.VehiclePosition parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.transit.realtime.VehiclePosition parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.transit.realtime.VehiclePosition prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Realtime positioning information for a given vehicle.
   * </pre>
   *
   * Protobuf type {@code transit_realtime.VehiclePosition}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<
        com.google.transit.realtime.VehiclePosition, Builder> implements
      // @@protoc_insertion_point(builder_implements:transit_realtime.VehiclePosition)
      com.google.transit.realtime.VehiclePositionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehiclePosition_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehiclePosition_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.VehiclePosition.class, com.google.transit.realtime.VehiclePosition.Builder.class);
    }

    // Construct using com.google.transit.realtime.VehiclePosition.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getTripFieldBuilder();
        getVehicleFieldBuilder();
        getPositionFieldBuilder();
        getMultiCarriageDetailsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      trip_ = null;
      if (tripBuilder_ != null) {
        tripBuilder_.dispose();
        tripBuilder_ = null;
      }
      vehicle_ = null;
      if (vehicleBuilder_ != null) {
        vehicleBuilder_.dispose();
        vehicleBuilder_ = null;
      }
      position_ = null;
      if (positionBuilder_ != null) {
        positionBuilder_.dispose();
        positionBuilder_ = null;
      }
      currentStopSequence_ = 0;
      stopId_ = "";
      currentStatus_ = 2;
      timestamp_ = 0L;
      congestionLevel_ = 0;
      occupancyStatus_ = 0;
      occupancyPercentage_ = 0;
      if (multiCarriageDetailsBuilder_ == null) {
        multiCarriageDetails_ = java.util.Collections.emptyList();
      } else {
        multiCarriageDetails_ = null;
        multiCarriageDetailsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000400);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehiclePosition_descriptor;
    }

    @java.lang.Override
    public com.google.transit.realtime.VehiclePosition getDefaultInstanceForType() {
      return com.google.transit.realtime.VehiclePosition.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.transit.realtime.VehiclePosition build() {
      com.google.transit.realtime.VehiclePosition result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.transit.realtime.VehiclePosition buildPartial() {
      com.google.transit.realtime.VehiclePosition result = new com.google.transit.realtime.VehiclePosition(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.transit.realtime.VehiclePosition result) {
      if (multiCarriageDetailsBuilder_ == null) {
        if (((bitField0_ & 0x00000400) != 0)) {
          multiCarriageDetails_ = java.util.Collections.unmodifiableList(multiCarriageDetails_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.multiCarriageDetails_ = multiCarriageDetails_;
      } else {
        result.multiCarriageDetails_ = multiCarriageDetailsBuilder_.build();
      }
    }

    private void buildPartial0(com.google.transit.realtime.VehiclePosition result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.trip_ = tripBuilder_ == null
            ? trip_
            : tripBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.vehicle_ = vehicleBuilder_ == null
            ? vehicle_
            : vehicleBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.position_ = positionBuilder_ == null
            ? position_
            : positionBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.currentStopSequence_ = currentStopSequence_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.stopId_ = stopId_;
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.currentStatus_ = currentStatus_;
        to_bitField0_ |= 0x00000020;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.timestamp_ = timestamp_;
        to_bitField0_ |= 0x00000040;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.congestionLevel_ = congestionLevel_;
        to_bitField0_ |= 0x00000080;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.occupancyStatus_ = occupancyStatus_;
        to_bitField0_ |= 0x00000100;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.occupancyPercentage_ = occupancyPercentage_;
        to_bitField0_ |= 0x00000200;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public <Type> Builder setExtension(
        com.google.protobuf.GeneratedMessage.GeneratedExtension<
            com.google.transit.realtime.VehiclePosition, Type> extension,
        Type value) {
      return super.setExtension(extension, value);
    }
    @java.lang.Override
    public <Type> Builder setExtension(
        com.google.protobuf.GeneratedMessage.GeneratedExtension<
            com.google.transit.realtime.VehiclePosition, java.util.List<Type>> extension,
        int index, Type value) {
      return super.setExtension(extension, index, value);
    }
    @java.lang.Override
    public <Type> Builder addExtension(
        com.google.protobuf.GeneratedMessage.GeneratedExtension<
            com.google.transit.realtime.VehiclePosition, java.util.List<Type>> extension,
        Type value) {
      return super.addExtension(extension, value);
    }
    @java.lang.Override
    public <T> Builder clearExtension(
        com.google.protobuf.GeneratedMessage.GeneratedExtension<
            com.google.transit.realtime.VehiclePosition, T> extension) {
      return super.clearExtension(extension);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.transit.realtime.VehiclePosition) {
        return mergeFrom((com.google.transit.realtime.VehiclePosition)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.transit.realtime.VehiclePosition other) {
      if (other == com.google.transit.realtime.VehiclePosition.getDefaultInstance()) return this;
      if (other.hasTrip()) {
        mergeTrip(other.getTrip());
      }
      if (other.hasVehicle()) {
        mergeVehicle(other.getVehicle());
      }
      if (other.hasPosition()) {
        mergePosition(other.getPosition());
      }
      if (other.hasCurrentStopSequence()) {
        setCurrentStopSequence(other.getCurrentStopSequence());
      }
      if (other.hasStopId()) {
        stopId_ = other.stopId_;
        bitField0_ |= 0x00000010;
        onChanged();
      }
      if (other.hasCurrentStatus()) {
        setCurrentStatus(other.getCurrentStatus());
      }
      if (other.hasTimestamp()) {
        setTimestamp(other.getTimestamp());
      }
      if (other.hasCongestionLevel()) {
        setCongestionLevel(other.getCongestionLevel());
      }
      if (other.hasOccupancyStatus()) {
        setOccupancyStatus(other.getOccupancyStatus());
      }
      if (other.hasOccupancyPercentage()) {
        setOccupancyPercentage(other.getOccupancyPercentage());
      }
      if (multiCarriageDetailsBuilder_ == null) {
        if (!other.multiCarriageDetails_.isEmpty()) {
          if (multiCarriageDetails_.isEmpty()) {
            multiCarriageDetails_ = other.multiCarriageDetails_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureMultiCarriageDetailsIsMutable();
            multiCarriageDetails_.addAll(other.multiCarriageDetails_);
          }
          onChanged();
        }
      } else {
        if (!other.multiCarriageDetails_.isEmpty()) {
          if (multiCarriageDetailsBuilder_.isEmpty()) {
            multiCarriageDetailsBuilder_.dispose();
            multiCarriageDetailsBuilder_ = null;
            multiCarriageDetails_ = other.multiCarriageDetails_;
            bitField0_ = (bitField0_ & ~0x00000400);
            multiCarriageDetailsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getMultiCarriageDetailsFieldBuilder() : null;
          } else {
            multiCarriageDetailsBuilder_.addAllMessages(other.multiCarriageDetails_);
          }
        }
      }
      this.mergeExtensionFields(other);
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      if (hasTrip()) {
        if (!getTrip().isInitialized()) {
          return false;
        }
      }
      if (hasVehicle()) {
        if (!getVehicle().isInitialized()) {
          return false;
        }
      }
      if (hasPosition()) {
        if (!getPosition().isInitialized()) {
          return false;
        }
      }
      for (int i = 0; i < getMultiCarriageDetailsCount(); i++) {
        if (!getMultiCarriageDetails(i).isInitialized()) {
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        return false;
      }
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getTripFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getPositionFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 18
            case 24: {
              currentStopSequence_ = input.readUInt32();
              bitField0_ |= 0x00000008;
              break;
            } // case 24
            case 32: {
              int tmpRaw = input.readEnum();
              com.google.transit.realtime.VehiclePosition.VehicleStopStatus tmpValue =
                  com.google.transit.realtime.VehiclePosition.VehicleStopStatus.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(4, tmpRaw);
              } else {
                currentStatus_ = tmpRaw;
                bitField0_ |= 0x00000020;
              }
              break;
            } // case 32
            case 40: {
              timestamp_ = input.readUInt64();
              bitField0_ |= 0x00000040;
              break;
            } // case 40
            case 48: {
              int tmpRaw = input.readEnum();
              com.google.transit.realtime.VehiclePosition.CongestionLevel tmpValue =
                  com.google.transit.realtime.VehiclePosition.CongestionLevel.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(6, tmpRaw);
              } else {
                congestionLevel_ = tmpRaw;
                bitField0_ |= 0x00000080;
              }
              break;
            } // case 48
            case 58: {
              stopId_ = input.readBytes();
              bitField0_ |= 0x00000010;
              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getVehicleFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 66
            case 72: {
              int tmpRaw = input.readEnum();
              com.google.transit.realtime.VehiclePosition.OccupancyStatus tmpValue =
                  com.google.transit.realtime.VehiclePosition.OccupancyStatus.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(9, tmpRaw);
              } else {
                occupancyStatus_ = tmpRaw;
                bitField0_ |= 0x00000100;
              }
              break;
            } // case 72
            case 80: {
              occupancyPercentage_ = input.readUInt32();
              bitField0_ |= 0x00000200;
              break;
            } // case 80
            case 90: {
              com.google.transit.realtime.VehiclePosition.CarriageDetails m =
                  input.readMessage(
                      com.google.transit.realtime.VehiclePosition.CarriageDetails.PARSER,
                      extensionRegistry);
              if (multiCarriageDetailsBuilder_ == null) {
                ensureMultiCarriageDetailsIsMutable();
                multiCarriageDetails_.add(m);
              } else {
                multiCarriageDetailsBuilder_.addMessage(m);
              }
              break;
            } // case 90
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.transit.realtime.TripDescriptor trip_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.transit.realtime.TripDescriptor, com.google.transit.realtime.TripDescriptor.Builder, com.google.transit.realtime.TripDescriptorOrBuilder> tripBuilder_;
    /**
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     *
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     * @return Whether the trip field is set.
     */
    public boolean hasTrip() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     *
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     * @return The trip.
     */
    public com.google.transit.realtime.TripDescriptor getTrip() {
      if (tripBuilder_ == null) {
        return trip_ == null ? com.google.transit.realtime.TripDescriptor.getDefaultInstance() : trip_;
      } else {
        return tripBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     *
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public Builder setTrip(com.google.transit.realtime.TripDescriptor value) {
      if (tripBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        trip_ = value;
      } else {
        tripBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     *
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public Builder setTrip(
        com.google.transit.realtime.TripDescriptor.Builder builderForValue) {
      if (tripBuilder_ == null) {
        trip_ = builderForValue.build();
      } else {
        tripBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     *
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public Builder mergeTrip(com.google.transit.realtime.TripDescriptor value) {
      if (tripBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          trip_ != null &&
          trip_ != com.google.transit.realtime.TripDescriptor.getDefaultInstance()) {
          getTripBuilder().mergeFrom(value);
        } else {
          trip_ = value;
        }
      } else {
        tripBuilder_.mergeFrom(value);
      }
      if (trip_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     *
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public Builder clearTrip() {
      bitField0_ = (bitField0_ & ~0x00000001);
      trip_ = null;
      if (tripBuilder_ != null) {
        tripBuilder_.dispose();
        tripBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     *
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public com.google.transit.realtime.TripDescriptor.Builder getTripBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getTripFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     *
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public com.google.transit.realtime.TripDescriptorOrBuilder getTripOrBuilder() {
      if (tripBuilder_ != null) {
        return tripBuilder_.getMessageOrBuilder();
      } else {
        return trip_ == null ?
            com.google.transit.realtime.TripDescriptor.getDefaultInstance() : trip_;
      }
    }
    /**
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     *
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.transit.realtime.TripDescriptor, com.google.transit.realtime.TripDescriptor.Builder, com.google.transit.realtime.TripDescriptorOrBuilder> 
        getTripFieldBuilder() {
      if (tripBuilder_ == null) {
        tripBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.transit.realtime.TripDescriptor, com.google.transit.realtime.TripDescriptor.Builder, com.google.transit.realtime.TripDescriptorOrBuilder>(
                getTrip(),
                getParentForChildren(),
                isClean());
        trip_ = null;
      }
      return tripBuilder_;
    }

    private com.google.transit.realtime.VehicleDescriptor vehicle_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.transit.realtime.VehicleDescriptor, com.google.transit.realtime.VehicleDescriptor.Builder, com.google.transit.realtime.VehicleDescriptorOrBuilder> vehicleBuilder_;
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     * @return Whether the vehicle field is set.
     */
    public boolean hasVehicle() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     * @return The vehicle.
     */
    public com.google.transit.realtime.VehicleDescriptor getVehicle() {
      if (vehicleBuilder_ == null) {
        return vehicle_ == null ? com.google.transit.realtime.VehicleDescriptor.getDefaultInstance() : vehicle_;
      } else {
        return vehicleBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     */
    public Builder setVehicle(com.google.transit.realtime.VehicleDescriptor value) {
      if (vehicleBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        vehicle_ = value;
      } else {
        vehicleBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     */
    public Builder setVehicle(
        com.google.transit.realtime.VehicleDescriptor.Builder builderForValue) {
      if (vehicleBuilder_ == null) {
        vehicle_ = builderForValue.build();
      } else {
        vehicleBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     */
    public Builder mergeVehicle(com.google.transit.realtime.VehicleDescriptor value) {
      if (vehicleBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          vehicle_ != null &&
          vehicle_ != com.google.transit.realtime.VehicleDescriptor.getDefaultInstance()) {
          getVehicleBuilder().mergeFrom(value);
        } else {
          vehicle_ = value;
        }
      } else {
        vehicleBuilder_.mergeFrom(value);
      }
      if (vehicle_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     */
    public Builder clearVehicle() {
      bitField0_ = (bitField0_ & ~0x00000002);
      vehicle_ = null;
      if (vehicleBuilder_ != null) {
        vehicleBuilder_.dispose();
        vehicleBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     */
    public com.google.transit.realtime.VehicleDescriptor.Builder getVehicleBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getVehicleFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     */
    public com.google.transit.realtime.VehicleDescriptorOrBuilder getVehicleOrBuilder() {
      if (vehicleBuilder_ != null) {
        return vehicleBuilder_.getMessageOrBuilder();
      } else {
        return vehicle_ == null ?
            com.google.transit.realtime.VehicleDescriptor.getDefaultInstance() : vehicle_;
      }
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.transit.realtime.VehicleDescriptor, com.google.transit.realtime.VehicleDescriptor.Builder, com.google.transit.realtime.VehicleDescriptorOrBuilder> 
        getVehicleFieldBuilder() {
      if (vehicleBuilder_ == null) {
        vehicleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.transit.realtime.VehicleDescriptor, com.google.transit.realtime.VehicleDescriptor.Builder, com.google.transit.realtime.VehicleDescriptorOrBuilder>(
                getVehicle(),
                getParentForChildren(),
                isClean());
        vehicle_ = null;
      }
      return vehicleBuilder_;
    }

    private com.google.transit.realtime.Position position_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.transit.realtime.Position, com.google.transit.realtime.Position.Builder, com.google.transit.realtime.PositionOrBuilder> positionBuilder_;
    /**
     * <pre>
     * Current position of this vehicle.
     * </pre>
     *
     * <code>optional .transit_realtime.Position position = 2;</code>
     * @return Whether the position field is set.
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Current position of this vehicle.
     * </pre>
     *
     * <code>optional .transit_realtime.Position position = 2;</code>
     * @return The position.
     */
    public com.google.transit.realtime.Position getPosition() {
      if (positionBuilder_ == null) {
        return position_ == null ? com.google.transit.realtime.Position.getDefaultInstance() : position_;
      } else {
        return positionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Current position of this vehicle.
     * </pre>
     *
     * <code>optional .transit_realtime.Position position = 2;</code>
     */
    public Builder setPosition(com.google.transit.realtime.Position value) {
      if (positionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        position_ = value;
      } else {
        positionBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Current position of this vehicle.
     * </pre>
     *
     * <code>optional .transit_realtime.Position position = 2;</code>
     */
    public Builder setPosition(
        com.google.transit.realtime.Position.Builder builderForValue) {
      if (positionBuilder_ == null) {
        position_ = builderForValue.build();
      } else {
        positionBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Current position of this vehicle.
     * </pre>
     *
     * <code>optional .transit_realtime.Position position = 2;</code>
     */
    public Builder mergePosition(com.google.transit.realtime.Position value) {
      if (positionBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          position_ != null &&
          position_ != com.google.transit.realtime.Position.getDefaultInstance()) {
          getPositionBuilder().mergeFrom(value);
        } else {
          position_ = value;
        }
      } else {
        positionBuilder_.mergeFrom(value);
      }
      if (position_ != null) {
        bitField0_ |= 0x00000004;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Current position of this vehicle.
     * </pre>
     *
     * <code>optional .transit_realtime.Position position = 2;</code>
     */
    public Builder clearPosition() {
      bitField0_ = (bitField0_ & ~0x00000004);
      position_ = null;
      if (positionBuilder_ != null) {
        positionBuilder_.dispose();
        positionBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Current position of this vehicle.
     * </pre>
     *
     * <code>optional .transit_realtime.Position position = 2;</code>
     */
    public com.google.transit.realtime.Position.Builder getPositionBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getPositionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Current position of this vehicle.
     * </pre>
     *
     * <code>optional .transit_realtime.Position position = 2;</code>
     */
    public com.google.transit.realtime.PositionOrBuilder getPositionOrBuilder() {
      if (positionBuilder_ != null) {
        return positionBuilder_.getMessageOrBuilder();
      } else {
        return position_ == null ?
            com.google.transit.realtime.Position.getDefaultInstance() : position_;
      }
    }
    /**
     * <pre>
     * Current position of this vehicle.
     * </pre>
     *
     * <code>optional .transit_realtime.Position position = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.transit.realtime.Position, com.google.transit.realtime.Position.Builder, com.google.transit.realtime.PositionOrBuilder> 
        getPositionFieldBuilder() {
      if (positionBuilder_ == null) {
        positionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.transit.realtime.Position, com.google.transit.realtime.Position.Builder, com.google.transit.realtime.PositionOrBuilder>(
                getPosition(),
                getParentForChildren(),
                isClean());
        position_ = null;
      }
      return positionBuilder_;
    }

    private int currentStopSequence_ ;
    /**
     * <pre>
     * The stop sequence index of the current stop. The meaning of
     * current_stop_sequence (i.e., the stop that it refers to) is determined by
     * current_status.
     * If current_status is missing IN_TRANSIT_TO is assumed.
     * </pre>
     *
     * <code>optional uint32 current_stop_sequence = 3;</code>
     * @return Whether the currentStopSequence field is set.
     */
    @java.lang.Override
    public boolean hasCurrentStopSequence() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The stop sequence index of the current stop. The meaning of
     * current_stop_sequence (i.e., the stop that it refers to) is determined by
     * current_status.
     * If current_status is missing IN_TRANSIT_TO is assumed.
     * </pre>
     *
     * <code>optional uint32 current_stop_sequence = 3;</code>
     * @return The currentStopSequence.
     */
    @java.lang.Override
    public int getCurrentStopSequence() {
      return currentStopSequence_;
    }
    /**
     * <pre>
     * The stop sequence index of the current stop. The meaning of
     * current_stop_sequence (i.e., the stop that it refers to) is determined by
     * current_status.
     * If current_status is missing IN_TRANSIT_TO is assumed.
     * </pre>
     *
     * <code>optional uint32 current_stop_sequence = 3;</code>
     * @param value The currentStopSequence to set.
     * @return This builder for chaining.
     */
    public Builder setCurrentStopSequence(int value) {

      currentStopSequence_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The stop sequence index of the current stop. The meaning of
     * current_stop_sequence (i.e., the stop that it refers to) is determined by
     * current_status.
     * If current_status is missing IN_TRANSIT_TO is assumed.
     * </pre>
     *
     * <code>optional uint32 current_stop_sequence = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearCurrentStopSequence() {
      bitField0_ = (bitField0_ & ~0x00000008);
      currentStopSequence_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object stopId_ = "";
    /**
     * <pre>
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 7;</code>
     * @return Whether the stopId field is set.
     */
    public boolean hasStopId() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 7;</code>
     * @return The stopId.
     */
    public java.lang.String getStopId() {
      java.lang.Object ref = stopId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          stopId_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 7;</code>
     * @return The bytes for stopId.
     */
    public com.google.protobuf.ByteString
        getStopIdBytes() {
      java.lang.Object ref = stopId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stopId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 7;</code>
     * @param value The stopId to set.
     * @return This builder for chaining.
     */
    public Builder setStopId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      stopId_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearStopId() {
      stopId_ = getDefaultInstance().getStopId();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 7;</code>
     * @param value The bytes for stopId to set.
     * @return This builder for chaining.
     */
    public Builder setStopIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      stopId_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    private int currentStatus_ = 2;
    /**
     * <pre>
     * The exact status of the vehicle with respect to the current stop.
     * Ignored if current_stop_sequence is missing.
     * </pre>
     *
     * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];</code>
     * @return Whether the currentStatus field is set.
     */
    @java.lang.Override public boolean hasCurrentStatus() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * The exact status of the vehicle with respect to the current stop.
     * Ignored if current_stop_sequence is missing.
     * </pre>
     *
     * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];</code>
     * @return The currentStatus.
     */
    @java.lang.Override
    public com.google.transit.realtime.VehiclePosition.VehicleStopStatus getCurrentStatus() {
      com.google.transit.realtime.VehiclePosition.VehicleStopStatus result = com.google.transit.realtime.VehiclePosition.VehicleStopStatus.forNumber(currentStatus_);
      return result == null ? com.google.transit.realtime.VehiclePosition.VehicleStopStatus.IN_TRANSIT_TO : result;
    }
    /**
     * <pre>
     * The exact status of the vehicle with respect to the current stop.
     * Ignored if current_stop_sequence is missing.
     * </pre>
     *
     * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];</code>
     * @param value The currentStatus to set.
     * @return This builder for chaining.
     */
    public Builder setCurrentStatus(com.google.transit.realtime.VehiclePosition.VehicleStopStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000020;
      currentStatus_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The exact status of the vehicle with respect to the current stop.
     * Ignored if current_stop_sequence is missing.
     * </pre>
     *
     * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];</code>
     * @return This builder for chaining.
     */
    public Builder clearCurrentStatus() {
      bitField0_ = (bitField0_ & ~0x00000020);
      currentStatus_ = 2;
      onChanged();
      return this;
    }

    private long timestamp_ ;
    /**
     * <pre>
     * Moment at which the vehicle's position was measured. In POSIX time
     * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     *
     * <code>optional uint64 timestamp = 5;</code>
     * @return Whether the timestamp field is set.
     */
    @java.lang.Override
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Moment at which the vehicle's position was measured. In POSIX time
     * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     *
     * <code>optional uint64 timestamp = 5;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public long getTimestamp() {
      return timestamp_;
    }
    /**
     * <pre>
     * Moment at which the vehicle's position was measured. In POSIX time
     * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     *
     * <code>optional uint64 timestamp = 5;</code>
     * @param value The timestamp to set.
     * @return This builder for chaining.
     */
    public Builder setTimestamp(long value) {

      timestamp_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Moment at which the vehicle's position was measured. In POSIX time
     * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     *
     * <code>optional uint64 timestamp = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearTimestamp() {
      bitField0_ = (bitField0_ & ~0x00000040);
      timestamp_ = 0L;
      onChanged();
      return this;
    }

    private int congestionLevel_ = 0;
    /**
     * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
     * @return Whether the congestionLevel field is set.
     */
    @java.lang.Override public boolean hasCongestionLevel() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
     * @return The congestionLevel.
     */
    @java.lang.Override
    public com.google.transit.realtime.VehiclePosition.CongestionLevel getCongestionLevel() {
      com.google.transit.realtime.VehiclePosition.CongestionLevel result = com.google.transit.realtime.VehiclePosition.CongestionLevel.forNumber(congestionLevel_);
      return result == null ? com.google.transit.realtime.VehiclePosition.CongestionLevel.UNKNOWN_CONGESTION_LEVEL : result;
    }
    /**
     * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
     * @param value The congestionLevel to set.
     * @return This builder for chaining.
     */
    public Builder setCongestionLevel(com.google.transit.realtime.VehiclePosition.CongestionLevel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000080;
      congestionLevel_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearCongestionLevel() {
      bitField0_ = (bitField0_ & ~0x00000080);
      congestionLevel_ = 0;
      onChanged();
      return this;
    }

    private int occupancyStatus_ = 0;
    /**
     * <pre>
     * If multi_carriage_status is populated with per-carriage OccupancyStatus,
     * then this field should describe the entire vehicle with all carriages accepting passengers considered.
     * </pre>
     *
     * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
     * @return Whether the occupancyStatus field is set.
     */
    @java.lang.Override public boolean hasOccupancyStatus() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * If multi_carriage_status is populated with per-carriage OccupancyStatus,
     * then this field should describe the entire vehicle with all carriages accepting passengers considered.
     * </pre>
     *
     * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
     * @return The occupancyStatus.
     */
    @java.lang.Override
    public com.google.transit.realtime.VehiclePosition.OccupancyStatus getOccupancyStatus() {
      com.google.transit.realtime.VehiclePosition.OccupancyStatus result = com.google.transit.realtime.VehiclePosition.OccupancyStatus.forNumber(occupancyStatus_);
      return result == null ? com.google.transit.realtime.VehiclePosition.OccupancyStatus.EMPTY : result;
    }
    /**
     * <pre>
     * If multi_carriage_status is populated with per-carriage OccupancyStatus,
     * then this field should describe the entire vehicle with all carriages accepting passengers considered.
     * </pre>
     *
     * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
     * @param value The occupancyStatus to set.
     * @return This builder for chaining.
     */
    public Builder setOccupancyStatus(com.google.transit.realtime.VehiclePosition.OccupancyStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000100;
      occupancyStatus_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If multi_carriage_status is populated with per-carriage OccupancyStatus,
     * then this field should describe the entire vehicle with all carriages accepting passengers considered.
     * </pre>
     *
     * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearOccupancyStatus() {
      bitField0_ = (bitField0_ & ~0x00000100);
      occupancyStatus_ = 0;
      onChanged();
      return this;
    }

    private int occupancyPercentage_ ;
    /**
     * <pre>
     * A percentage value indicating the degree of passenger occupancy in the vehicle.
     * The values are represented as an integer without decimals. 0 means 0% and 100 means 100%.
     * The value 100 should represent the total maximum occupancy the vehicle was designed for,
     * including both seated and standing capacity, and current operating regulations allow.
     * The value may exceed 100 if there are more passengers than the maximum designed capacity.
     * The precision of occupancy_percentage should be low enough that individual passengers cannot be tracked boarding or alighting the vehicle.
     * If multi_carriage_status is populated with per-carriage occupancy_percentage, 
     * then this field should describe the entire vehicle with all carriages accepting passengers considered.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional uint32 occupancy_percentage = 10;</code>
     * @return Whether the occupancyPercentage field is set.
     */
    @java.lang.Override
    public boolean hasOccupancyPercentage() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * A percentage value indicating the degree of passenger occupancy in the vehicle.
     * The values are represented as an integer without decimals. 0 means 0% and 100 means 100%.
     * The value 100 should represent the total maximum occupancy the vehicle was designed for,
     * including both seated and standing capacity, and current operating regulations allow.
     * The value may exceed 100 if there are more passengers than the maximum designed capacity.
     * The precision of occupancy_percentage should be low enough that individual passengers cannot be tracked boarding or alighting the vehicle.
     * If multi_carriage_status is populated with per-carriage occupancy_percentage, 
     * then this field should describe the entire vehicle with all carriages accepting passengers considered.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional uint32 occupancy_percentage = 10;</code>
     * @return The occupancyPercentage.
     */
    @java.lang.Override
    public int getOccupancyPercentage() {
      return occupancyPercentage_;
    }
    /**
     * <pre>
     * A percentage value indicating the degree of passenger occupancy in the vehicle.
     * The values are represented as an integer without decimals. 0 means 0% and 100 means 100%.
     * The value 100 should represent the total maximum occupancy the vehicle was designed for,
     * including both seated and standing capacity, and current operating regulations allow.
     * The value may exceed 100 if there are more passengers than the maximum designed capacity.
     * The precision of occupancy_percentage should be low enough that individual passengers cannot be tracked boarding or alighting the vehicle.
     * If multi_carriage_status is populated with per-carriage occupancy_percentage, 
     * then this field should describe the entire vehicle with all carriages accepting passengers considered.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional uint32 occupancy_percentage = 10;</code>
     * @param value The occupancyPercentage to set.
     * @return This builder for chaining.
     */
    public Builder setOccupancyPercentage(int value) {

      occupancyPercentage_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A percentage value indicating the degree of passenger occupancy in the vehicle.
     * The values are represented as an integer without decimals. 0 means 0% and 100 means 100%.
     * The value 100 should represent the total maximum occupancy the vehicle was designed for,
     * including both seated and standing capacity, and current operating regulations allow.
     * The value may exceed 100 if there are more passengers than the maximum designed capacity.
     * The precision of occupancy_percentage should be low enough that individual passengers cannot be tracked boarding or alighting the vehicle.
     * If multi_carriage_status is populated with per-carriage occupancy_percentage, 
     * then this field should describe the entire vehicle with all carriages accepting passengers considered.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional uint32 occupancy_percentage = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearOccupancyPercentage() {
      bitField0_ = (bitField0_ & ~0x00000200);
      occupancyPercentage_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<com.google.transit.realtime.VehiclePosition.CarriageDetails> multiCarriageDetails_ =
      java.util.Collections.emptyList();
    private void ensureMultiCarriageDetailsIsMutable() {
      if (!((bitField0_ & 0x00000400) != 0)) {
        multiCarriageDetails_ = new java.util.ArrayList<com.google.transit.realtime.VehiclePosition.CarriageDetails>(multiCarriageDetails_);
        bitField0_ |= 0x00000400;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.transit.realtime.VehiclePosition.CarriageDetails, com.google.transit.realtime.VehiclePosition.CarriageDetails.Builder, com.google.transit.realtime.VehiclePosition.CarriageDetailsOrBuilder> multiCarriageDetailsBuilder_;

    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public java.util.List<com.google.transit.realtime.VehiclePosition.CarriageDetails> getMultiCarriageDetailsList() {
      if (multiCarriageDetailsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(multiCarriageDetails_);
      } else {
        return multiCarriageDetailsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public int getMultiCarriageDetailsCount() {
      if (multiCarriageDetailsBuilder_ == null) {
        return multiCarriageDetails_.size();
      } else {
        return multiCarriageDetailsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public com.google.transit.realtime.VehiclePosition.CarriageDetails getMultiCarriageDetails(int index) {
      if (multiCarriageDetailsBuilder_ == null) {
        return multiCarriageDetails_.get(index);
      } else {
        return multiCarriageDetailsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public Builder setMultiCarriageDetails(
        int index, com.google.transit.realtime.VehiclePosition.CarriageDetails value) {
      if (multiCarriageDetailsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMultiCarriageDetailsIsMutable();
        multiCarriageDetails_.set(index, value);
        onChanged();
      } else {
        multiCarriageDetailsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public Builder setMultiCarriageDetails(
        int index, com.google.transit.realtime.VehiclePosition.CarriageDetails.Builder builderForValue) {
      if (multiCarriageDetailsBuilder_ == null) {
        ensureMultiCarriageDetailsIsMutable();
        multiCarriageDetails_.set(index, builderForValue.build());
        onChanged();
      } else {
        multiCarriageDetailsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public Builder addMultiCarriageDetails(com.google.transit.realtime.VehiclePosition.CarriageDetails value) {
      if (multiCarriageDetailsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMultiCarriageDetailsIsMutable();
        multiCarriageDetails_.add(value);
        onChanged();
      } else {
        multiCarriageDetailsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public Builder addMultiCarriageDetails(
        int index, com.google.transit.realtime.VehiclePosition.CarriageDetails value) {
      if (multiCarriageDetailsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMultiCarriageDetailsIsMutable();
        multiCarriageDetails_.add(index, value);
        onChanged();
      } else {
        multiCarriageDetailsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public Builder addMultiCarriageDetails(
        com.google.transit.realtime.VehiclePosition.CarriageDetails.Builder builderForValue) {
      if (multiCarriageDetailsBuilder_ == null) {
        ensureMultiCarriageDetailsIsMutable();
        multiCarriageDetails_.add(builderForValue.build());
        onChanged();
      } else {
        multiCarriageDetailsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public Builder addMultiCarriageDetails(
        int index, com.google.transit.realtime.VehiclePosition.CarriageDetails.Builder builderForValue) {
      if (multiCarriageDetailsBuilder_ == null) {
        ensureMultiCarriageDetailsIsMutable();
        multiCarriageDetails_.add(index, builderForValue.build());
        onChanged();
      } else {
        multiCarriageDetailsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public Builder addAllMultiCarriageDetails(
        java.lang.Iterable<? extends com.google.transit.realtime.VehiclePosition.CarriageDetails> values) {
      if (multiCarriageDetailsBuilder_ == null) {
        ensureMultiCarriageDetailsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, multiCarriageDetails_);
        onChanged();
      } else {
        multiCarriageDetailsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public Builder clearMultiCarriageDetails() {
      if (multiCarriageDetailsBuilder_ == null) {
        multiCarriageDetails_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
      } else {
        multiCarriageDetailsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public Builder removeMultiCarriageDetails(int index) {
      if (multiCarriageDetailsBuilder_ == null) {
        ensureMultiCarriageDetailsIsMutable();
        multiCarriageDetails_.remove(index);
        onChanged();
      } else {
        multiCarriageDetailsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public com.google.transit.realtime.VehiclePosition.CarriageDetails.Builder getMultiCarriageDetailsBuilder(
        int index) {
      return getMultiCarriageDetailsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public com.google.transit.realtime.VehiclePosition.CarriageDetailsOrBuilder getMultiCarriageDetailsOrBuilder(
        int index) {
      if (multiCarriageDetailsBuilder_ == null) {
        return multiCarriageDetails_.get(index);  } else {
        return multiCarriageDetailsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public java.util.List<? extends com.google.transit.realtime.VehiclePosition.CarriageDetailsOrBuilder> 
         getMultiCarriageDetailsOrBuilderList() {
      if (multiCarriageDetailsBuilder_ != null) {
        return multiCarriageDetailsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(multiCarriageDetails_);
      }
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public com.google.transit.realtime.VehiclePosition.CarriageDetails.Builder addMultiCarriageDetailsBuilder() {
      return getMultiCarriageDetailsFieldBuilder().addBuilder(
          com.google.transit.realtime.VehiclePosition.CarriageDetails.getDefaultInstance());
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public com.google.transit.realtime.VehiclePosition.CarriageDetails.Builder addMultiCarriageDetailsBuilder(
        int index) {
      return getMultiCarriageDetailsFieldBuilder().addBuilder(
          index, com.google.transit.realtime.VehiclePosition.CarriageDetails.getDefaultInstance());
    }
    /**
     * <pre>
     * Details of the multiple carriages of this given vehicle.
     * The first occurrence represents the first carriage of the vehicle, 
     * given the current direction of travel. 
     * The number of occurrences of the multi_carriage_details 
     * field represents the number of carriages of the vehicle.
     * It also includes non boardable carriages, 
     * like engines, maintenance carriages, etc… as they provide valuable 
     * information to passengers about where to stand on a platform.
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;</code>
     */
    public java.util.List<com.google.transit.realtime.VehiclePosition.CarriageDetails.Builder> 
         getMultiCarriageDetailsBuilderList() {
      return getMultiCarriageDetailsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.transit.realtime.VehiclePosition.CarriageDetails, com.google.transit.realtime.VehiclePosition.CarriageDetails.Builder, com.google.transit.realtime.VehiclePosition.CarriageDetailsOrBuilder> 
        getMultiCarriageDetailsFieldBuilder() {
      if (multiCarriageDetailsBuilder_ == null) {
        multiCarriageDetailsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.transit.realtime.VehiclePosition.CarriageDetails, com.google.transit.realtime.VehiclePosition.CarriageDetails.Builder, com.google.transit.realtime.VehiclePosition.CarriageDetailsOrBuilder>(
                multiCarriageDetails_,
                ((bitField0_ & 0x00000400) != 0),
                getParentForChildren(),
                isClean());
        multiCarriageDetails_ = null;
      }
      return multiCarriageDetailsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:transit_realtime.VehiclePosition)
  }

  // @@protoc_insertion_point(class_scope:transit_realtime.VehiclePosition)
  private static final com.google.transit.realtime.VehiclePosition DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.transit.realtime.VehiclePosition();
  }

  public static com.google.transit.realtime.VehiclePosition getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<VehiclePosition>
      PARSER = new com.google.protobuf.AbstractParser<VehiclePosition>() {
    @java.lang.Override
    public VehiclePosition parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<VehiclePosition> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<VehiclePosition> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.transit.realtime.VehiclePosition getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

