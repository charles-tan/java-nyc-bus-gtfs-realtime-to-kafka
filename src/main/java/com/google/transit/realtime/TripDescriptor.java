// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main/resources/gtfs-realtime.proto

package com.google.transit.realtime;

/**
 * <pre>
 * A descriptor that identifies an instance of a GTFS trip, or all instances of
 * a trip along a route.
 * - To specify a single trip instance, the trip_id (and if necessary,
 *   start_time) is set. If route_id is also set, then it should be same as one
 *   that the given trip corresponds to.
 * - To specify all the trips along a given route, only the route_id should be
 *   set. Note that if the trip_id is not known, then stop sequence ids in
 *   TripUpdate are not sufficient, and stop_ids must be provided as well. In
 *   addition, absolute arrival/departure times must be provided.
 * </pre>
 *
 * Protobuf type {@code transit_realtime.TripDescriptor}
 */
public final class TripDescriptor extends
    com.google.protobuf.GeneratedMessageV3.ExtendableMessage<
      TripDescriptor> implements
    // @@protoc_insertion_point(message_implements:transit_realtime.TripDescriptor)
    TripDescriptorOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TripDescriptor.newBuilder() to construct.
  private TripDescriptor(com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<com.google.transit.realtime.TripDescriptor, ?> builder) {
    super(builder);
  }
  private TripDescriptor() {
    tripId_ = "";
    routeId_ = "";
    startTime_ = "";
    startDate_ = "";
    scheduleRelationship_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new TripDescriptor();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripDescriptor_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripDescriptor_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.transit.realtime.TripDescriptor.class, com.google.transit.realtime.TripDescriptor.Builder.class);
  }

  /**
   * <pre>
   * The relation between this trip and the static schedule. If a trip is done
   * in accordance with temporary schedule, not reflected in GTFS, then it
   * shouldn't be marked as SCHEDULED, but likely as ADDED.
   * </pre>
   *
   * Protobuf enum {@code transit_realtime.TripDescriptor.ScheduleRelationship}
   */
  public enum ScheduleRelationship
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Trip that is running in accordance with its GTFS schedule, or is close
     * enough to the scheduled trip to be associated with it.
     * </pre>
     *
     * <code>SCHEDULED = 0;</code>
     */
    SCHEDULED(0),
    /**
     * <pre>
     * An extra trip that was added in addition to a running schedule, for
     * example, to replace a broken vehicle or to respond to sudden passenger
     * load.
     * NOTE: Currently, behavior is unspecified for feeds that use this mode. There are discussions on the GTFS GitHub
     * [(1)](https://github.com/google/transit/issues/106) [(2)](https://github.com/google/transit/pull/221)
     * [(3)](https://github.com/google/transit/pull/219) around fully specifying or deprecating ADDED trips and the
     * documentation will be updated when those discussions are finalized.
     * </pre>
     *
     * <code>ADDED = 1;</code>
     */
    ADDED(1),
    /**
     * <pre>
     * A trip that is running with no schedule associated to it (GTFS frequencies.txt exact_times=0).
     * Trips with ScheduleRelationship=UNSCHEDULED must also set all StopTimeUpdates.ScheduleRelationship=UNSCHEDULED.
     * </pre>
     *
     * <code>UNSCHEDULED = 2;</code>
     */
    UNSCHEDULED(2),
    /**
     * <pre>
     * A trip that existed in the schedule but was removed.
     * </pre>
     *
     * <code>CANCELED = 3;</code>
     */
    CANCELED(3),
    /**
     * <pre>
     * Should not be used - for backwards-compatibility only.
     * </pre>
     *
     * <code>REPLACEMENT = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    REPLACEMENT(5),
    /**
     * <pre>
     * An extra trip that was added in addition to a running schedule, for example, to replace a broken vehicle or to
     * respond to sudden passenger load. Used with TripUpdate.TripProperties.trip_id, TripUpdate.TripProperties.start_date,
     * and TripUpdate.TripProperties.start_time to copy an existing trip from static GTFS but start at a different service
     * date and/or time. Duplicating a trip is allowed if the service related to the original trip in (CSV) GTFS
     * (in calendar.txt or calendar_dates.txt) is operating within the next 30 days. The trip to be duplicated is
     * identified via TripUpdate.TripDescriptor.trip_id. This enumeration does not modify the existing trip referenced by
     * TripUpdate.TripDescriptor.trip_id - if a producer wants to cancel the original trip, it must publish a separate
     * TripUpdate with the value of CANCELED or DELETED. Trips defined in GTFS frequencies.txt with exact_times that is
     * empty or equal to 0 cannot be duplicated. The VehiclePosition.TripDescriptor.trip_id for the new trip must contain
     * the matching value from TripUpdate.TripProperties.trip_id and VehiclePosition.TripDescriptor.ScheduleRelationship
     * must also be set to DUPLICATED.
     * Existing producers and consumers that were using the ADDED enumeration to represent duplicated trips must follow
     * the migration guide (https://github.com/google/transit/tree/master/gtfs-realtime/spec/en/examples/migration-duplicated.md)
     * to transition to the DUPLICATED enumeration.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>DUPLICATED = 6;</code>
     */
    DUPLICATED(6),
    /**
     * <pre>
     * A trip that existed in the schedule but was removed and must not be shown to users.
     * DELETED should be used instead of CANCELED to indicate that a transit provider would like to entirely remove
     * information about the corresponding trip from consuming applications, so the trip is not shown as cancelled to
     * riders, e.g. a trip that is entirely being replaced by another trip.
     * This designation becomes particularly important if several trips are cancelled and replaced with substitute service.
     * If consumers were to show explicit information about the cancellations it would distract from the more important
     * real-time predictions.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>DELETED = 7;</code>
     */
    DELETED(7),
    ;

    /**
     * <pre>
     * Trip that is running in accordance with its GTFS schedule, or is close
     * enough to the scheduled trip to be associated with it.
     * </pre>
     *
     * <code>SCHEDULED = 0;</code>
     */
    public static final int SCHEDULED_VALUE = 0;
    /**
     * <pre>
     * An extra trip that was added in addition to a running schedule, for
     * example, to replace a broken vehicle or to respond to sudden passenger
     * load.
     * NOTE: Currently, behavior is unspecified for feeds that use this mode. There are discussions on the GTFS GitHub
     * [(1)](https://github.com/google/transit/issues/106) [(2)](https://github.com/google/transit/pull/221)
     * [(3)](https://github.com/google/transit/pull/219) around fully specifying or deprecating ADDED trips and the
     * documentation will be updated when those discussions are finalized.
     * </pre>
     *
     * <code>ADDED = 1;</code>
     */
    public static final int ADDED_VALUE = 1;
    /**
     * <pre>
     * A trip that is running with no schedule associated to it (GTFS frequencies.txt exact_times=0).
     * Trips with ScheduleRelationship=UNSCHEDULED must also set all StopTimeUpdates.ScheduleRelationship=UNSCHEDULED.
     * </pre>
     *
     * <code>UNSCHEDULED = 2;</code>
     */
    public static final int UNSCHEDULED_VALUE = 2;
    /**
     * <pre>
     * A trip that existed in the schedule but was removed.
     * </pre>
     *
     * <code>CANCELED = 3;</code>
     */
    public static final int CANCELED_VALUE = 3;
    /**
     * <pre>
     * Should not be used - for backwards-compatibility only.
     * </pre>
     *
     * <code>REPLACEMENT = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int REPLACEMENT_VALUE = 5;
    /**
     * <pre>
     * An extra trip that was added in addition to a running schedule, for example, to replace a broken vehicle or to
     * respond to sudden passenger load. Used with TripUpdate.TripProperties.trip_id, TripUpdate.TripProperties.start_date,
     * and TripUpdate.TripProperties.start_time to copy an existing trip from static GTFS but start at a different service
     * date and/or time. Duplicating a trip is allowed if the service related to the original trip in (CSV) GTFS
     * (in calendar.txt or calendar_dates.txt) is operating within the next 30 days. The trip to be duplicated is
     * identified via TripUpdate.TripDescriptor.trip_id. This enumeration does not modify the existing trip referenced by
     * TripUpdate.TripDescriptor.trip_id - if a producer wants to cancel the original trip, it must publish a separate
     * TripUpdate with the value of CANCELED or DELETED. Trips defined in GTFS frequencies.txt with exact_times that is
     * empty or equal to 0 cannot be duplicated. The VehiclePosition.TripDescriptor.trip_id for the new trip must contain
     * the matching value from TripUpdate.TripProperties.trip_id and VehiclePosition.TripDescriptor.ScheduleRelationship
     * must also be set to DUPLICATED.
     * Existing producers and consumers that were using the ADDED enumeration to represent duplicated trips must follow
     * the migration guide (https://github.com/google/transit/tree/master/gtfs-realtime/spec/en/examples/migration-duplicated.md)
     * to transition to the DUPLICATED enumeration.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>DUPLICATED = 6;</code>
     */
    public static final int DUPLICATED_VALUE = 6;
    /**
     * <pre>
     * A trip that existed in the schedule but was removed and must not be shown to users.
     * DELETED should be used instead of CANCELED to indicate that a transit provider would like to entirely remove
     * information about the corresponding trip from consuming applications, so the trip is not shown as cancelled to
     * riders, e.g. a trip that is entirely being replaced by another trip.
     * This designation becomes particularly important if several trips are cancelled and replaced with substitute service.
     * If consumers were to show explicit information about the cancellations it would distract from the more important
     * real-time predictions.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>DELETED = 7;</code>
     */
    public static final int DELETED_VALUE = 7;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ScheduleRelationship valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ScheduleRelationship forNumber(int value) {
      switch (value) {
        case 0: return SCHEDULED;
        case 1: return ADDED;
        case 2: return UNSCHEDULED;
        case 3: return CANCELED;
        case 5: return REPLACEMENT;
        case 6: return DUPLICATED;
        case 7: return DELETED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ScheduleRelationship>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ScheduleRelationship> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ScheduleRelationship>() {
            public ScheduleRelationship findValueByNumber(int number) {
              return ScheduleRelationship.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.transit.realtime.TripDescriptor.getDescriptor().getEnumTypes().get(0);
    }

    private static final ScheduleRelationship[] VALUES = values();

    public static ScheduleRelationship valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ScheduleRelationship(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:transit_realtime.TripDescriptor.ScheduleRelationship)
  }

  private int bitField0_;
  public static final int TRIP_ID_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object tripId_ = "";
  /**
   * <pre>
   * The trip_id from the GTFS feed that this selector refers to.
   * For non frequency-based trips, this field is enough to uniquely identify
   * the trip. For frequency-based trip, start_time and start_date might also be
   * necessary. When schedule_relationship is DUPLICATED within a TripUpdate, the trip_id identifies the trip from
   * static GTFS to be duplicated. When schedule_relationship is DUPLICATED within a VehiclePosition, the trip_id
   * identifies the new duplicate trip and must contain the value for the corresponding TripUpdate.TripProperties.trip_id.
   * </pre>
   *
   * <code>optional string trip_id = 1;</code>
   * @return Whether the tripId field is set.
   */
  @java.lang.Override
  public boolean hasTripId() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The trip_id from the GTFS feed that this selector refers to.
   * For non frequency-based trips, this field is enough to uniquely identify
   * the trip. For frequency-based trip, start_time and start_date might also be
   * necessary. When schedule_relationship is DUPLICATED within a TripUpdate, the trip_id identifies the trip from
   * static GTFS to be duplicated. When schedule_relationship is DUPLICATED within a VehiclePosition, the trip_id
   * identifies the new duplicate trip and must contain the value for the corresponding TripUpdate.TripProperties.trip_id.
   * </pre>
   *
   * <code>optional string trip_id = 1;</code>
   * @return The tripId.
   */
  @java.lang.Override
  public java.lang.String getTripId() {
    java.lang.Object ref = tripId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        tripId_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * The trip_id from the GTFS feed that this selector refers to.
   * For non frequency-based trips, this field is enough to uniquely identify
   * the trip. For frequency-based trip, start_time and start_date might also be
   * necessary. When schedule_relationship is DUPLICATED within a TripUpdate, the trip_id identifies the trip from
   * static GTFS to be duplicated. When schedule_relationship is DUPLICATED within a VehiclePosition, the trip_id
   * identifies the new duplicate trip and must contain the value for the corresponding TripUpdate.TripProperties.trip_id.
   * </pre>
   *
   * <code>optional string trip_id = 1;</code>
   * @return The bytes for tripId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTripIdBytes() {
    java.lang.Object ref = tripId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      tripId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ROUTE_ID_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private volatile java.lang.Object routeId_ = "";
  /**
   * <pre>
   * The route_id from the GTFS that this selector refers to.
   * </pre>
   *
   * <code>optional string route_id = 5;</code>
   * @return Whether the routeId field is set.
   */
  @java.lang.Override
  public boolean hasRouteId() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The route_id from the GTFS that this selector refers to.
   * </pre>
   *
   * <code>optional string route_id = 5;</code>
   * @return The routeId.
   */
  @java.lang.Override
  public java.lang.String getRouteId() {
    java.lang.Object ref = routeId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        routeId_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * The route_id from the GTFS that this selector refers to.
   * </pre>
   *
   * <code>optional string route_id = 5;</code>
   * @return The bytes for routeId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getRouteIdBytes() {
    java.lang.Object ref = routeId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      routeId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DIRECTION_ID_FIELD_NUMBER = 6;
  private int directionId_ = 0;
  /**
   * <pre>
   * The direction_id from the GTFS feed trips.txt file, indicating the
   * direction of travel for trips this selector refers to.
   * </pre>
   *
   * <code>optional uint32 direction_id = 6;</code>
   * @return Whether the directionId field is set.
   */
  @java.lang.Override
  public boolean hasDirectionId() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The direction_id from the GTFS feed trips.txt file, indicating the
   * direction of travel for trips this selector refers to.
   * </pre>
   *
   * <code>optional uint32 direction_id = 6;</code>
   * @return The directionId.
   */
  @java.lang.Override
  public int getDirectionId() {
    return directionId_;
  }

  public static final int START_TIME_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object startTime_ = "";
  /**
   * <pre>
   * The initially scheduled start time of this trip instance.
   * When the trip_id corresponds to a non-frequency-based trip, this field
   * should either be omitted or be equal to the value in the GTFS feed. When
   * the trip_id correponds to a frequency-based trip, the start_time must be
   * specified for trip updates and vehicle positions. If the trip corresponds
   * to exact_times=1 GTFS record, then start_time must be some multiple
   * (including zero) of headway_secs later than frequencies.txt start_time for
   * the corresponding time period. If the trip corresponds to exact_times=0,
   * then its start_time may be arbitrary, and is initially expected to be the
   * first departure of the trip. Once established, the start_time of this
   * frequency-based trip should be considered immutable, even if the first
   * departure time changes -- that time change may instead be reflected in a
   * StopTimeUpdate.
   * Format and semantics of the field is same as that of
   * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
   * </pre>
   *
   * <code>optional string start_time = 2;</code>
   * @return Whether the startTime field is set.
   */
  @java.lang.Override
  public boolean hasStartTime() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * The initially scheduled start time of this trip instance.
   * When the trip_id corresponds to a non-frequency-based trip, this field
   * should either be omitted or be equal to the value in the GTFS feed. When
   * the trip_id correponds to a frequency-based trip, the start_time must be
   * specified for trip updates and vehicle positions. If the trip corresponds
   * to exact_times=1 GTFS record, then start_time must be some multiple
   * (including zero) of headway_secs later than frequencies.txt start_time for
   * the corresponding time period. If the trip corresponds to exact_times=0,
   * then its start_time may be arbitrary, and is initially expected to be the
   * first departure of the trip. Once established, the start_time of this
   * frequency-based trip should be considered immutable, even if the first
   * departure time changes -- that time change may instead be reflected in a
   * StopTimeUpdate.
   * Format and semantics of the field is same as that of
   * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
   * </pre>
   *
   * <code>optional string start_time = 2;</code>
   * @return The startTime.
   */
  @java.lang.Override
  public java.lang.String getStartTime() {
    java.lang.Object ref = startTime_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        startTime_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * The initially scheduled start time of this trip instance.
   * When the trip_id corresponds to a non-frequency-based trip, this field
   * should either be omitted or be equal to the value in the GTFS feed. When
   * the trip_id correponds to a frequency-based trip, the start_time must be
   * specified for trip updates and vehicle positions. If the trip corresponds
   * to exact_times=1 GTFS record, then start_time must be some multiple
   * (including zero) of headway_secs later than frequencies.txt start_time for
   * the corresponding time period. If the trip corresponds to exact_times=0,
   * then its start_time may be arbitrary, and is initially expected to be the
   * first departure of the trip. Once established, the start_time of this
   * frequency-based trip should be considered immutable, even if the first
   * departure time changes -- that time change may instead be reflected in a
   * StopTimeUpdate.
   * Format and semantics of the field is same as that of
   * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
   * </pre>
   *
   * <code>optional string start_time = 2;</code>
   * @return The bytes for startTime.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getStartTimeBytes() {
    java.lang.Object ref = startTime_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      startTime_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int START_DATE_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private volatile java.lang.Object startDate_ = "";
  /**
   * <pre>
   * The scheduled start date of this trip instance.
   * Must be provided to disambiguate trips that are so late as to collide with
   * a scheduled trip on a next day. For example, for a train that departs 8:00
   * and 20:00 every day, and is 12 hours late, there would be two distinct
   * trips on the same time.
   * This field can be provided but is not mandatory for schedules in which such
   * collisions are impossible - for example, a service running on hourly
   * schedule where a vehicle that is one hour late is not considered to be
   * related to schedule anymore.
   * In YYYYMMDD format.
   * </pre>
   *
   * <code>optional string start_date = 3;</code>
   * @return Whether the startDate field is set.
   */
  @java.lang.Override
  public boolean hasStartDate() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * The scheduled start date of this trip instance.
   * Must be provided to disambiguate trips that are so late as to collide with
   * a scheduled trip on a next day. For example, for a train that departs 8:00
   * and 20:00 every day, and is 12 hours late, there would be two distinct
   * trips on the same time.
   * This field can be provided but is not mandatory for schedules in which such
   * collisions are impossible - for example, a service running on hourly
   * schedule where a vehicle that is one hour late is not considered to be
   * related to schedule anymore.
   * In YYYYMMDD format.
   * </pre>
   *
   * <code>optional string start_date = 3;</code>
   * @return The startDate.
   */
  @java.lang.Override
  public java.lang.String getStartDate() {
    java.lang.Object ref = startDate_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        startDate_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * The scheduled start date of this trip instance.
   * Must be provided to disambiguate trips that are so late as to collide with
   * a scheduled trip on a next day. For example, for a train that departs 8:00
   * and 20:00 every day, and is 12 hours late, there would be two distinct
   * trips on the same time.
   * This field can be provided but is not mandatory for schedules in which such
   * collisions are impossible - for example, a service running on hourly
   * schedule where a vehicle that is one hour late is not considered to be
   * related to schedule anymore.
   * In YYYYMMDD format.
   * </pre>
   *
   * <code>optional string start_date = 3;</code>
   * @return The bytes for startDate.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getStartDateBytes() {
    java.lang.Object ref = startDate_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      startDate_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SCHEDULE_RELATIONSHIP_FIELD_NUMBER = 4;
  private int scheduleRelationship_ = 0;
  /**
   * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;</code>
   * @return Whether the scheduleRelationship field is set.
   */
  @java.lang.Override public boolean hasScheduleRelationship() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;</code>
   * @return The scheduleRelationship.
   */
  @java.lang.Override public com.google.transit.realtime.TripDescriptor.ScheduleRelationship getScheduleRelationship() {
    com.google.transit.realtime.TripDescriptor.ScheduleRelationship result = com.google.transit.realtime.TripDescriptor.ScheduleRelationship.forNumber(scheduleRelationship_);
    return result == null ? com.google.transit.realtime.TripDescriptor.ScheduleRelationship.SCHEDULED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!extensionsAreInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessageV3
      .ExtendableMessage<com.google.transit.realtime.TripDescriptor>.ExtensionWriter
        extensionWriter = newExtensionWriter();
    if (((bitField0_ & 0x00000001) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, tripId_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, startTime_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, startDate_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      output.writeEnum(4, scheduleRelationship_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, routeId_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeUInt32(6, directionId_);
    }
    extensionWriter.writeUntil(10000, output);
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, tripId_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, startTime_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, startDate_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, scheduleRelationship_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, routeId_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(6, directionId_);
    }
    size += extensionsSerializedSize();
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.transit.realtime.TripDescriptor)) {
      return super.equals(obj);
    }
    com.google.transit.realtime.TripDescriptor other = (com.google.transit.realtime.TripDescriptor) obj;

    if (hasTripId() != other.hasTripId()) return false;
    if (hasTripId()) {
      if (!getTripId()
          .equals(other.getTripId())) return false;
    }
    if (hasRouteId() != other.hasRouteId()) return false;
    if (hasRouteId()) {
      if (!getRouteId()
          .equals(other.getRouteId())) return false;
    }
    if (hasDirectionId() != other.hasDirectionId()) return false;
    if (hasDirectionId()) {
      if (getDirectionId()
          != other.getDirectionId()) return false;
    }
    if (hasStartTime() != other.hasStartTime()) return false;
    if (hasStartTime()) {
      if (!getStartTime()
          .equals(other.getStartTime())) return false;
    }
    if (hasStartDate() != other.hasStartDate()) return false;
    if (hasStartDate()) {
      if (!getStartDate()
          .equals(other.getStartDate())) return false;
    }
    if (hasScheduleRelationship() != other.hasScheduleRelationship()) return false;
    if (hasScheduleRelationship()) {
      if (scheduleRelationship_ != other.scheduleRelationship_) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    if (!getExtensionFields().equals(other.getExtensionFields()))
      return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasTripId()) {
      hash = (37 * hash) + TRIP_ID_FIELD_NUMBER;
      hash = (53 * hash) + getTripId().hashCode();
    }
    if (hasRouteId()) {
      hash = (37 * hash) + ROUTE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getRouteId().hashCode();
    }
    if (hasDirectionId()) {
      hash = (37 * hash) + DIRECTION_ID_FIELD_NUMBER;
      hash = (53 * hash) + getDirectionId();
    }
    if (hasStartTime()) {
      hash = (37 * hash) + START_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getStartTime().hashCode();
    }
    if (hasStartDate()) {
      hash = (37 * hash) + START_DATE_FIELD_NUMBER;
      hash = (53 * hash) + getStartDate().hashCode();
    }
    if (hasScheduleRelationship()) {
      hash = (37 * hash) + SCHEDULE_RELATIONSHIP_FIELD_NUMBER;
      hash = (53 * hash) + scheduleRelationship_;
    }
    hash = hashFields(hash, getExtensionFields());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.transit.realtime.TripDescriptor parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.transit.realtime.TripDescriptor parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.transit.realtime.TripDescriptor parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.transit.realtime.TripDescriptor parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.transit.realtime.TripDescriptor parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.transit.realtime.TripDescriptor parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.transit.realtime.TripDescriptor parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.transit.realtime.TripDescriptor parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.google.transit.realtime.TripDescriptor parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.transit.realtime.TripDescriptor parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.transit.realtime.TripDescriptor parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.transit.realtime.TripDescriptor parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.transit.realtime.TripDescriptor prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A descriptor that identifies an instance of a GTFS trip, or all instances of
   * a trip along a route.
   * - To specify a single trip instance, the trip_id (and if necessary,
   *   start_time) is set. If route_id is also set, then it should be same as one
   *   that the given trip corresponds to.
   * - To specify all the trips along a given route, only the route_id should be
   *   set. Note that if the trip_id is not known, then stop sequence ids in
   *   TripUpdate are not sufficient, and stop_ids must be provided as well. In
   *   addition, absolute arrival/departure times must be provided.
   * </pre>
   *
   * Protobuf type {@code transit_realtime.TripDescriptor}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<
        com.google.transit.realtime.TripDescriptor, Builder> implements
      // @@protoc_insertion_point(builder_implements:transit_realtime.TripDescriptor)
      com.google.transit.realtime.TripDescriptorOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripDescriptor_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.TripDescriptor.class, com.google.transit.realtime.TripDescriptor.Builder.class);
    }

    // Construct using com.google.transit.realtime.TripDescriptor.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      tripId_ = "";
      routeId_ = "";
      directionId_ = 0;
      startTime_ = "";
      startDate_ = "";
      scheduleRelationship_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripDescriptor_descriptor;
    }

    @java.lang.Override
    public com.google.transit.realtime.TripDescriptor getDefaultInstanceForType() {
      return com.google.transit.realtime.TripDescriptor.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.transit.realtime.TripDescriptor build() {
      com.google.transit.realtime.TripDescriptor result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.transit.realtime.TripDescriptor buildPartial() {
      com.google.transit.realtime.TripDescriptor result = new com.google.transit.realtime.TripDescriptor(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.transit.realtime.TripDescriptor result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.tripId_ = tripId_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.routeId_ = routeId_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.directionId_ = directionId_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.startTime_ = startTime_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.startDate_ = startDate_;
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.scheduleRelationship_ = scheduleRelationship_;
        to_bitField0_ |= 0x00000020;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public <Type> Builder setExtension(
        com.google.protobuf.GeneratedMessage.GeneratedExtension<
            com.google.transit.realtime.TripDescriptor, Type> extension,
        Type value) {
      return super.setExtension(extension, value);
    }
    @java.lang.Override
    public <Type> Builder setExtension(
        com.google.protobuf.GeneratedMessage.GeneratedExtension<
            com.google.transit.realtime.TripDescriptor, java.util.List<Type>> extension,
        int index, Type value) {
      return super.setExtension(extension, index, value);
    }
    @java.lang.Override
    public <Type> Builder addExtension(
        com.google.protobuf.GeneratedMessage.GeneratedExtension<
            com.google.transit.realtime.TripDescriptor, java.util.List<Type>> extension,
        Type value) {
      return super.addExtension(extension, value);
    }
    @java.lang.Override
    public <T> Builder clearExtension(
        com.google.protobuf.GeneratedMessage.GeneratedExtension<
            com.google.transit.realtime.TripDescriptor, T> extension) {
      return super.clearExtension(extension);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.transit.realtime.TripDescriptor) {
        return mergeFrom((com.google.transit.realtime.TripDescriptor)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.transit.realtime.TripDescriptor other) {
      if (other == com.google.transit.realtime.TripDescriptor.getDefaultInstance()) return this;
      if (other.hasTripId()) {
        tripId_ = other.tripId_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.hasRouteId()) {
        routeId_ = other.routeId_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.hasDirectionId()) {
        setDirectionId(other.getDirectionId());
      }
      if (other.hasStartTime()) {
        startTime_ = other.startTime_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      if (other.hasStartDate()) {
        startDate_ = other.startDate_;
        bitField0_ |= 0x00000010;
        onChanged();
      }
      if (other.hasScheduleRelationship()) {
        setScheduleRelationship(other.getScheduleRelationship());
      }
      this.mergeExtensionFields(other);
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      if (!extensionsAreInitialized()) {
        return false;
      }
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              tripId_ = input.readBytes();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              startTime_ = input.readBytes();
              bitField0_ |= 0x00000008;
              break;
            } // case 18
            case 26: {
              startDate_ = input.readBytes();
              bitField0_ |= 0x00000010;
              break;
            } // case 26
            case 32: {
              int tmpRaw = input.readEnum();
              com.google.transit.realtime.TripDescriptor.ScheduleRelationship tmpValue =
                  com.google.transit.realtime.TripDescriptor.ScheduleRelationship.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(4, tmpRaw);
              } else {
                scheduleRelationship_ = tmpRaw;
                bitField0_ |= 0x00000020;
              }
              break;
            } // case 32
            case 42: {
              routeId_ = input.readBytes();
              bitField0_ |= 0x00000002;
              break;
            } // case 42
            case 48: {
              directionId_ = input.readUInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 48
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object tripId_ = "";
    /**
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency-based trips, this field is enough to uniquely identify
     * the trip. For frequency-based trip, start_time and start_date might also be
     * necessary. When schedule_relationship is DUPLICATED within a TripUpdate, the trip_id identifies the trip from
     * static GTFS to be duplicated. When schedule_relationship is DUPLICATED within a VehiclePosition, the trip_id
     * identifies the new duplicate trip and must contain the value for the corresponding TripUpdate.TripProperties.trip_id.
     * </pre>
     *
     * <code>optional string trip_id = 1;</code>
     * @return Whether the tripId field is set.
     */
    public boolean hasTripId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency-based trips, this field is enough to uniquely identify
     * the trip. For frequency-based trip, start_time and start_date might also be
     * necessary. When schedule_relationship is DUPLICATED within a TripUpdate, the trip_id identifies the trip from
     * static GTFS to be duplicated. When schedule_relationship is DUPLICATED within a VehiclePosition, the trip_id
     * identifies the new duplicate trip and must contain the value for the corresponding TripUpdate.TripProperties.trip_id.
     * </pre>
     *
     * <code>optional string trip_id = 1;</code>
     * @return The tripId.
     */
    public java.lang.String getTripId() {
      java.lang.Object ref = tripId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          tripId_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency-based trips, this field is enough to uniquely identify
     * the trip. For frequency-based trip, start_time and start_date might also be
     * necessary. When schedule_relationship is DUPLICATED within a TripUpdate, the trip_id identifies the trip from
     * static GTFS to be duplicated. When schedule_relationship is DUPLICATED within a VehiclePosition, the trip_id
     * identifies the new duplicate trip and must contain the value for the corresponding TripUpdate.TripProperties.trip_id.
     * </pre>
     *
     * <code>optional string trip_id = 1;</code>
     * @return The bytes for tripId.
     */
    public com.google.protobuf.ByteString
        getTripIdBytes() {
      java.lang.Object ref = tripId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tripId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency-based trips, this field is enough to uniquely identify
     * the trip. For frequency-based trip, start_time and start_date might also be
     * necessary. When schedule_relationship is DUPLICATED within a TripUpdate, the trip_id identifies the trip from
     * static GTFS to be duplicated. When schedule_relationship is DUPLICATED within a VehiclePosition, the trip_id
     * identifies the new duplicate trip and must contain the value for the corresponding TripUpdate.TripProperties.trip_id.
     * </pre>
     *
     * <code>optional string trip_id = 1;</code>
     * @param value The tripId to set.
     * @return This builder for chaining.
     */
    public Builder setTripId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      tripId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency-based trips, this field is enough to uniquely identify
     * the trip. For frequency-based trip, start_time and start_date might also be
     * necessary. When schedule_relationship is DUPLICATED within a TripUpdate, the trip_id identifies the trip from
     * static GTFS to be duplicated. When schedule_relationship is DUPLICATED within a VehiclePosition, the trip_id
     * identifies the new duplicate trip and must contain the value for the corresponding TripUpdate.TripProperties.trip_id.
     * </pre>
     *
     * <code>optional string trip_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearTripId() {
      tripId_ = getDefaultInstance().getTripId();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency-based trips, this field is enough to uniquely identify
     * the trip. For frequency-based trip, start_time and start_date might also be
     * necessary. When schedule_relationship is DUPLICATED within a TripUpdate, the trip_id identifies the trip from
     * static GTFS to be duplicated. When schedule_relationship is DUPLICATED within a VehiclePosition, the trip_id
     * identifies the new duplicate trip and must contain the value for the corresponding TripUpdate.TripProperties.trip_id.
     * </pre>
     *
     * <code>optional string trip_id = 1;</code>
     * @param value The bytes for tripId to set.
     * @return This builder for chaining.
     */
    public Builder setTripIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      tripId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.lang.Object routeId_ = "";
    /**
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     *
     * <code>optional string route_id = 5;</code>
     * @return Whether the routeId field is set.
     */
    public boolean hasRouteId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     *
     * <code>optional string route_id = 5;</code>
     * @return The routeId.
     */
    public java.lang.String getRouteId() {
      java.lang.Object ref = routeId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          routeId_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     *
     * <code>optional string route_id = 5;</code>
     * @return The bytes for routeId.
     */
    public com.google.protobuf.ByteString
        getRouteIdBytes() {
      java.lang.Object ref = routeId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        routeId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     *
     * <code>optional string route_id = 5;</code>
     * @param value The routeId to set.
     * @return This builder for chaining.
     */
    public Builder setRouteId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      routeId_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     *
     * <code>optional string route_id = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearRouteId() {
      routeId_ = getDefaultInstance().getRouteId();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     *
     * <code>optional string route_id = 5;</code>
     * @param value The bytes for routeId to set.
     * @return This builder for chaining.
     */
    public Builder setRouteIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      routeId_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private int directionId_ ;
    /**
     * <pre>
     * The direction_id from the GTFS feed trips.txt file, indicating the
     * direction of travel for trips this selector refers to.
     * </pre>
     *
     * <code>optional uint32 direction_id = 6;</code>
     * @return Whether the directionId field is set.
     */
    @java.lang.Override
    public boolean hasDirectionId() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The direction_id from the GTFS feed trips.txt file, indicating the
     * direction of travel for trips this selector refers to.
     * </pre>
     *
     * <code>optional uint32 direction_id = 6;</code>
     * @return The directionId.
     */
    @java.lang.Override
    public int getDirectionId() {
      return directionId_;
    }
    /**
     * <pre>
     * The direction_id from the GTFS feed trips.txt file, indicating the
     * direction of travel for trips this selector refers to.
     * </pre>
     *
     * <code>optional uint32 direction_id = 6;</code>
     * @param value The directionId to set.
     * @return This builder for chaining.
     */
    public Builder setDirectionId(int value) {

      directionId_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The direction_id from the GTFS feed trips.txt file, indicating the
     * direction of travel for trips this selector refers to.
     * </pre>
     *
     * <code>optional uint32 direction_id = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearDirectionId() {
      bitField0_ = (bitField0_ & ~0x00000004);
      directionId_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object startTime_ = "";
    /**
     * <pre>
     * The initially scheduled start time of this trip instance.
     * When the trip_id corresponds to a non-frequency-based trip, this field
     * should either be omitted or be equal to the value in the GTFS feed. When
     * the trip_id correponds to a frequency-based trip, the start_time must be
     * specified for trip updates and vehicle positions. If the trip corresponds
     * to exact_times=1 GTFS record, then start_time must be some multiple
     * (including zero) of headway_secs later than frequencies.txt start_time for
     * the corresponding time period. If the trip corresponds to exact_times=0,
     * then its start_time may be arbitrary, and is initially expected to be the
     * first departure of the trip. Once established, the start_time of this
     * frequency-based trip should be considered immutable, even if the first
     * departure time changes -- that time change may instead be reflected in a
     * StopTimeUpdate.
     * Format and semantics of the field is same as that of
     * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
     * </pre>
     *
     * <code>optional string start_time = 2;</code>
     * @return Whether the startTime field is set.
     */
    public boolean hasStartTime() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The initially scheduled start time of this trip instance.
     * When the trip_id corresponds to a non-frequency-based trip, this field
     * should either be omitted or be equal to the value in the GTFS feed. When
     * the trip_id correponds to a frequency-based trip, the start_time must be
     * specified for trip updates and vehicle positions. If the trip corresponds
     * to exact_times=1 GTFS record, then start_time must be some multiple
     * (including zero) of headway_secs later than frequencies.txt start_time for
     * the corresponding time period. If the trip corresponds to exact_times=0,
     * then its start_time may be arbitrary, and is initially expected to be the
     * first departure of the trip. Once established, the start_time of this
     * frequency-based trip should be considered immutable, even if the first
     * departure time changes -- that time change may instead be reflected in a
     * StopTimeUpdate.
     * Format and semantics of the field is same as that of
     * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
     * </pre>
     *
     * <code>optional string start_time = 2;</code>
     * @return The startTime.
     */
    public java.lang.String getStartTime() {
      java.lang.Object ref = startTime_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          startTime_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The initially scheduled start time of this trip instance.
     * When the trip_id corresponds to a non-frequency-based trip, this field
     * should either be omitted or be equal to the value in the GTFS feed. When
     * the trip_id correponds to a frequency-based trip, the start_time must be
     * specified for trip updates and vehicle positions. If the trip corresponds
     * to exact_times=1 GTFS record, then start_time must be some multiple
     * (including zero) of headway_secs later than frequencies.txt start_time for
     * the corresponding time period. If the trip corresponds to exact_times=0,
     * then its start_time may be arbitrary, and is initially expected to be the
     * first departure of the trip. Once established, the start_time of this
     * frequency-based trip should be considered immutable, even if the first
     * departure time changes -- that time change may instead be reflected in a
     * StopTimeUpdate.
     * Format and semantics of the field is same as that of
     * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
     * </pre>
     *
     * <code>optional string start_time = 2;</code>
     * @return The bytes for startTime.
     */
    public com.google.protobuf.ByteString
        getStartTimeBytes() {
      java.lang.Object ref = startTime_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        startTime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The initially scheduled start time of this trip instance.
     * When the trip_id corresponds to a non-frequency-based trip, this field
     * should either be omitted or be equal to the value in the GTFS feed. When
     * the trip_id correponds to a frequency-based trip, the start_time must be
     * specified for trip updates and vehicle positions. If the trip corresponds
     * to exact_times=1 GTFS record, then start_time must be some multiple
     * (including zero) of headway_secs later than frequencies.txt start_time for
     * the corresponding time period. If the trip corresponds to exact_times=0,
     * then its start_time may be arbitrary, and is initially expected to be the
     * first departure of the trip. Once established, the start_time of this
     * frequency-based trip should be considered immutable, even if the first
     * departure time changes -- that time change may instead be reflected in a
     * StopTimeUpdate.
     * Format and semantics of the field is same as that of
     * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
     * </pre>
     *
     * <code>optional string start_time = 2;</code>
     * @param value The startTime to set.
     * @return This builder for chaining.
     */
    public Builder setStartTime(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      startTime_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The initially scheduled start time of this trip instance.
     * When the trip_id corresponds to a non-frequency-based trip, this field
     * should either be omitted or be equal to the value in the GTFS feed. When
     * the trip_id correponds to a frequency-based trip, the start_time must be
     * specified for trip updates and vehicle positions. If the trip corresponds
     * to exact_times=1 GTFS record, then start_time must be some multiple
     * (including zero) of headway_secs later than frequencies.txt start_time for
     * the corresponding time period. If the trip corresponds to exact_times=0,
     * then its start_time may be arbitrary, and is initially expected to be the
     * first departure of the trip. Once established, the start_time of this
     * frequency-based trip should be considered immutable, even if the first
     * departure time changes -- that time change may instead be reflected in a
     * StopTimeUpdate.
     * Format and semantics of the field is same as that of
     * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
     * </pre>
     *
     * <code>optional string start_time = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearStartTime() {
      startTime_ = getDefaultInstance().getStartTime();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The initially scheduled start time of this trip instance.
     * When the trip_id corresponds to a non-frequency-based trip, this field
     * should either be omitted or be equal to the value in the GTFS feed. When
     * the trip_id correponds to a frequency-based trip, the start_time must be
     * specified for trip updates and vehicle positions. If the trip corresponds
     * to exact_times=1 GTFS record, then start_time must be some multiple
     * (including zero) of headway_secs later than frequencies.txt start_time for
     * the corresponding time period. If the trip corresponds to exact_times=0,
     * then its start_time may be arbitrary, and is initially expected to be the
     * first departure of the trip. Once established, the start_time of this
     * frequency-based trip should be considered immutable, even if the first
     * departure time changes -- that time change may instead be reflected in a
     * StopTimeUpdate.
     * Format and semantics of the field is same as that of
     * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
     * </pre>
     *
     * <code>optional string start_time = 2;</code>
     * @param value The bytes for startTime to set.
     * @return This builder for chaining.
     */
    public Builder setStartTimeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      startTime_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    private java.lang.Object startDate_ = "";
    /**
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     *
     * <code>optional string start_date = 3;</code>
     * @return Whether the startDate field is set.
     */
    public boolean hasStartDate() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     *
     * <code>optional string start_date = 3;</code>
     * @return The startDate.
     */
    public java.lang.String getStartDate() {
      java.lang.Object ref = startDate_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          startDate_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     *
     * <code>optional string start_date = 3;</code>
     * @return The bytes for startDate.
     */
    public com.google.protobuf.ByteString
        getStartDateBytes() {
      java.lang.Object ref = startDate_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        startDate_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     *
     * <code>optional string start_date = 3;</code>
     * @param value The startDate to set.
     * @return This builder for chaining.
     */
    public Builder setStartDate(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      startDate_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     *
     * <code>optional string start_date = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearStartDate() {
      startDate_ = getDefaultInstance().getStartDate();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     *
     * <code>optional string start_date = 3;</code>
     * @param value The bytes for startDate to set.
     * @return This builder for chaining.
     */
    public Builder setStartDateBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      startDate_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    private int scheduleRelationship_ = 0;
    /**
     * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;</code>
     * @return Whether the scheduleRelationship field is set.
     */
    @java.lang.Override public boolean hasScheduleRelationship() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;</code>
     * @return The scheduleRelationship.
     */
    @java.lang.Override
    public com.google.transit.realtime.TripDescriptor.ScheduleRelationship getScheduleRelationship() {
      com.google.transit.realtime.TripDescriptor.ScheduleRelationship result = com.google.transit.realtime.TripDescriptor.ScheduleRelationship.forNumber(scheduleRelationship_);
      return result == null ? com.google.transit.realtime.TripDescriptor.ScheduleRelationship.SCHEDULED : result;
    }
    /**
     * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;</code>
     * @param value The scheduleRelationship to set.
     * @return This builder for chaining.
     */
    public Builder setScheduleRelationship(com.google.transit.realtime.TripDescriptor.ScheduleRelationship value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000020;
      scheduleRelationship_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearScheduleRelationship() {
      bitField0_ = (bitField0_ & ~0x00000020);
      scheduleRelationship_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:transit_realtime.TripDescriptor)
  }

  // @@protoc_insertion_point(class_scope:transit_realtime.TripDescriptor)
  private static final com.google.transit.realtime.TripDescriptor DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.transit.realtime.TripDescriptor();
  }

  public static com.google.transit.realtime.TripDescriptor getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<TripDescriptor>
      PARSER = new com.google.protobuf.AbstractParser<TripDescriptor>() {
    @java.lang.Override
    public TripDescriptor parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<TripDescriptor> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TripDescriptor> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.transit.realtime.TripDescriptor getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

