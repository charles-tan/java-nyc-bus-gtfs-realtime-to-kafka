// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main/resources/gtfs-realtime.proto

package com.google.transit.realtime;

/**
 * <pre>
 * Realtime update of the progress of a vehicle along a trip.
 * Depending on the value of ScheduleRelationship, a TripUpdate can specify:
 * - A trip that proceeds along the schedule.
 * - A trip that proceeds along a route but has no fixed schedule.
 * - A trip that have been added or removed with regard to schedule.
 *
 * The updates can be for future, predicted arrival/departure events, or for
 * past events that already occurred.
 * Normally, updates should get more precise and more certain (see
 * uncertainty below) as the events gets closer to current time.
 * Even if that is not possible, the information for past events should be
 * precise and certain. In particular, if an update points to time in the past
 * but its update's uncertainty is not 0, the client should conclude that the
 * update is a (wrong) prediction and that the trip has not completed yet.
 *
 * Note that the update can describe a trip that is already completed.
 * To this end, it is enough to provide an update for the last stop of the trip.
 * If the time of that is in the past, the client will conclude from that that
 * the whole trip is in the past (it is possible, although inconsequential, to
 * also provide updates for preceding stops).
 * This option is most relevant for a trip that has completed ahead of schedule,
 * but according to the schedule, the trip is still proceeding at the current
 * time. Removing the updates for this trip could make the client assume
 * that the trip is still proceeding.
 * Note that the feed provider is allowed, but not required, to purge past
 * updates - this is one case where this would be practically useful.
 * </pre>
 *
 * Protobuf type {@code transit_realtime.TripUpdate}
 */
public final class TripUpdate extends
    com.google.protobuf.GeneratedMessageV3.ExtendableMessage<
      TripUpdate> implements
    // @@protoc_insertion_point(message_implements:transit_realtime.TripUpdate)
    TripUpdateOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TripUpdate.newBuilder() to construct.
  private TripUpdate(com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<com.google.transit.realtime.TripUpdate, ?> builder) {
    super(builder);
  }
  private TripUpdate() {
    stopTimeUpdate_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new TripUpdate();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.transit.realtime.TripUpdate.class, com.google.transit.realtime.TripUpdate.Builder.class);
  }

  public interface StopTimeEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.TripUpdate.StopTimeEvent)
      com.google.protobuf.GeneratedMessageV3.
          ExtendableMessageOrBuilder<StopTimeEvent> {

    /**
     * <pre>
     * Delay (in seconds) can be positive (meaning that the vehicle is late) or
     * negative (meaning that the vehicle is ahead of schedule). Delay of 0
     * means that the vehicle is exactly on time.
     * </pre>
     *
     * <code>optional int32 delay = 1;</code>
     * @return Whether the delay field is set.
     */
    boolean hasDelay();
    /**
     * <pre>
     * Delay (in seconds) can be positive (meaning that the vehicle is late) or
     * negative (meaning that the vehicle is ahead of schedule). Delay of 0
     * means that the vehicle is exactly on time.
     * </pre>
     *
     * <code>optional int32 delay = 1;</code>
     * @return The delay.
     */
    int getDelay();

    /**
     * <pre>
     * Event as absolute time.
     * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
     * UTC).
     * </pre>
     *
     * <code>optional int64 time = 2;</code>
     * @return Whether the time field is set.
     */
    boolean hasTime();
    /**
     * <pre>
     * Event as absolute time.
     * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
     * UTC).
     * </pre>
     *
     * <code>optional int64 time = 2;</code>
     * @return The time.
     */
    long getTime();

    /**
     * <pre>
     * If uncertainty is omitted, it is interpreted as unknown.
     * If the prediction is unknown or too uncertain, the delay (or time) field
     * should be empty. In such case, the uncertainty field is ignored.
     * To specify a completely certain prediction, set its uncertainty to 0.
     * </pre>
     *
     * <code>optional int32 uncertainty = 3;</code>
     * @return Whether the uncertainty field is set.
     */
    boolean hasUncertainty();
    /**
     * <pre>
     * If uncertainty is omitted, it is interpreted as unknown.
     * If the prediction is unknown or too uncertain, the delay (or time) field
     * should be empty. In such case, the uncertainty field is ignored.
     * To specify a completely certain prediction, set its uncertainty to 0.
     * </pre>
     *
     * <code>optional int32 uncertainty = 3;</code>
     * @return The uncertainty.
     */
    int getUncertainty();
  }
  /**
   * <pre>
   * Timing information for a single predicted event (either arrival or
   * departure).
   * Timing consists of delay and/or estimated time, and uncertainty.
   * - delay should be used when the prediction is given relative to some
   *   existing schedule in GTFS.
   * - time should be given whether there is a predicted schedule or not. If
   *   both time and delay are specified, time will take precedence
   *   (although normally, time, if given for a scheduled trip, should be
   *   equal to scheduled time in GTFS + delay).
   *
   * Uncertainty applies equally to both time and delay.
   * The uncertainty roughly specifies the expected error in true delay (but
   * note, we don't yet define its precise statistical meaning). It's possible
   * for the uncertainty to be 0, for example for trains that are driven under
   * computer timing control.
   * </pre>
   *
   * Protobuf type {@code transit_realtime.TripUpdate.StopTimeEvent}
   */
  public static final class StopTimeEvent extends
      com.google.protobuf.GeneratedMessageV3.ExtendableMessage<
        StopTimeEvent> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.TripUpdate.StopTimeEvent)
      StopTimeEventOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StopTimeEvent.newBuilder() to construct.
    private StopTimeEvent(com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<com.google.transit.realtime.TripUpdate.StopTimeEvent, ?> builder) {
      super(builder);
    }
    private StopTimeEvent() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StopTimeEvent();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeEvent_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.TripUpdate.StopTimeEvent.class, com.google.transit.realtime.TripUpdate.StopTimeEvent.Builder.class);
    }

    private int bitField0_;
    public static final int DELAY_FIELD_NUMBER = 1;
    private int delay_ = 0;
    /**
     * <pre>
     * Delay (in seconds) can be positive (meaning that the vehicle is late) or
     * negative (meaning that the vehicle is ahead of schedule). Delay of 0
     * means that the vehicle is exactly on time.
     * </pre>
     *
     * <code>optional int32 delay = 1;</code>
     * @return Whether the delay field is set.
     */
    @java.lang.Override
    public boolean hasDelay() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Delay (in seconds) can be positive (meaning that the vehicle is late) or
     * negative (meaning that the vehicle is ahead of schedule). Delay of 0
     * means that the vehicle is exactly on time.
     * </pre>
     *
     * <code>optional int32 delay = 1;</code>
     * @return The delay.
     */
    @java.lang.Override
    public int getDelay() {
      return delay_;
    }

    public static final int TIME_FIELD_NUMBER = 2;
    private long time_ = 0L;
    /**
     * <pre>
     * Event as absolute time.
     * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
     * UTC).
     * </pre>
     *
     * <code>optional int64 time = 2;</code>
     * @return Whether the time field is set.
     */
    @java.lang.Override
    public boolean hasTime() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Event as absolute time.
     * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
     * UTC).
     * </pre>
     *
     * <code>optional int64 time = 2;</code>
     * @return The time.
     */
    @java.lang.Override
    public long getTime() {
      return time_;
    }

    public static final int UNCERTAINTY_FIELD_NUMBER = 3;
    private int uncertainty_ = 0;
    /**
     * <pre>
     * If uncertainty is omitted, it is interpreted as unknown.
     * If the prediction is unknown or too uncertain, the delay (or time) field
     * should be empty. In such case, the uncertainty field is ignored.
     * To specify a completely certain prediction, set its uncertainty to 0.
     * </pre>
     *
     * <code>optional int32 uncertainty = 3;</code>
     * @return Whether the uncertainty field is set.
     */
    @java.lang.Override
    public boolean hasUncertainty() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * If uncertainty is omitted, it is interpreted as unknown.
     * If the prediction is unknown or too uncertain, the delay (or time) field
     * should be empty. In such case, the uncertainty field is ignored.
     * To specify a completely certain prediction, set its uncertainty to 0.
     * </pre>
     *
     * <code>optional int32 uncertainty = 3;</code>
     * @return The uncertainty.
     */
    @java.lang.Override
    public int getUncertainty() {
      return uncertainty_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .ExtendableMessage<com.google.transit.realtime.TripUpdate.StopTimeEvent>.ExtensionWriter
          extensionWriter = newExtensionWriter();
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, delay_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt64(2, time_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeInt32(3, uncertainty_);
      }
      extensionWriter.writeUntil(10000, output);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, delay_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, time_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, uncertainty_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.transit.realtime.TripUpdate.StopTimeEvent)) {
        return super.equals(obj);
      }
      com.google.transit.realtime.TripUpdate.StopTimeEvent other = (com.google.transit.realtime.TripUpdate.StopTimeEvent) obj;

      if (hasDelay() != other.hasDelay()) return false;
      if (hasDelay()) {
        if (getDelay()
            != other.getDelay()) return false;
      }
      if (hasTime() != other.hasTime()) return false;
      if (hasTime()) {
        if (getTime()
            != other.getTime()) return false;
      }
      if (hasUncertainty() != other.hasUncertainty()) return false;
      if (hasUncertainty()) {
        if (getUncertainty()
            != other.getUncertainty()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      if (!getExtensionFields().equals(other.getExtensionFields()))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDelay()) {
        hash = (37 * hash) + DELAY_FIELD_NUMBER;
        hash = (53 * hash) + getDelay();
      }
      if (hasTime()) {
        hash = (37 * hash) + TIME_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTime());
      }
      if (hasUncertainty()) {
        hash = (37 * hash) + UNCERTAINTY_FIELD_NUMBER;
        hash = (53 * hash) + getUncertainty();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.transit.realtime.TripUpdate.StopTimeEvent parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeEvent parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.google.transit.realtime.TripUpdate.StopTimeEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.transit.realtime.TripUpdate.StopTimeEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.transit.realtime.TripUpdate.StopTimeEvent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Timing information for a single predicted event (either arrival or
     * departure).
     * Timing consists of delay and/or estimated time, and uncertainty.
     * - delay should be used when the prediction is given relative to some
     *   existing schedule in GTFS.
     * - time should be given whether there is a predicted schedule or not. If
     *   both time and delay are specified, time will take precedence
     *   (although normally, time, if given for a scheduled trip, should be
     *   equal to scheduled time in GTFS + delay).
     *
     * Uncertainty applies equally to both time and delay.
     * The uncertainty roughly specifies the expected error in true delay (but
     * note, we don't yet define its precise statistical meaning). It's possible
     * for the uncertainty to be 0, for example for trains that are driven under
     * computer timing control.
     * </pre>
     *
     * Protobuf type {@code transit_realtime.TripUpdate.StopTimeEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<
          com.google.transit.realtime.TripUpdate.StopTimeEvent, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.TripUpdate.StopTimeEvent)
        com.google.transit.realtime.TripUpdate.StopTimeEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeEvent_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.TripUpdate.StopTimeEvent.class, com.google.transit.realtime.TripUpdate.StopTimeEvent.Builder.class);
      }

      // Construct using com.google.transit.realtime.TripUpdate.StopTimeEvent.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        delay_ = 0;
        time_ = 0L;
        uncertainty_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeEvent_descriptor;
      }

      @java.lang.Override
      public com.google.transit.realtime.TripUpdate.StopTimeEvent getDefaultInstanceForType() {
        return com.google.transit.realtime.TripUpdate.StopTimeEvent.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.transit.realtime.TripUpdate.StopTimeEvent build() {
        com.google.transit.realtime.TripUpdate.StopTimeEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.transit.realtime.TripUpdate.StopTimeEvent buildPartial() {
        com.google.transit.realtime.TripUpdate.StopTimeEvent result = new com.google.transit.realtime.TripUpdate.StopTimeEvent(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.transit.realtime.TripUpdate.StopTimeEvent result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.delay_ = delay_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.time_ = time_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.uncertainty_ = uncertainty_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public <Type> Builder setExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              com.google.transit.realtime.TripUpdate.StopTimeEvent, Type> extension,
          Type value) {
        return super.setExtension(extension, value);
      }
      @java.lang.Override
      public <Type> Builder setExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              com.google.transit.realtime.TripUpdate.StopTimeEvent, java.util.List<Type>> extension,
          int index, Type value) {
        return super.setExtension(extension, index, value);
      }
      @java.lang.Override
      public <Type> Builder addExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              com.google.transit.realtime.TripUpdate.StopTimeEvent, java.util.List<Type>> extension,
          Type value) {
        return super.addExtension(extension, value);
      }
      @java.lang.Override
      public <T> Builder clearExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              com.google.transit.realtime.TripUpdate.StopTimeEvent, T> extension) {
        return super.clearExtension(extension);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.TripUpdate.StopTimeEvent) {
          return mergeFrom((com.google.transit.realtime.TripUpdate.StopTimeEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.TripUpdate.StopTimeEvent other) {
        if (other == com.google.transit.realtime.TripUpdate.StopTimeEvent.getDefaultInstance()) return this;
        if (other.hasDelay()) {
          setDelay(other.getDelay());
        }
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        if (other.hasUncertainty()) {
          setUncertainty(other.getUncertainty());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                delay_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                time_ = input.readInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                uncertainty_ = input.readInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int delay_ ;
      /**
       * <pre>
       * Delay (in seconds) can be positive (meaning that the vehicle is late) or
       * negative (meaning that the vehicle is ahead of schedule). Delay of 0
       * means that the vehicle is exactly on time.
       * </pre>
       *
       * <code>optional int32 delay = 1;</code>
       * @return Whether the delay field is set.
       */
      @java.lang.Override
      public boolean hasDelay() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Delay (in seconds) can be positive (meaning that the vehicle is late) or
       * negative (meaning that the vehicle is ahead of schedule). Delay of 0
       * means that the vehicle is exactly on time.
       * </pre>
       *
       * <code>optional int32 delay = 1;</code>
       * @return The delay.
       */
      @java.lang.Override
      public int getDelay() {
        return delay_;
      }
      /**
       * <pre>
       * Delay (in seconds) can be positive (meaning that the vehicle is late) or
       * negative (meaning that the vehicle is ahead of schedule). Delay of 0
       * means that the vehicle is exactly on time.
       * </pre>
       *
       * <code>optional int32 delay = 1;</code>
       * @param value The delay to set.
       * @return This builder for chaining.
       */
      public Builder setDelay(int value) {

        delay_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Delay (in seconds) can be positive (meaning that the vehicle is late) or
       * negative (meaning that the vehicle is ahead of schedule). Delay of 0
       * means that the vehicle is exactly on time.
       * </pre>
       *
       * <code>optional int32 delay = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDelay() {
        bitField0_ = (bitField0_ & ~0x00000001);
        delay_ = 0;
        onChanged();
        return this;
      }

      private long time_ ;
      /**
       * <pre>
       * Event as absolute time.
       * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
       * UTC).
       * </pre>
       *
       * <code>optional int64 time = 2;</code>
       * @return Whether the time field is set.
       */
      @java.lang.Override
      public boolean hasTime() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Event as absolute time.
       * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
       * UTC).
       * </pre>
       *
       * <code>optional int64 time = 2;</code>
       * @return The time.
       */
      @java.lang.Override
      public long getTime() {
        return time_;
      }
      /**
       * <pre>
       * Event as absolute time.
       * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
       * UTC).
       * </pre>
       *
       * <code>optional int64 time = 2;</code>
       * @param value The time to set.
       * @return This builder for chaining.
       */
      public Builder setTime(long value) {

        time_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Event as absolute time.
       * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
       * UTC).
       * </pre>
       *
       * <code>optional int64 time = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        time_ = 0L;
        onChanged();
        return this;
      }

      private int uncertainty_ ;
      /**
       * <pre>
       * If uncertainty is omitted, it is interpreted as unknown.
       * If the prediction is unknown or too uncertain, the delay (or time) field
       * should be empty. In such case, the uncertainty field is ignored.
       * To specify a completely certain prediction, set its uncertainty to 0.
       * </pre>
       *
       * <code>optional int32 uncertainty = 3;</code>
       * @return Whether the uncertainty field is set.
       */
      @java.lang.Override
      public boolean hasUncertainty() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * If uncertainty is omitted, it is interpreted as unknown.
       * If the prediction is unknown or too uncertain, the delay (or time) field
       * should be empty. In such case, the uncertainty field is ignored.
       * To specify a completely certain prediction, set its uncertainty to 0.
       * </pre>
       *
       * <code>optional int32 uncertainty = 3;</code>
       * @return The uncertainty.
       */
      @java.lang.Override
      public int getUncertainty() {
        return uncertainty_;
      }
      /**
       * <pre>
       * If uncertainty is omitted, it is interpreted as unknown.
       * If the prediction is unknown or too uncertain, the delay (or time) field
       * should be empty. In such case, the uncertainty field is ignored.
       * To specify a completely certain prediction, set its uncertainty to 0.
       * </pre>
       *
       * <code>optional int32 uncertainty = 3;</code>
       * @param value The uncertainty to set.
       * @return This builder for chaining.
       */
      public Builder setUncertainty(int value) {

        uncertainty_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If uncertainty is omitted, it is interpreted as unknown.
       * If the prediction is unknown or too uncertain, the delay (or time) field
       * should be empty. In such case, the uncertainty field is ignored.
       * To specify a completely certain prediction, set its uncertainty to 0.
       * </pre>
       *
       * <code>optional int32 uncertainty = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearUncertainty() {
        bitField0_ = (bitField0_ & ~0x00000004);
        uncertainty_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:transit_realtime.TripUpdate.StopTimeEvent)
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate.StopTimeEvent)
    private static final com.google.transit.realtime.TripUpdate.StopTimeEvent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.transit.realtime.TripUpdate.StopTimeEvent();
    }

    public static com.google.transit.realtime.TripUpdate.StopTimeEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<StopTimeEvent>
        PARSER = new com.google.protobuf.AbstractParser<StopTimeEvent>() {
      @java.lang.Override
      public StopTimeEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<StopTimeEvent> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StopTimeEvent> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.transit.realtime.TripUpdate.StopTimeEvent getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StopTimeUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.TripUpdate.StopTimeUpdate)
      com.google.protobuf.GeneratedMessageV3.
          ExtendableMessageOrBuilder<StopTimeUpdate> {

    /**
     * <pre>
     * Must be the same as in stop_times.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional uint32 stop_sequence = 1;</code>
     * @return Whether the stopSequence field is set.
     */
    boolean hasStopSequence();
    /**
     * <pre>
     * Must be the same as in stop_times.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional uint32 stop_sequence = 1;</code>
     * @return The stopSequence.
     */
    int getStopSequence();

    /**
     * <pre>
     * Must be the same as in stops.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 4;</code>
     * @return Whether the stopId field is set.
     */
    boolean hasStopId();
    /**
     * <pre>
     * Must be the same as in stops.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 4;</code>
     * @return The stopId.
     */
    java.lang.String getStopId();
    /**
     * <pre>
     * Must be the same as in stops.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 4;</code>
     * @return The bytes for stopId.
     */
    com.google.protobuf.ByteString
        getStopIdBytes();

    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
     * @return Whether the arrival field is set.
     */
    boolean hasArrival();
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
     * @return The arrival.
     */
    com.google.transit.realtime.TripUpdate.StopTimeEvent getArrival();
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
     */
    com.google.transit.realtime.TripUpdate.StopTimeEventOrBuilder getArrivalOrBuilder();

    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
     * @return Whether the departure field is set.
     */
    boolean hasDeparture();
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
     * @return The departure.
     */
    com.google.transit.realtime.TripUpdate.StopTimeEvent getDeparture();
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
     */
    com.google.transit.realtime.TripUpdate.StopTimeEventOrBuilder getDepartureOrBuilder();

    /**
     * <pre>
     * Expected occupancy after departure from the given stop.
     * Should be provided only for future stops.
     * In order to provide departure_occupancy_status without either arrival or
     * departure StopTimeEvents, ScheduleRelationship should be set to NO_DATA. 
     * </pre>
     *
     * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus departure_occupancy_status = 7;</code>
     * @return Whether the departureOccupancyStatus field is set.
     */
    boolean hasDepartureOccupancyStatus();
    /**
     * <pre>
     * Expected occupancy after departure from the given stop.
     * Should be provided only for future stops.
     * In order to provide departure_occupancy_status without either arrival or
     * departure StopTimeEvents, ScheduleRelationship should be set to NO_DATA. 
     * </pre>
     *
     * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus departure_occupancy_status = 7;</code>
     * @return The departureOccupancyStatus.
     */
    com.google.transit.realtime.VehiclePosition.OccupancyStatus getDepartureOccupancyStatus();

    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
     * @return Whether the scheduleRelationship field is set.
     */
    boolean hasScheduleRelationship();
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
     * @return The scheduleRelationship.
     */
    com.google.transit.realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship getScheduleRelationship();

    /**
     * <pre>
     * Realtime updates for certain properties defined within GTFS stop_times.txt
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;</code>
     * @return Whether the stopTimeProperties field is set.
     */
    boolean hasStopTimeProperties();
    /**
     * <pre>
     * Realtime updates for certain properties defined within GTFS stop_times.txt
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;</code>
     * @return The stopTimeProperties.
     */
    com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties getStopTimeProperties();
    /**
     * <pre>
     * Realtime updates for certain properties defined within GTFS stop_times.txt
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;</code>
     */
    com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimePropertiesOrBuilder getStopTimePropertiesOrBuilder();
  }
  /**
   * <pre>
   * Realtime update for arrival and/or departure events for a given stop on a
   * trip. Updates can be supplied for both past and future events.
   * The producer is allowed, although not required, to drop past events.
   * </pre>
   *
   * Protobuf type {@code transit_realtime.TripUpdate.StopTimeUpdate}
   */
  public static final class StopTimeUpdate extends
      com.google.protobuf.GeneratedMessageV3.ExtendableMessage<
        StopTimeUpdate> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.TripUpdate.StopTimeUpdate)
      StopTimeUpdateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StopTimeUpdate.newBuilder() to construct.
    private StopTimeUpdate(com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<com.google.transit.realtime.TripUpdate.StopTimeUpdate, ?> builder) {
      super(builder);
    }
    private StopTimeUpdate() {
      stopId_ = "";
      departureOccupancyStatus_ = 0;
      scheduleRelationship_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StopTimeUpdate();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.TripUpdate.StopTimeUpdate.class, com.google.transit.realtime.TripUpdate.StopTimeUpdate.Builder.class);
    }

    /**
     * <pre>
     * The relation between the StopTimeEvents and the static schedule.
     * </pre>
     *
     * Protobuf enum {@code transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship}
     */
    public enum ScheduleRelationship
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * The vehicle is proceeding in accordance with its static schedule of
       * stops, although not necessarily according to the times of the schedule.
       * At least one of arrival and departure must be provided. If the schedule
       * for this stop contains both arrival and departure times then so must
       * this update. Frequency-based trips (GTFS frequencies.txt with exact_times = 0)
       * should not have a SCHEDULED value and should use UNSCHEDULED instead.
       * </pre>
       *
       * <code>SCHEDULED = 0;</code>
       */
      SCHEDULED(0),
      /**
       * <pre>
       * The stop is skipped, i.e., the vehicle will not stop at this stop.
       * Arrival and departure are optional.
       * </pre>
       *
       * <code>SKIPPED = 1;</code>
       */
      SKIPPED(1),
      /**
       * <pre>
       * No StopTimeEvents are given for this stop.
       * The main intention for this value is to give time predictions only for
       * part of a trip, i.e., if the last update for a trip has a NO_DATA
       * specifier, then StopTimeEvents for the rest of the stops in the trip
       * are considered to be unspecified as well.
       * Neither arrival nor departure should be supplied.
       * </pre>
       *
       * <code>NO_DATA = 2;</code>
       */
      NO_DATA(2),
      /**
       * <pre>
       * The vehicle is operating a trip defined in GTFS frequencies.txt with exact_times = 0.
       * This value should not be used for trips that are not defined in GTFS frequencies.txt,
       * or trips in GTFS frequencies.txt with exact_times = 1. Trips containing StopTimeUpdates
       * with ScheduleRelationship=UNSCHEDULED must also set TripDescriptor.ScheduleRelationship=UNSCHEDULED.
       * NOTE: This field is still experimental, and subject to change. It may be
       * formally adopted in the future.
       * </pre>
       *
       * <code>UNSCHEDULED = 3;</code>
       */
      UNSCHEDULED(3),
      ;

      /**
       * <pre>
       * The vehicle is proceeding in accordance with its static schedule of
       * stops, although not necessarily according to the times of the schedule.
       * At least one of arrival and departure must be provided. If the schedule
       * for this stop contains both arrival and departure times then so must
       * this update. Frequency-based trips (GTFS frequencies.txt with exact_times = 0)
       * should not have a SCHEDULED value and should use UNSCHEDULED instead.
       * </pre>
       *
       * <code>SCHEDULED = 0;</code>
       */
      public static final int SCHEDULED_VALUE = 0;
      /**
       * <pre>
       * The stop is skipped, i.e., the vehicle will not stop at this stop.
       * Arrival and departure are optional.
       * </pre>
       *
       * <code>SKIPPED = 1;</code>
       */
      public static final int SKIPPED_VALUE = 1;
      /**
       * <pre>
       * No StopTimeEvents are given for this stop.
       * The main intention for this value is to give time predictions only for
       * part of a trip, i.e., if the last update for a trip has a NO_DATA
       * specifier, then StopTimeEvents for the rest of the stops in the trip
       * are considered to be unspecified as well.
       * Neither arrival nor departure should be supplied.
       * </pre>
       *
       * <code>NO_DATA = 2;</code>
       */
      public static final int NO_DATA_VALUE = 2;
      /**
       * <pre>
       * The vehicle is operating a trip defined in GTFS frequencies.txt with exact_times = 0.
       * This value should not be used for trips that are not defined in GTFS frequencies.txt,
       * or trips in GTFS frequencies.txt with exact_times = 1. Trips containing StopTimeUpdates
       * with ScheduleRelationship=UNSCHEDULED must also set TripDescriptor.ScheduleRelationship=UNSCHEDULED.
       * NOTE: This field is still experimental, and subject to change. It may be
       * formally adopted in the future.
       * </pre>
       *
       * <code>UNSCHEDULED = 3;</code>
       */
      public static final int UNSCHEDULED_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ScheduleRelationship valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static ScheduleRelationship forNumber(int value) {
        switch (value) {
          case 0: return SCHEDULED;
          case 1: return SKIPPED;
          case 2: return NO_DATA;
          case 3: return UNSCHEDULED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ScheduleRelationship>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ScheduleRelationship> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ScheduleRelationship>() {
              public ScheduleRelationship findValueByNumber(int number) {
                return ScheduleRelationship.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.TripUpdate.StopTimeUpdate.getDescriptor().getEnumTypes().get(0);
      }

      private static final ScheduleRelationship[] VALUES = values();

      public static ScheduleRelationship valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private ScheduleRelationship(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship)
    }

    public interface StopTimePropertiesOrBuilder extends
        // @@protoc_insertion_point(interface_extends:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)
        com.google.protobuf.GeneratedMessageV3.
            ExtendableMessageOrBuilder<StopTimeProperties> {

      /**
       * <pre>
       * Supports real-time stop assignments. Refers to a stop_id defined in the GTFS stops.txt.
       * The new assigned_stop_id should not result in a significantly different trip experience for the end user than
       * the stop_id defined in GTFS stop_times.txt. In other words, the end user should not view this new stop_id as an
       * "unusual change" if the new stop was presented within an app without any additional context.
       * For example, this field is intended to be used for platform assignments by using a stop_id that belongs to the
       * same station as the stop originally defined in GTFS stop_times.txt.
       * To assign a stop without providing any real-time arrival or departure predictions, populate this field and set
       * StopTimeUpdate.schedule_relationship = NO_DATA.
       * If this field is populated, it is preferred to omit `StopTimeUpdate.stop_id` and use only `StopTimeUpdate.stop_sequence`. If
       * `StopTimeProperties.assigned_stop_id` and `StopTimeUpdate.stop_id` are populated, `StopTimeUpdate.stop_id` must match `assigned_stop_id`.
       * Platform assignments should be reflected in other GTFS-realtime fields as well
       * (e.g., `VehiclePosition.stop_id`).
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string assigned_stop_id = 1;</code>
       * @return Whether the assignedStopId field is set.
       */
      boolean hasAssignedStopId();
      /**
       * <pre>
       * Supports real-time stop assignments. Refers to a stop_id defined in the GTFS stops.txt.
       * The new assigned_stop_id should not result in a significantly different trip experience for the end user than
       * the stop_id defined in GTFS stop_times.txt. In other words, the end user should not view this new stop_id as an
       * "unusual change" if the new stop was presented within an app without any additional context.
       * For example, this field is intended to be used for platform assignments by using a stop_id that belongs to the
       * same station as the stop originally defined in GTFS stop_times.txt.
       * To assign a stop without providing any real-time arrival or departure predictions, populate this field and set
       * StopTimeUpdate.schedule_relationship = NO_DATA.
       * If this field is populated, it is preferred to omit `StopTimeUpdate.stop_id` and use only `StopTimeUpdate.stop_sequence`. If
       * `StopTimeProperties.assigned_stop_id` and `StopTimeUpdate.stop_id` are populated, `StopTimeUpdate.stop_id` must match `assigned_stop_id`.
       * Platform assignments should be reflected in other GTFS-realtime fields as well
       * (e.g., `VehiclePosition.stop_id`).
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string assigned_stop_id = 1;</code>
       * @return The assignedStopId.
       */
      java.lang.String getAssignedStopId();
      /**
       * <pre>
       * Supports real-time stop assignments. Refers to a stop_id defined in the GTFS stops.txt.
       * The new assigned_stop_id should not result in a significantly different trip experience for the end user than
       * the stop_id defined in GTFS stop_times.txt. In other words, the end user should not view this new stop_id as an
       * "unusual change" if the new stop was presented within an app without any additional context.
       * For example, this field is intended to be used for platform assignments by using a stop_id that belongs to the
       * same station as the stop originally defined in GTFS stop_times.txt.
       * To assign a stop without providing any real-time arrival or departure predictions, populate this field and set
       * StopTimeUpdate.schedule_relationship = NO_DATA.
       * If this field is populated, it is preferred to omit `StopTimeUpdate.stop_id` and use only `StopTimeUpdate.stop_sequence`. If
       * `StopTimeProperties.assigned_stop_id` and `StopTimeUpdate.stop_id` are populated, `StopTimeUpdate.stop_id` must match `assigned_stop_id`.
       * Platform assignments should be reflected in other GTFS-realtime fields as well
       * (e.g., `VehiclePosition.stop_id`).
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string assigned_stop_id = 1;</code>
       * @return The bytes for assignedStopId.
       */
      com.google.protobuf.ByteString
          getAssignedStopIdBytes();
    }
    /**
     * <pre>
     * Provides the updated values for the stop time.
     * NOTE: This message is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * Protobuf type {@code transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties}
     */
    public static final class StopTimeProperties extends
        com.google.protobuf.GeneratedMessageV3.ExtendableMessage<
          StopTimeProperties> implements
        // @@protoc_insertion_point(message_implements:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)
        StopTimePropertiesOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use StopTimeProperties.newBuilder() to construct.
      private StopTimeProperties(com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties, ?> builder) {
        super(builder);
      }
      private StopTimeProperties() {
        assignedStopId_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new StopTimeProperties();
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.class, com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.Builder.class);
      }

      private int bitField0_;
      public static final int ASSIGNED_STOP_ID_FIELD_NUMBER = 1;
      @SuppressWarnings("serial")
      private volatile java.lang.Object assignedStopId_ = "";
      /**
       * <pre>
       * Supports real-time stop assignments. Refers to a stop_id defined in the GTFS stops.txt.
       * The new assigned_stop_id should not result in a significantly different trip experience for the end user than
       * the stop_id defined in GTFS stop_times.txt. In other words, the end user should not view this new stop_id as an
       * "unusual change" if the new stop was presented within an app without any additional context.
       * For example, this field is intended to be used for platform assignments by using a stop_id that belongs to the
       * same station as the stop originally defined in GTFS stop_times.txt.
       * To assign a stop without providing any real-time arrival or departure predictions, populate this field and set
       * StopTimeUpdate.schedule_relationship = NO_DATA.
       * If this field is populated, it is preferred to omit `StopTimeUpdate.stop_id` and use only `StopTimeUpdate.stop_sequence`. If
       * `StopTimeProperties.assigned_stop_id` and `StopTimeUpdate.stop_id` are populated, `StopTimeUpdate.stop_id` must match `assigned_stop_id`.
       * Platform assignments should be reflected in other GTFS-realtime fields as well
       * (e.g., `VehiclePosition.stop_id`).
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string assigned_stop_id = 1;</code>
       * @return Whether the assignedStopId field is set.
       */
      @java.lang.Override
      public boolean hasAssignedStopId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Supports real-time stop assignments. Refers to a stop_id defined in the GTFS stops.txt.
       * The new assigned_stop_id should not result in a significantly different trip experience for the end user than
       * the stop_id defined in GTFS stop_times.txt. In other words, the end user should not view this new stop_id as an
       * "unusual change" if the new stop was presented within an app without any additional context.
       * For example, this field is intended to be used for platform assignments by using a stop_id that belongs to the
       * same station as the stop originally defined in GTFS stop_times.txt.
       * To assign a stop without providing any real-time arrival or departure predictions, populate this field and set
       * StopTimeUpdate.schedule_relationship = NO_DATA.
       * If this field is populated, it is preferred to omit `StopTimeUpdate.stop_id` and use only `StopTimeUpdate.stop_sequence`. If
       * `StopTimeProperties.assigned_stop_id` and `StopTimeUpdate.stop_id` are populated, `StopTimeUpdate.stop_id` must match `assigned_stop_id`.
       * Platform assignments should be reflected in other GTFS-realtime fields as well
       * (e.g., `VehiclePosition.stop_id`).
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string assigned_stop_id = 1;</code>
       * @return The assignedStopId.
       */
      @java.lang.Override
      public java.lang.String getAssignedStopId() {
        java.lang.Object ref = assignedStopId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            assignedStopId_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * Supports real-time stop assignments. Refers to a stop_id defined in the GTFS stops.txt.
       * The new assigned_stop_id should not result in a significantly different trip experience for the end user than
       * the stop_id defined in GTFS stop_times.txt. In other words, the end user should not view this new stop_id as an
       * "unusual change" if the new stop was presented within an app without any additional context.
       * For example, this field is intended to be used for platform assignments by using a stop_id that belongs to the
       * same station as the stop originally defined in GTFS stop_times.txt.
       * To assign a stop without providing any real-time arrival or departure predictions, populate this field and set
       * StopTimeUpdate.schedule_relationship = NO_DATA.
       * If this field is populated, it is preferred to omit `StopTimeUpdate.stop_id` and use only `StopTimeUpdate.stop_sequence`. If
       * `StopTimeProperties.assigned_stop_id` and `StopTimeUpdate.stop_id` are populated, `StopTimeUpdate.stop_id` must match `assigned_stop_id`.
       * Platform assignments should be reflected in other GTFS-realtime fields as well
       * (e.g., `VehiclePosition.stop_id`).
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string assigned_stop_id = 1;</code>
       * @return The bytes for assignedStopId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getAssignedStopIdBytes() {
        java.lang.Object ref = assignedStopId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          assignedStopId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!extensionsAreInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        com.google.protobuf.GeneratedMessageV3
          .ExtendableMessage<com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties>.ExtensionWriter
            extensionWriter = newExtensionWriter();
        if (((bitField0_ & 0x00000001) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, assignedStopId_);
        }
        extensionWriter.writeUntil(10000, output);
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, assignedStopId_);
        }
        size += extensionsSerializedSize();
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)) {
          return super.equals(obj);
        }
        com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties other = (com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties) obj;

        if (hasAssignedStopId() != other.hasAssignedStopId()) return false;
        if (hasAssignedStopId()) {
          if (!getAssignedStopId()
              .equals(other.getAssignedStopId())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        if (!getExtensionFields().equals(other.getExtensionFields()))
          return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasAssignedStopId()) {
          hash = (37 * hash) + ASSIGNED_STOP_ID_FIELD_NUMBER;
          hash = (53 * hash) + getAssignedStopId().hashCode();
        }
        hash = hashFields(hash, getExtensionFields());
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Provides the updated values for the stop time.
       * NOTE: This message is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * Protobuf type {@code transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<
            com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties, Builder> implements
          // @@protoc_insertion_point(builder_implements:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)
          com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimePropertiesOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.class, com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.Builder.class);
        }

        // Construct using com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          assignedStopId_ = "";
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_descriptor;
        }

        @java.lang.Override
        public com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties getDefaultInstanceForType() {
          return com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.getDefaultInstance();
        }

        @java.lang.Override
        public com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties build() {
          com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties buildPartial() {
          com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties result = new com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.assignedStopId_ = assignedStopId_;
            to_bitField0_ |= 0x00000001;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public <Type> Builder setExtension(
            com.google.protobuf.GeneratedMessage.GeneratedExtension<
                com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties, Type> extension,
            Type value) {
          return super.setExtension(extension, value);
        }
        @java.lang.Override
        public <Type> Builder setExtension(
            com.google.protobuf.GeneratedMessage.GeneratedExtension<
                com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties, java.util.List<Type>> extension,
            int index, Type value) {
          return super.setExtension(extension, index, value);
        }
        @java.lang.Override
        public <Type> Builder addExtension(
            com.google.protobuf.GeneratedMessage.GeneratedExtension<
                com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties, java.util.List<Type>> extension,
            Type value) {
          return super.addExtension(extension, value);
        }
        @java.lang.Override
        public <T> Builder clearExtension(
            com.google.protobuf.GeneratedMessage.GeneratedExtension<
                com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties, T> extension) {
          return super.clearExtension(extension);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties) {
            return mergeFrom((com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties other) {
          if (other == com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.getDefaultInstance()) return this;
          if (other.hasAssignedStopId()) {
            assignedStopId_ = other.assignedStopId_;
            bitField0_ |= 0x00000001;
            onChanged();
          }
          this.mergeExtensionFields(other);
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          if (!extensionsAreInitialized()) {
            return false;
          }
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  assignedStopId_ = input.readBytes();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.lang.Object assignedStopId_ = "";
        /**
         * <pre>
         * Supports real-time stop assignments. Refers to a stop_id defined in the GTFS stops.txt.
         * The new assigned_stop_id should not result in a significantly different trip experience for the end user than
         * the stop_id defined in GTFS stop_times.txt. In other words, the end user should not view this new stop_id as an
         * "unusual change" if the new stop was presented within an app without any additional context.
         * For example, this field is intended to be used for platform assignments by using a stop_id that belongs to the
         * same station as the stop originally defined in GTFS stop_times.txt.
         * To assign a stop without providing any real-time arrival or departure predictions, populate this field and set
         * StopTimeUpdate.schedule_relationship = NO_DATA.
         * If this field is populated, it is preferred to omit `StopTimeUpdate.stop_id` and use only `StopTimeUpdate.stop_sequence`. If
         * `StopTimeProperties.assigned_stop_id` and `StopTimeUpdate.stop_id` are populated, `StopTimeUpdate.stop_id` must match `assigned_stop_id`.
         * Platform assignments should be reflected in other GTFS-realtime fields as well
         * (e.g., `VehiclePosition.stop_id`).
         * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
         * </pre>
         *
         * <code>optional string assigned_stop_id = 1;</code>
         * @return Whether the assignedStopId field is set.
         */
        public boolean hasAssignedStopId() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * Supports real-time stop assignments. Refers to a stop_id defined in the GTFS stops.txt.
         * The new assigned_stop_id should not result in a significantly different trip experience for the end user than
         * the stop_id defined in GTFS stop_times.txt. In other words, the end user should not view this new stop_id as an
         * "unusual change" if the new stop was presented within an app without any additional context.
         * For example, this field is intended to be used for platform assignments by using a stop_id that belongs to the
         * same station as the stop originally defined in GTFS stop_times.txt.
         * To assign a stop without providing any real-time arrival or departure predictions, populate this field and set
         * StopTimeUpdate.schedule_relationship = NO_DATA.
         * If this field is populated, it is preferred to omit `StopTimeUpdate.stop_id` and use only `StopTimeUpdate.stop_sequence`. If
         * `StopTimeProperties.assigned_stop_id` and `StopTimeUpdate.stop_id` are populated, `StopTimeUpdate.stop_id` must match `assigned_stop_id`.
         * Platform assignments should be reflected in other GTFS-realtime fields as well
         * (e.g., `VehiclePosition.stop_id`).
         * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
         * </pre>
         *
         * <code>optional string assigned_stop_id = 1;</code>
         * @return The assignedStopId.
         */
        public java.lang.String getAssignedStopId() {
          java.lang.Object ref = assignedStopId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              assignedStopId_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Supports real-time stop assignments. Refers to a stop_id defined in the GTFS stops.txt.
         * The new assigned_stop_id should not result in a significantly different trip experience for the end user than
         * the stop_id defined in GTFS stop_times.txt. In other words, the end user should not view this new stop_id as an
         * "unusual change" if the new stop was presented within an app without any additional context.
         * For example, this field is intended to be used for platform assignments by using a stop_id that belongs to the
         * same station as the stop originally defined in GTFS stop_times.txt.
         * To assign a stop without providing any real-time arrival or departure predictions, populate this field and set
         * StopTimeUpdate.schedule_relationship = NO_DATA.
         * If this field is populated, it is preferred to omit `StopTimeUpdate.stop_id` and use only `StopTimeUpdate.stop_sequence`. If
         * `StopTimeProperties.assigned_stop_id` and `StopTimeUpdate.stop_id` are populated, `StopTimeUpdate.stop_id` must match `assigned_stop_id`.
         * Platform assignments should be reflected in other GTFS-realtime fields as well
         * (e.g., `VehiclePosition.stop_id`).
         * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
         * </pre>
         *
         * <code>optional string assigned_stop_id = 1;</code>
         * @return The bytes for assignedStopId.
         */
        public com.google.protobuf.ByteString
            getAssignedStopIdBytes() {
          java.lang.Object ref = assignedStopId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            assignedStopId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Supports real-time stop assignments. Refers to a stop_id defined in the GTFS stops.txt.
         * The new assigned_stop_id should not result in a significantly different trip experience for the end user than
         * the stop_id defined in GTFS stop_times.txt. In other words, the end user should not view this new stop_id as an
         * "unusual change" if the new stop was presented within an app without any additional context.
         * For example, this field is intended to be used for platform assignments by using a stop_id that belongs to the
         * same station as the stop originally defined in GTFS stop_times.txt.
         * To assign a stop without providing any real-time arrival or departure predictions, populate this field and set
         * StopTimeUpdate.schedule_relationship = NO_DATA.
         * If this field is populated, it is preferred to omit `StopTimeUpdate.stop_id` and use only `StopTimeUpdate.stop_sequence`. If
         * `StopTimeProperties.assigned_stop_id` and `StopTimeUpdate.stop_id` are populated, `StopTimeUpdate.stop_id` must match `assigned_stop_id`.
         * Platform assignments should be reflected in other GTFS-realtime fields as well
         * (e.g., `VehiclePosition.stop_id`).
         * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
         * </pre>
         *
         * <code>optional string assigned_stop_id = 1;</code>
         * @param value The assignedStopId to set.
         * @return This builder for chaining.
         */
        public Builder setAssignedStopId(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          assignedStopId_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Supports real-time stop assignments. Refers to a stop_id defined in the GTFS stops.txt.
         * The new assigned_stop_id should not result in a significantly different trip experience for the end user than
         * the stop_id defined in GTFS stop_times.txt. In other words, the end user should not view this new stop_id as an
         * "unusual change" if the new stop was presented within an app without any additional context.
         * For example, this field is intended to be used for platform assignments by using a stop_id that belongs to the
         * same station as the stop originally defined in GTFS stop_times.txt.
         * To assign a stop without providing any real-time arrival or departure predictions, populate this field and set
         * StopTimeUpdate.schedule_relationship = NO_DATA.
         * If this field is populated, it is preferred to omit `StopTimeUpdate.stop_id` and use only `StopTimeUpdate.stop_sequence`. If
         * `StopTimeProperties.assigned_stop_id` and `StopTimeUpdate.stop_id` are populated, `StopTimeUpdate.stop_id` must match `assigned_stop_id`.
         * Platform assignments should be reflected in other GTFS-realtime fields as well
         * (e.g., `VehiclePosition.stop_id`).
         * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
         * </pre>
         *
         * <code>optional string assigned_stop_id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearAssignedStopId() {
          assignedStopId_ = getDefaultInstance().getAssignedStopId();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Supports real-time stop assignments. Refers to a stop_id defined in the GTFS stops.txt.
         * The new assigned_stop_id should not result in a significantly different trip experience for the end user than
         * the stop_id defined in GTFS stop_times.txt. In other words, the end user should not view this new stop_id as an
         * "unusual change" if the new stop was presented within an app without any additional context.
         * For example, this field is intended to be used for platform assignments by using a stop_id that belongs to the
         * same station as the stop originally defined in GTFS stop_times.txt.
         * To assign a stop without providing any real-time arrival or departure predictions, populate this field and set
         * StopTimeUpdate.schedule_relationship = NO_DATA.
         * If this field is populated, it is preferred to omit `StopTimeUpdate.stop_id` and use only `StopTimeUpdate.stop_sequence`. If
         * `StopTimeProperties.assigned_stop_id` and `StopTimeUpdate.stop_id` are populated, `StopTimeUpdate.stop_id` must match `assigned_stop_id`.
         * Platform assignments should be reflected in other GTFS-realtime fields as well
         * (e.g., `VehiclePosition.stop_id`).
         * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
         * </pre>
         *
         * <code>optional string assigned_stop_id = 1;</code>
         * @param value The bytes for assignedStopId to set.
         * @return This builder for chaining.
         */
        public Builder setAssignedStopIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          assignedStopId_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)
      }

      // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)
      private static final com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties();
      }

      public static com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<StopTimeProperties>
          PARSER = new com.google.protobuf.AbstractParser<StopTimeProperties>() {
        @java.lang.Override
        public StopTimeProperties parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<StopTimeProperties> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<StopTimeProperties> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int STOP_SEQUENCE_FIELD_NUMBER = 1;
    private int stopSequence_ = 0;
    /**
     * <pre>
     * Must be the same as in stop_times.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional uint32 stop_sequence = 1;</code>
     * @return Whether the stopSequence field is set.
     */
    @java.lang.Override
    public boolean hasStopSequence() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Must be the same as in stop_times.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional uint32 stop_sequence = 1;</code>
     * @return The stopSequence.
     */
    @java.lang.Override
    public int getStopSequence() {
      return stopSequence_;
    }

    public static final int STOP_ID_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object stopId_ = "";
    /**
     * <pre>
     * Must be the same as in stops.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 4;</code>
     * @return Whether the stopId field is set.
     */
    @java.lang.Override
    public boolean hasStopId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Must be the same as in stops.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 4;</code>
     * @return The stopId.
     */
    @java.lang.Override
    public java.lang.String getStopId() {
      java.lang.Object ref = stopId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          stopId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Must be the same as in stops.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 4;</code>
     * @return The bytes for stopId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStopIdBytes() {
      java.lang.Object ref = stopId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stopId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ARRIVAL_FIELD_NUMBER = 2;
    private com.google.transit.realtime.TripUpdate.StopTimeEvent arrival_;
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
     * @return Whether the arrival field is set.
     */
    @java.lang.Override
    public boolean hasArrival() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
     * @return The arrival.
     */
    @java.lang.Override
    public com.google.transit.realtime.TripUpdate.StopTimeEvent getArrival() {
      return arrival_ == null ? com.google.transit.realtime.TripUpdate.StopTimeEvent.getDefaultInstance() : arrival_;
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
     */
    @java.lang.Override
    public com.google.transit.realtime.TripUpdate.StopTimeEventOrBuilder getArrivalOrBuilder() {
      return arrival_ == null ? com.google.transit.realtime.TripUpdate.StopTimeEvent.getDefaultInstance() : arrival_;
    }

    public static final int DEPARTURE_FIELD_NUMBER = 3;
    private com.google.transit.realtime.TripUpdate.StopTimeEvent departure_;
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
     * @return Whether the departure field is set.
     */
    @java.lang.Override
    public boolean hasDeparture() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
     * @return The departure.
     */
    @java.lang.Override
    public com.google.transit.realtime.TripUpdate.StopTimeEvent getDeparture() {
      return departure_ == null ? com.google.transit.realtime.TripUpdate.StopTimeEvent.getDefaultInstance() : departure_;
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
     */
    @java.lang.Override
    public com.google.transit.realtime.TripUpdate.StopTimeEventOrBuilder getDepartureOrBuilder() {
      return departure_ == null ? com.google.transit.realtime.TripUpdate.StopTimeEvent.getDefaultInstance() : departure_;
    }

    public static final int DEPARTURE_OCCUPANCY_STATUS_FIELD_NUMBER = 7;
    private int departureOccupancyStatus_ = 0;
    /**
     * <pre>
     * Expected occupancy after departure from the given stop.
     * Should be provided only for future stops.
     * In order to provide departure_occupancy_status without either arrival or
     * departure StopTimeEvents, ScheduleRelationship should be set to NO_DATA. 
     * </pre>
     *
     * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus departure_occupancy_status = 7;</code>
     * @return Whether the departureOccupancyStatus field is set.
     */
    @java.lang.Override public boolean hasDepartureOccupancyStatus() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Expected occupancy after departure from the given stop.
     * Should be provided only for future stops.
     * In order to provide departure_occupancy_status without either arrival or
     * departure StopTimeEvents, ScheduleRelationship should be set to NO_DATA. 
     * </pre>
     *
     * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus departure_occupancy_status = 7;</code>
     * @return The departureOccupancyStatus.
     */
    @java.lang.Override public com.google.transit.realtime.VehiclePosition.OccupancyStatus getDepartureOccupancyStatus() {
      com.google.transit.realtime.VehiclePosition.OccupancyStatus result = com.google.transit.realtime.VehiclePosition.OccupancyStatus.forNumber(departureOccupancyStatus_);
      return result == null ? com.google.transit.realtime.VehiclePosition.OccupancyStatus.EMPTY : result;
    }

    public static final int SCHEDULE_RELATIONSHIP_FIELD_NUMBER = 5;
    private int scheduleRelationship_ = 0;
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
     * @return Whether the scheduleRelationship field is set.
     */
    @java.lang.Override public boolean hasScheduleRelationship() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
     * @return The scheduleRelationship.
     */
    @java.lang.Override public com.google.transit.realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship getScheduleRelationship() {
      com.google.transit.realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship result = com.google.transit.realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship.forNumber(scheduleRelationship_);
      return result == null ? com.google.transit.realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship.SCHEDULED : result;
    }

    public static final int STOP_TIME_PROPERTIES_FIELD_NUMBER = 6;
    private com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stopTimeProperties_;
    /**
     * <pre>
     * Realtime updates for certain properties defined within GTFS stop_times.txt
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;</code>
     * @return Whether the stopTimeProperties field is set.
     */
    @java.lang.Override
    public boolean hasStopTimeProperties() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Realtime updates for certain properties defined within GTFS stop_times.txt
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;</code>
     * @return The stopTimeProperties.
     */
    @java.lang.Override
    public com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties getStopTimeProperties() {
      return stopTimeProperties_ == null ? com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.getDefaultInstance() : stopTimeProperties_;
    }
    /**
     * <pre>
     * Realtime updates for certain properties defined within GTFS stop_times.txt
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;</code>
     */
    @java.lang.Override
    public com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimePropertiesOrBuilder getStopTimePropertiesOrBuilder() {
      return stopTimeProperties_ == null ? com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.getDefaultInstance() : stopTimeProperties_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasArrival()) {
        if (!getArrival().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasDeparture()) {
        if (!getDeparture().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasStopTimeProperties()) {
        if (!getStopTimeProperties().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .ExtendableMessage<com.google.transit.realtime.TripUpdate.StopTimeUpdate>.ExtensionWriter
          extensionWriter = newExtensionWriter();
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, stopSequence_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(2, getArrival());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(3, getDeparture());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, stopId_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeEnum(5, scheduleRelationship_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeMessage(6, getStopTimeProperties());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeEnum(7, departureOccupancyStatus_);
      }
      extensionWriter.writeUntil(10000, output);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, stopSequence_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getArrival());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getDeparture());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, stopId_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, scheduleRelationship_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getStopTimeProperties());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, departureOccupancyStatus_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.transit.realtime.TripUpdate.StopTimeUpdate)) {
        return super.equals(obj);
      }
      com.google.transit.realtime.TripUpdate.StopTimeUpdate other = (com.google.transit.realtime.TripUpdate.StopTimeUpdate) obj;

      if (hasStopSequence() != other.hasStopSequence()) return false;
      if (hasStopSequence()) {
        if (getStopSequence()
            != other.getStopSequence()) return false;
      }
      if (hasStopId() != other.hasStopId()) return false;
      if (hasStopId()) {
        if (!getStopId()
            .equals(other.getStopId())) return false;
      }
      if (hasArrival() != other.hasArrival()) return false;
      if (hasArrival()) {
        if (!getArrival()
            .equals(other.getArrival())) return false;
      }
      if (hasDeparture() != other.hasDeparture()) return false;
      if (hasDeparture()) {
        if (!getDeparture()
            .equals(other.getDeparture())) return false;
      }
      if (hasDepartureOccupancyStatus() != other.hasDepartureOccupancyStatus()) return false;
      if (hasDepartureOccupancyStatus()) {
        if (departureOccupancyStatus_ != other.departureOccupancyStatus_) return false;
      }
      if (hasScheduleRelationship() != other.hasScheduleRelationship()) return false;
      if (hasScheduleRelationship()) {
        if (scheduleRelationship_ != other.scheduleRelationship_) return false;
      }
      if (hasStopTimeProperties() != other.hasStopTimeProperties()) return false;
      if (hasStopTimeProperties()) {
        if (!getStopTimeProperties()
            .equals(other.getStopTimeProperties())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      if (!getExtensionFields().equals(other.getExtensionFields()))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasStopSequence()) {
        hash = (37 * hash) + STOP_SEQUENCE_FIELD_NUMBER;
        hash = (53 * hash) + getStopSequence();
      }
      if (hasStopId()) {
        hash = (37 * hash) + STOP_ID_FIELD_NUMBER;
        hash = (53 * hash) + getStopId().hashCode();
      }
      if (hasArrival()) {
        hash = (37 * hash) + ARRIVAL_FIELD_NUMBER;
        hash = (53 * hash) + getArrival().hashCode();
      }
      if (hasDeparture()) {
        hash = (37 * hash) + DEPARTURE_FIELD_NUMBER;
        hash = (53 * hash) + getDeparture().hashCode();
      }
      if (hasDepartureOccupancyStatus()) {
        hash = (37 * hash) + DEPARTURE_OCCUPANCY_STATUS_FIELD_NUMBER;
        hash = (53 * hash) + departureOccupancyStatus_;
      }
      if (hasScheduleRelationship()) {
        hash = (37 * hash) + SCHEDULE_RELATIONSHIP_FIELD_NUMBER;
        hash = (53 * hash) + scheduleRelationship_;
      }
      if (hasStopTimeProperties()) {
        hash = (37 * hash) + STOP_TIME_PROPERTIES_FIELD_NUMBER;
        hash = (53 * hash) + getStopTimeProperties().hashCode();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.transit.realtime.TripUpdate.StopTimeUpdate parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeUpdate parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.google.transit.realtime.TripUpdate.StopTimeUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.transit.realtime.TripUpdate.StopTimeUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.transit.realtime.TripUpdate.StopTimeUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.transit.realtime.TripUpdate.StopTimeUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Realtime update for arrival and/or departure events for a given stop on a
     * trip. Updates can be supplied for both past and future events.
     * The producer is allowed, although not required, to drop past events.
     * </pre>
     *
     * Protobuf type {@code transit_realtime.TripUpdate.StopTimeUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<
          com.google.transit.realtime.TripUpdate.StopTimeUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.TripUpdate.StopTimeUpdate)
        com.google.transit.realtime.TripUpdate.StopTimeUpdateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.TripUpdate.StopTimeUpdate.class, com.google.transit.realtime.TripUpdate.StopTimeUpdate.Builder.class);
      }

      // Construct using com.google.transit.realtime.TripUpdate.StopTimeUpdate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getArrivalFieldBuilder();
          getDepartureFieldBuilder();
          getStopTimePropertiesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        stopSequence_ = 0;
        stopId_ = "";
        arrival_ = null;
        if (arrivalBuilder_ != null) {
          arrivalBuilder_.dispose();
          arrivalBuilder_ = null;
        }
        departure_ = null;
        if (departureBuilder_ != null) {
          departureBuilder_.dispose();
          departureBuilder_ = null;
        }
        departureOccupancyStatus_ = 0;
        scheduleRelationship_ = 0;
        stopTimeProperties_ = null;
        if (stopTimePropertiesBuilder_ != null) {
          stopTimePropertiesBuilder_.dispose();
          stopTimePropertiesBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_descriptor;
      }

      @java.lang.Override
      public com.google.transit.realtime.TripUpdate.StopTimeUpdate getDefaultInstanceForType() {
        return com.google.transit.realtime.TripUpdate.StopTimeUpdate.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.transit.realtime.TripUpdate.StopTimeUpdate build() {
        com.google.transit.realtime.TripUpdate.StopTimeUpdate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.transit.realtime.TripUpdate.StopTimeUpdate buildPartial() {
        com.google.transit.realtime.TripUpdate.StopTimeUpdate result = new com.google.transit.realtime.TripUpdate.StopTimeUpdate(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.transit.realtime.TripUpdate.StopTimeUpdate result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.stopSequence_ = stopSequence_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.stopId_ = stopId_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.arrival_ = arrivalBuilder_ == null
              ? arrival_
              : arrivalBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.departure_ = departureBuilder_ == null
              ? departure_
              : departureBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.departureOccupancyStatus_ = departureOccupancyStatus_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.scheduleRelationship_ = scheduleRelationship_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.stopTimeProperties_ = stopTimePropertiesBuilder_ == null
              ? stopTimeProperties_
              : stopTimePropertiesBuilder_.build();
          to_bitField0_ |= 0x00000040;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public <Type> Builder setExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              com.google.transit.realtime.TripUpdate.StopTimeUpdate, Type> extension,
          Type value) {
        return super.setExtension(extension, value);
      }
      @java.lang.Override
      public <Type> Builder setExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              com.google.transit.realtime.TripUpdate.StopTimeUpdate, java.util.List<Type>> extension,
          int index, Type value) {
        return super.setExtension(extension, index, value);
      }
      @java.lang.Override
      public <Type> Builder addExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              com.google.transit.realtime.TripUpdate.StopTimeUpdate, java.util.List<Type>> extension,
          Type value) {
        return super.addExtension(extension, value);
      }
      @java.lang.Override
      public <T> Builder clearExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              com.google.transit.realtime.TripUpdate.StopTimeUpdate, T> extension) {
        return super.clearExtension(extension);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.TripUpdate.StopTimeUpdate) {
          return mergeFrom((com.google.transit.realtime.TripUpdate.StopTimeUpdate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.TripUpdate.StopTimeUpdate other) {
        if (other == com.google.transit.realtime.TripUpdate.StopTimeUpdate.getDefaultInstance()) return this;
        if (other.hasStopSequence()) {
          setStopSequence(other.getStopSequence());
        }
        if (other.hasStopId()) {
          stopId_ = other.stopId_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasArrival()) {
          mergeArrival(other.getArrival());
        }
        if (other.hasDeparture()) {
          mergeDeparture(other.getDeparture());
        }
        if (other.hasDepartureOccupancyStatus()) {
          setDepartureOccupancyStatus(other.getDepartureOccupancyStatus());
        }
        if (other.hasScheduleRelationship()) {
          setScheduleRelationship(other.getScheduleRelationship());
        }
        if (other.hasStopTimeProperties()) {
          mergeStopTimeProperties(other.getStopTimeProperties());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (hasArrival()) {
          if (!getArrival().isInitialized()) {
            return false;
          }
        }
        if (hasDeparture()) {
          if (!getDeparture().isInitialized()) {
            return false;
          }
        }
        if (hasStopTimeProperties()) {
          if (!getStopTimeProperties().isInitialized()) {
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                stopSequence_ = input.readUInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getArrivalFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getDepartureFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 26
              case 34: {
                stopId_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 34
              case 40: {
                int tmpRaw = input.readEnum();
                com.google.transit.realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship tmpValue =
                    com.google.transit.realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(5, tmpRaw);
                } else {
                  scheduleRelationship_ = tmpRaw;
                  bitField0_ |= 0x00000020;
                }
                break;
              } // case 40
              case 50: {
                input.readMessage(
                    getStopTimePropertiesFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000040;
                break;
              } // case 50
              case 56: {
                int tmpRaw = input.readEnum();
                com.google.transit.realtime.VehiclePosition.OccupancyStatus tmpValue =
                    com.google.transit.realtime.VehiclePosition.OccupancyStatus.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(7, tmpRaw);
                } else {
                  departureOccupancyStatus_ = tmpRaw;
                  bitField0_ |= 0x00000010;
                }
                break;
              } // case 56
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int stopSequence_ ;
      /**
       * <pre>
       * Must be the same as in stop_times.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional uint32 stop_sequence = 1;</code>
       * @return Whether the stopSequence field is set.
       */
      @java.lang.Override
      public boolean hasStopSequence() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Must be the same as in stop_times.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional uint32 stop_sequence = 1;</code>
       * @return The stopSequence.
       */
      @java.lang.Override
      public int getStopSequence() {
        return stopSequence_;
      }
      /**
       * <pre>
       * Must be the same as in stop_times.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional uint32 stop_sequence = 1;</code>
       * @param value The stopSequence to set.
       * @return This builder for chaining.
       */
      public Builder setStopSequence(int value) {

        stopSequence_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Must be the same as in stop_times.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional uint32 stop_sequence = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStopSequence() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stopSequence_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object stopId_ = "";
      /**
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional string stop_id = 4;</code>
       * @return Whether the stopId field is set.
       */
      public boolean hasStopId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional string stop_id = 4;</code>
       * @return The stopId.
       */
      public java.lang.String getStopId() {
        java.lang.Object ref = stopId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            stopId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional string stop_id = 4;</code>
       * @return The bytes for stopId.
       */
      public com.google.protobuf.ByteString
          getStopIdBytes() {
        java.lang.Object ref = stopId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stopId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional string stop_id = 4;</code>
       * @param value The stopId to set.
       * @return This builder for chaining.
       */
      public Builder setStopId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        stopId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional string stop_id = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearStopId() {
        stopId_ = getDefaultInstance().getStopId();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional string stop_id = 4;</code>
       * @param value The bytes for stopId to set.
       * @return This builder for chaining.
       */
      public Builder setStopIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        stopId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.TripUpdate.StopTimeEvent arrival_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.transit.realtime.TripUpdate.StopTimeEvent, com.google.transit.realtime.TripUpdate.StopTimeEvent.Builder, com.google.transit.realtime.TripUpdate.StopTimeEventOrBuilder> arrivalBuilder_;
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       * @return Whether the arrival field is set.
       */
      public boolean hasArrival() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       * @return The arrival.
       */
      public com.google.transit.realtime.TripUpdate.StopTimeEvent getArrival() {
        if (arrivalBuilder_ == null) {
          return arrival_ == null ? com.google.transit.realtime.TripUpdate.StopTimeEvent.getDefaultInstance() : arrival_;
        } else {
          return arrivalBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public Builder setArrival(com.google.transit.realtime.TripUpdate.StopTimeEvent value) {
        if (arrivalBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          arrival_ = value;
        } else {
          arrivalBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public Builder setArrival(
          com.google.transit.realtime.TripUpdate.StopTimeEvent.Builder builderForValue) {
        if (arrivalBuilder_ == null) {
          arrival_ = builderForValue.build();
        } else {
          arrivalBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public Builder mergeArrival(com.google.transit.realtime.TripUpdate.StopTimeEvent value) {
        if (arrivalBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            arrival_ != null &&
            arrival_ != com.google.transit.realtime.TripUpdate.StopTimeEvent.getDefaultInstance()) {
            getArrivalBuilder().mergeFrom(value);
          } else {
            arrival_ = value;
          }
        } else {
          arrivalBuilder_.mergeFrom(value);
        }
        if (arrival_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public Builder clearArrival() {
        bitField0_ = (bitField0_ & ~0x00000004);
        arrival_ = null;
        if (arrivalBuilder_ != null) {
          arrivalBuilder_.dispose();
          arrivalBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public com.google.transit.realtime.TripUpdate.StopTimeEvent.Builder getArrivalBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getArrivalFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public com.google.transit.realtime.TripUpdate.StopTimeEventOrBuilder getArrivalOrBuilder() {
        if (arrivalBuilder_ != null) {
          return arrivalBuilder_.getMessageOrBuilder();
        } else {
          return arrival_ == null ?
              com.google.transit.realtime.TripUpdate.StopTimeEvent.getDefaultInstance() : arrival_;
        }
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.transit.realtime.TripUpdate.StopTimeEvent, com.google.transit.realtime.TripUpdate.StopTimeEvent.Builder, com.google.transit.realtime.TripUpdate.StopTimeEventOrBuilder> 
          getArrivalFieldBuilder() {
        if (arrivalBuilder_ == null) {
          arrivalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.transit.realtime.TripUpdate.StopTimeEvent, com.google.transit.realtime.TripUpdate.StopTimeEvent.Builder, com.google.transit.realtime.TripUpdate.StopTimeEventOrBuilder>(
                  getArrival(),
                  getParentForChildren(),
                  isClean());
          arrival_ = null;
        }
        return arrivalBuilder_;
      }

      private com.google.transit.realtime.TripUpdate.StopTimeEvent departure_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.transit.realtime.TripUpdate.StopTimeEvent, com.google.transit.realtime.TripUpdate.StopTimeEvent.Builder, com.google.transit.realtime.TripUpdate.StopTimeEventOrBuilder> departureBuilder_;
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       * @return Whether the departure field is set.
       */
      public boolean hasDeparture() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       * @return The departure.
       */
      public com.google.transit.realtime.TripUpdate.StopTimeEvent getDeparture() {
        if (departureBuilder_ == null) {
          return departure_ == null ? com.google.transit.realtime.TripUpdate.StopTimeEvent.getDefaultInstance() : departure_;
        } else {
          return departureBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public Builder setDeparture(com.google.transit.realtime.TripUpdate.StopTimeEvent value) {
        if (departureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          departure_ = value;
        } else {
          departureBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public Builder setDeparture(
          com.google.transit.realtime.TripUpdate.StopTimeEvent.Builder builderForValue) {
        if (departureBuilder_ == null) {
          departure_ = builderForValue.build();
        } else {
          departureBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public Builder mergeDeparture(com.google.transit.realtime.TripUpdate.StopTimeEvent value) {
        if (departureBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            departure_ != null &&
            departure_ != com.google.transit.realtime.TripUpdate.StopTimeEvent.getDefaultInstance()) {
            getDepartureBuilder().mergeFrom(value);
          } else {
            departure_ = value;
          }
        } else {
          departureBuilder_.mergeFrom(value);
        }
        if (departure_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public Builder clearDeparture() {
        bitField0_ = (bitField0_ & ~0x00000008);
        departure_ = null;
        if (departureBuilder_ != null) {
          departureBuilder_.dispose();
          departureBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public com.google.transit.realtime.TripUpdate.StopTimeEvent.Builder getDepartureBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getDepartureFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public com.google.transit.realtime.TripUpdate.StopTimeEventOrBuilder getDepartureOrBuilder() {
        if (departureBuilder_ != null) {
          return departureBuilder_.getMessageOrBuilder();
        } else {
          return departure_ == null ?
              com.google.transit.realtime.TripUpdate.StopTimeEvent.getDefaultInstance() : departure_;
        }
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.transit.realtime.TripUpdate.StopTimeEvent, com.google.transit.realtime.TripUpdate.StopTimeEvent.Builder, com.google.transit.realtime.TripUpdate.StopTimeEventOrBuilder> 
          getDepartureFieldBuilder() {
        if (departureBuilder_ == null) {
          departureBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.transit.realtime.TripUpdate.StopTimeEvent, com.google.transit.realtime.TripUpdate.StopTimeEvent.Builder, com.google.transit.realtime.TripUpdate.StopTimeEventOrBuilder>(
                  getDeparture(),
                  getParentForChildren(),
                  isClean());
          departure_ = null;
        }
        return departureBuilder_;
      }

      private int departureOccupancyStatus_ = 0;
      /**
       * <pre>
       * Expected occupancy after departure from the given stop.
       * Should be provided only for future stops.
       * In order to provide departure_occupancy_status without either arrival or
       * departure StopTimeEvents, ScheduleRelationship should be set to NO_DATA. 
       * </pre>
       *
       * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus departure_occupancy_status = 7;</code>
       * @return Whether the departureOccupancyStatus field is set.
       */
      @java.lang.Override public boolean hasDepartureOccupancyStatus() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Expected occupancy after departure from the given stop.
       * Should be provided only for future stops.
       * In order to provide departure_occupancy_status without either arrival or
       * departure StopTimeEvents, ScheduleRelationship should be set to NO_DATA. 
       * </pre>
       *
       * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus departure_occupancy_status = 7;</code>
       * @return The departureOccupancyStatus.
       */
      @java.lang.Override
      public com.google.transit.realtime.VehiclePosition.OccupancyStatus getDepartureOccupancyStatus() {
        com.google.transit.realtime.VehiclePosition.OccupancyStatus result = com.google.transit.realtime.VehiclePosition.OccupancyStatus.forNumber(departureOccupancyStatus_);
        return result == null ? com.google.transit.realtime.VehiclePosition.OccupancyStatus.EMPTY : result;
      }
      /**
       * <pre>
       * Expected occupancy after departure from the given stop.
       * Should be provided only for future stops.
       * In order to provide departure_occupancy_status without either arrival or
       * departure StopTimeEvents, ScheduleRelationship should be set to NO_DATA. 
       * </pre>
       *
       * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus departure_occupancy_status = 7;</code>
       * @param value The departureOccupancyStatus to set.
       * @return This builder for chaining.
       */
      public Builder setDepartureOccupancyStatus(com.google.transit.realtime.VehiclePosition.OccupancyStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        departureOccupancyStatus_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Expected occupancy after departure from the given stop.
       * Should be provided only for future stops.
       * In order to provide departure_occupancy_status without either arrival or
       * departure StopTimeEvents, ScheduleRelationship should be set to NO_DATA. 
       * </pre>
       *
       * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus departure_occupancy_status = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearDepartureOccupancyStatus() {
        bitField0_ = (bitField0_ & ~0x00000010);
        departureOccupancyStatus_ = 0;
        onChanged();
        return this;
      }

      private int scheduleRelationship_ = 0;
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
       * @return Whether the scheduleRelationship field is set.
       */
      @java.lang.Override public boolean hasScheduleRelationship() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
       * @return The scheduleRelationship.
       */
      @java.lang.Override
      public com.google.transit.realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship getScheduleRelationship() {
        com.google.transit.realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship result = com.google.transit.realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship.forNumber(scheduleRelationship_);
        return result == null ? com.google.transit.realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship.SCHEDULED : result;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
       * @param value The scheduleRelationship to set.
       * @return This builder for chaining.
       */
      public Builder setScheduleRelationship(com.google.transit.realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        scheduleRelationship_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
       * @return This builder for chaining.
       */
      public Builder clearScheduleRelationship() {
        bitField0_ = (bitField0_ & ~0x00000020);
        scheduleRelationship_ = 0;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stopTimeProperties_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties, com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.Builder, com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimePropertiesOrBuilder> stopTimePropertiesBuilder_;
      /**
       * <pre>
       * Realtime updates for certain properties defined within GTFS stop_times.txt
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;</code>
       * @return Whether the stopTimeProperties field is set.
       */
      public boolean hasStopTimeProperties() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Realtime updates for certain properties defined within GTFS stop_times.txt
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;</code>
       * @return The stopTimeProperties.
       */
      public com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties getStopTimeProperties() {
        if (stopTimePropertiesBuilder_ == null) {
          return stopTimeProperties_ == null ? com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.getDefaultInstance() : stopTimeProperties_;
        } else {
          return stopTimePropertiesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Realtime updates for certain properties defined within GTFS stop_times.txt
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;</code>
       */
      public Builder setStopTimeProperties(com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties value) {
        if (stopTimePropertiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stopTimeProperties_ = value;
        } else {
          stopTimePropertiesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Realtime updates for certain properties defined within GTFS stop_times.txt
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;</code>
       */
      public Builder setStopTimeProperties(
          com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.Builder builderForValue) {
        if (stopTimePropertiesBuilder_ == null) {
          stopTimeProperties_ = builderForValue.build();
        } else {
          stopTimePropertiesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Realtime updates for certain properties defined within GTFS stop_times.txt
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;</code>
       */
      public Builder mergeStopTimeProperties(com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties value) {
        if (stopTimePropertiesBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0) &&
            stopTimeProperties_ != null &&
            stopTimeProperties_ != com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.getDefaultInstance()) {
            getStopTimePropertiesBuilder().mergeFrom(value);
          } else {
            stopTimeProperties_ = value;
          }
        } else {
          stopTimePropertiesBuilder_.mergeFrom(value);
        }
        if (stopTimeProperties_ != null) {
          bitField0_ |= 0x00000040;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Realtime updates for certain properties defined within GTFS stop_times.txt
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;</code>
       */
      public Builder clearStopTimeProperties() {
        bitField0_ = (bitField0_ & ~0x00000040);
        stopTimeProperties_ = null;
        if (stopTimePropertiesBuilder_ != null) {
          stopTimePropertiesBuilder_.dispose();
          stopTimePropertiesBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Realtime updates for certain properties defined within GTFS stop_times.txt
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;</code>
       */
      public com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.Builder getStopTimePropertiesBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getStopTimePropertiesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Realtime updates for certain properties defined within GTFS stop_times.txt
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;</code>
       */
      public com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimePropertiesOrBuilder getStopTimePropertiesOrBuilder() {
        if (stopTimePropertiesBuilder_ != null) {
          return stopTimePropertiesBuilder_.getMessageOrBuilder();
        } else {
          return stopTimeProperties_ == null ?
              com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.getDefaultInstance() : stopTimeProperties_;
        }
      }
      /**
       * <pre>
       * Realtime updates for certain properties defined within GTFS stop_times.txt
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties, com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.Builder, com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimePropertiesOrBuilder> 
          getStopTimePropertiesFieldBuilder() {
        if (stopTimePropertiesBuilder_ == null) {
          stopTimePropertiesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties, com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.Builder, com.google.transit.realtime.TripUpdate.StopTimeUpdate.StopTimePropertiesOrBuilder>(
                  getStopTimeProperties(),
                  getParentForChildren(),
                  isClean());
          stopTimeProperties_ = null;
        }
        return stopTimePropertiesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:transit_realtime.TripUpdate.StopTimeUpdate)
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate.StopTimeUpdate)
    private static final com.google.transit.realtime.TripUpdate.StopTimeUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.transit.realtime.TripUpdate.StopTimeUpdate();
    }

    public static com.google.transit.realtime.TripUpdate.StopTimeUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<StopTimeUpdate>
        PARSER = new com.google.protobuf.AbstractParser<StopTimeUpdate>() {
      @java.lang.Override
      public StopTimeUpdate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<StopTimeUpdate> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StopTimeUpdate> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.transit.realtime.TripUpdate.StopTimeUpdate getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TripPropertiesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.TripUpdate.TripProperties)
      com.google.protobuf.GeneratedMessageV3.
          ExtendableMessageOrBuilder<TripProperties> {

    /**
     * <pre>
     * Defines the identifier of a new trip that is a duplicate of an existing trip defined in (CSV) GTFS trips.txt
     * but will start at a different service date and/or time (defined using the TripProperties.start_date and
     * TripProperties.start_time fields). See definition of trips.trip_id in (CSV) GTFS. Its value must be different
     * than the ones used in the (CSV) GTFS. Required if schedule_relationship=DUPLICATED, otherwise this field must not
     * be populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string trip_id = 1;</code>
     * @return Whether the tripId field is set.
     */
    boolean hasTripId();
    /**
     * <pre>
     * Defines the identifier of a new trip that is a duplicate of an existing trip defined in (CSV) GTFS trips.txt
     * but will start at a different service date and/or time (defined using the TripProperties.start_date and
     * TripProperties.start_time fields). See definition of trips.trip_id in (CSV) GTFS. Its value must be different
     * than the ones used in the (CSV) GTFS. Required if schedule_relationship=DUPLICATED, otherwise this field must not
     * be populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string trip_id = 1;</code>
     * @return The tripId.
     */
    java.lang.String getTripId();
    /**
     * <pre>
     * Defines the identifier of a new trip that is a duplicate of an existing trip defined in (CSV) GTFS trips.txt
     * but will start at a different service date and/or time (defined using the TripProperties.start_date and
     * TripProperties.start_time fields). See definition of trips.trip_id in (CSV) GTFS. Its value must be different
     * than the ones used in the (CSV) GTFS. Required if schedule_relationship=DUPLICATED, otherwise this field must not
     * be populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string trip_id = 1;</code>
     * @return The bytes for tripId.
     */
    com.google.protobuf.ByteString
        getTripIdBytes();

    /**
     * <pre>
     * Service date on which the DUPLICATED trip will be run, in YYYYMMDD format. Required if
     * schedule_relationship=DUPLICATED, otherwise this field must not be populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string start_date = 2;</code>
     * @return Whether the startDate field is set.
     */
    boolean hasStartDate();
    /**
     * <pre>
     * Service date on which the DUPLICATED trip will be run, in YYYYMMDD format. Required if
     * schedule_relationship=DUPLICATED, otherwise this field must not be populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string start_date = 2;</code>
     * @return The startDate.
     */
    java.lang.String getStartDate();
    /**
     * <pre>
     * Service date on which the DUPLICATED trip will be run, in YYYYMMDD format. Required if
     * schedule_relationship=DUPLICATED, otherwise this field must not be populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string start_date = 2;</code>
     * @return The bytes for startDate.
     */
    com.google.protobuf.ByteString
        getStartDateBytes();

    /**
     * <pre>
     * Defines the departure start time of the trip when it’s duplicated. See definition of stop_times.departure_time
     * in (CSV) GTFS. Scheduled arrival and departure times for the duplicated trip are calculated based on the offset
     * between the original trip departure_time and this field. For example, if a GTFS trip has stop A with a
     * departure_time of 10:00:00 and stop B with departure_time of 10:01:00, and this field is populated with the value
     * of 10:30:00, stop B on the duplicated trip will have a scheduled departure_time of 10:31:00. Real-time prediction
     * delay values are applied to this calculated schedule time to determine the predicted time. For example, if a
     * departure delay of 30 is provided for stop B, then the predicted departure time is 10:31:30. Real-time
     * prediction time values do not have any offset applied to them and indicate the predicted time as provided.
     * For example, if a departure time representing 10:31:30 is provided for stop B, then the predicted departure time
     * is 10:31:30. This field is required if schedule_relationship is DUPLICATED, otherwise this field must not be
     * populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string start_time = 3;</code>
     * @return Whether the startTime field is set.
     */
    boolean hasStartTime();
    /**
     * <pre>
     * Defines the departure start time of the trip when it’s duplicated. See definition of stop_times.departure_time
     * in (CSV) GTFS. Scheduled arrival and departure times for the duplicated trip are calculated based on the offset
     * between the original trip departure_time and this field. For example, if a GTFS trip has stop A with a
     * departure_time of 10:00:00 and stop B with departure_time of 10:01:00, and this field is populated with the value
     * of 10:30:00, stop B on the duplicated trip will have a scheduled departure_time of 10:31:00. Real-time prediction
     * delay values are applied to this calculated schedule time to determine the predicted time. For example, if a
     * departure delay of 30 is provided for stop B, then the predicted departure time is 10:31:30. Real-time
     * prediction time values do not have any offset applied to them and indicate the predicted time as provided.
     * For example, if a departure time representing 10:31:30 is provided for stop B, then the predicted departure time
     * is 10:31:30. This field is required if schedule_relationship is DUPLICATED, otherwise this field must not be
     * populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string start_time = 3;</code>
     * @return The startTime.
     */
    java.lang.String getStartTime();
    /**
     * <pre>
     * Defines the departure start time of the trip when it’s duplicated. See definition of stop_times.departure_time
     * in (CSV) GTFS. Scheduled arrival and departure times for the duplicated trip are calculated based on the offset
     * between the original trip departure_time and this field. For example, if a GTFS trip has stop A with a
     * departure_time of 10:00:00 and stop B with departure_time of 10:01:00, and this field is populated with the value
     * of 10:30:00, stop B on the duplicated trip will have a scheduled departure_time of 10:31:00. Real-time prediction
     * delay values are applied to this calculated schedule time to determine the predicted time. For example, if a
     * departure delay of 30 is provided for stop B, then the predicted departure time is 10:31:30. Real-time
     * prediction time values do not have any offset applied to them and indicate the predicted time as provided.
     * For example, if a departure time representing 10:31:30 is provided for stop B, then the predicted departure time
     * is 10:31:30. This field is required if schedule_relationship is DUPLICATED, otherwise this field must not be
     * populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string start_time = 3;</code>
     * @return The bytes for startTime.
     */
    com.google.protobuf.ByteString
        getStartTimeBytes();

    /**
     * <pre>
     * Specifies the shape of the vehicle travel path when the trip shape differs from the shape specified in
     * (CSV) GTFS or to specify it in real-time when it's not provided by (CSV) GTFS, such as a vehicle that takes differing
     * paths based on rider demand. See definition of trips.shape_id in (CSV) GTFS. If a shape is neither defined in (CSV) GTFS
     * nor in real-time, the shape is considered unknown. This field can refer to a shape defined in the (CSV) GTFS in shapes.txt
     * or a Shape in the (protobuf) real-time feed. The order of stops (stop sequences) for this trip must remain the same as
     * (CSV) GTFS. Stops that are a part of the original trip but will no longer be made, such as when a detour occurs, should
     * be marked as schedule_relationship=SKIPPED.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. 
     * </pre>
     *
     * <code>optional string shape_id = 4;</code>
     * @return Whether the shapeId field is set.
     */
    boolean hasShapeId();
    /**
     * <pre>
     * Specifies the shape of the vehicle travel path when the trip shape differs from the shape specified in
     * (CSV) GTFS or to specify it in real-time when it's not provided by (CSV) GTFS, such as a vehicle that takes differing
     * paths based on rider demand. See definition of trips.shape_id in (CSV) GTFS. If a shape is neither defined in (CSV) GTFS
     * nor in real-time, the shape is considered unknown. This field can refer to a shape defined in the (CSV) GTFS in shapes.txt
     * or a Shape in the (protobuf) real-time feed. The order of stops (stop sequences) for this trip must remain the same as
     * (CSV) GTFS. Stops that are a part of the original trip but will no longer be made, such as when a detour occurs, should
     * be marked as schedule_relationship=SKIPPED.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. 
     * </pre>
     *
     * <code>optional string shape_id = 4;</code>
     * @return The shapeId.
     */
    java.lang.String getShapeId();
    /**
     * <pre>
     * Specifies the shape of the vehicle travel path when the trip shape differs from the shape specified in
     * (CSV) GTFS or to specify it in real-time when it's not provided by (CSV) GTFS, such as a vehicle that takes differing
     * paths based on rider demand. See definition of trips.shape_id in (CSV) GTFS. If a shape is neither defined in (CSV) GTFS
     * nor in real-time, the shape is considered unknown. This field can refer to a shape defined in the (CSV) GTFS in shapes.txt
     * or a Shape in the (protobuf) real-time feed. The order of stops (stop sequences) for this trip must remain the same as
     * (CSV) GTFS. Stops that are a part of the original trip but will no longer be made, such as when a detour occurs, should
     * be marked as schedule_relationship=SKIPPED.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. 
     * </pre>
     *
     * <code>optional string shape_id = 4;</code>
     * @return The bytes for shapeId.
     */
    com.google.protobuf.ByteString
        getShapeIdBytes();
  }
  /**
   * <pre>
   * Defines updated properties of the trip, such as a new shape_id when there is a detour. Or defines the
   * trip_id, start_date, and start_time of a DUPLICATED trip. 
   * NOTE: This message is still experimental, and subject to change. It may be formally adopted in the future.
   * </pre>
   *
   * Protobuf type {@code transit_realtime.TripUpdate.TripProperties}
   */
  public static final class TripProperties extends
      com.google.protobuf.GeneratedMessageV3.ExtendableMessage<
        TripProperties> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.TripUpdate.TripProperties)
      TripPropertiesOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TripProperties.newBuilder() to construct.
    private TripProperties(com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<com.google.transit.realtime.TripUpdate.TripProperties, ?> builder) {
      super(builder);
    }
    private TripProperties() {
      tripId_ = "";
      startDate_ = "";
      startTime_ = "";
      shapeId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TripProperties();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_TripProperties_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_TripProperties_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.TripUpdate.TripProperties.class, com.google.transit.realtime.TripUpdate.TripProperties.Builder.class);
    }

    private int bitField0_;
    public static final int TRIP_ID_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object tripId_ = "";
    /**
     * <pre>
     * Defines the identifier of a new trip that is a duplicate of an existing trip defined in (CSV) GTFS trips.txt
     * but will start at a different service date and/or time (defined using the TripProperties.start_date and
     * TripProperties.start_time fields). See definition of trips.trip_id in (CSV) GTFS. Its value must be different
     * than the ones used in the (CSV) GTFS. Required if schedule_relationship=DUPLICATED, otherwise this field must not
     * be populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string trip_id = 1;</code>
     * @return Whether the tripId field is set.
     */
    @java.lang.Override
    public boolean hasTripId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Defines the identifier of a new trip that is a duplicate of an existing trip defined in (CSV) GTFS trips.txt
     * but will start at a different service date and/or time (defined using the TripProperties.start_date and
     * TripProperties.start_time fields). See definition of trips.trip_id in (CSV) GTFS. Its value must be different
     * than the ones used in the (CSV) GTFS. Required if schedule_relationship=DUPLICATED, otherwise this field must not
     * be populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string trip_id = 1;</code>
     * @return The tripId.
     */
    @java.lang.Override
    public java.lang.String getTripId() {
      java.lang.Object ref = tripId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          tripId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Defines the identifier of a new trip that is a duplicate of an existing trip defined in (CSV) GTFS trips.txt
     * but will start at a different service date and/or time (defined using the TripProperties.start_date and
     * TripProperties.start_time fields). See definition of trips.trip_id in (CSV) GTFS. Its value must be different
     * than the ones used in the (CSV) GTFS. Required if schedule_relationship=DUPLICATED, otherwise this field must not
     * be populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string trip_id = 1;</code>
     * @return The bytes for tripId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTripIdBytes() {
      java.lang.Object ref = tripId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tripId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int START_DATE_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object startDate_ = "";
    /**
     * <pre>
     * Service date on which the DUPLICATED trip will be run, in YYYYMMDD format. Required if
     * schedule_relationship=DUPLICATED, otherwise this field must not be populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string start_date = 2;</code>
     * @return Whether the startDate field is set.
     */
    @java.lang.Override
    public boolean hasStartDate() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Service date on which the DUPLICATED trip will be run, in YYYYMMDD format. Required if
     * schedule_relationship=DUPLICATED, otherwise this field must not be populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string start_date = 2;</code>
     * @return The startDate.
     */
    @java.lang.Override
    public java.lang.String getStartDate() {
      java.lang.Object ref = startDate_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          startDate_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Service date on which the DUPLICATED trip will be run, in YYYYMMDD format. Required if
     * schedule_relationship=DUPLICATED, otherwise this field must not be populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string start_date = 2;</code>
     * @return The bytes for startDate.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStartDateBytes() {
      java.lang.Object ref = startDate_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        startDate_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int START_TIME_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object startTime_ = "";
    /**
     * <pre>
     * Defines the departure start time of the trip when it’s duplicated. See definition of stop_times.departure_time
     * in (CSV) GTFS. Scheduled arrival and departure times for the duplicated trip are calculated based on the offset
     * between the original trip departure_time and this field. For example, if a GTFS trip has stop A with a
     * departure_time of 10:00:00 and stop B with departure_time of 10:01:00, and this field is populated with the value
     * of 10:30:00, stop B on the duplicated trip will have a scheduled departure_time of 10:31:00. Real-time prediction
     * delay values are applied to this calculated schedule time to determine the predicted time. For example, if a
     * departure delay of 30 is provided for stop B, then the predicted departure time is 10:31:30. Real-time
     * prediction time values do not have any offset applied to them and indicate the predicted time as provided.
     * For example, if a departure time representing 10:31:30 is provided for stop B, then the predicted departure time
     * is 10:31:30. This field is required if schedule_relationship is DUPLICATED, otherwise this field must not be
     * populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string start_time = 3;</code>
     * @return Whether the startTime field is set.
     */
    @java.lang.Override
    public boolean hasStartTime() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Defines the departure start time of the trip when it’s duplicated. See definition of stop_times.departure_time
     * in (CSV) GTFS. Scheduled arrival and departure times for the duplicated trip are calculated based on the offset
     * between the original trip departure_time and this field. For example, if a GTFS trip has stop A with a
     * departure_time of 10:00:00 and stop B with departure_time of 10:01:00, and this field is populated with the value
     * of 10:30:00, stop B on the duplicated trip will have a scheduled departure_time of 10:31:00. Real-time prediction
     * delay values are applied to this calculated schedule time to determine the predicted time. For example, if a
     * departure delay of 30 is provided for stop B, then the predicted departure time is 10:31:30. Real-time
     * prediction time values do not have any offset applied to them and indicate the predicted time as provided.
     * For example, if a departure time representing 10:31:30 is provided for stop B, then the predicted departure time
     * is 10:31:30. This field is required if schedule_relationship is DUPLICATED, otherwise this field must not be
     * populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string start_time = 3;</code>
     * @return The startTime.
     */
    @java.lang.Override
    public java.lang.String getStartTime() {
      java.lang.Object ref = startTime_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          startTime_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Defines the departure start time of the trip when it’s duplicated. See definition of stop_times.departure_time
     * in (CSV) GTFS. Scheduled arrival and departure times for the duplicated trip are calculated based on the offset
     * between the original trip departure_time and this field. For example, if a GTFS trip has stop A with a
     * departure_time of 10:00:00 and stop B with departure_time of 10:01:00, and this field is populated with the value
     * of 10:30:00, stop B on the duplicated trip will have a scheduled departure_time of 10:31:00. Real-time prediction
     * delay values are applied to this calculated schedule time to determine the predicted time. For example, if a
     * departure delay of 30 is provided for stop B, then the predicted departure time is 10:31:30. Real-time
     * prediction time values do not have any offset applied to them and indicate the predicted time as provided.
     * For example, if a departure time representing 10:31:30 is provided for stop B, then the predicted departure time
     * is 10:31:30. This field is required if schedule_relationship is DUPLICATED, otherwise this field must not be
     * populated and will be ignored by consumers.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * <code>optional string start_time = 3;</code>
     * @return The bytes for startTime.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStartTimeBytes() {
      java.lang.Object ref = startTime_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        startTime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SHAPE_ID_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object shapeId_ = "";
    /**
     * <pre>
     * Specifies the shape of the vehicle travel path when the trip shape differs from the shape specified in
     * (CSV) GTFS or to specify it in real-time when it's not provided by (CSV) GTFS, such as a vehicle that takes differing
     * paths based on rider demand. See definition of trips.shape_id in (CSV) GTFS. If a shape is neither defined in (CSV) GTFS
     * nor in real-time, the shape is considered unknown. This field can refer to a shape defined in the (CSV) GTFS in shapes.txt
     * or a Shape in the (protobuf) real-time feed. The order of stops (stop sequences) for this trip must remain the same as
     * (CSV) GTFS. Stops that are a part of the original trip but will no longer be made, such as when a detour occurs, should
     * be marked as schedule_relationship=SKIPPED.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. 
     * </pre>
     *
     * <code>optional string shape_id = 4;</code>
     * @return Whether the shapeId field is set.
     */
    @java.lang.Override
    public boolean hasShapeId() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Specifies the shape of the vehicle travel path when the trip shape differs from the shape specified in
     * (CSV) GTFS or to specify it in real-time when it's not provided by (CSV) GTFS, such as a vehicle that takes differing
     * paths based on rider demand. See definition of trips.shape_id in (CSV) GTFS. If a shape is neither defined in (CSV) GTFS
     * nor in real-time, the shape is considered unknown. This field can refer to a shape defined in the (CSV) GTFS in shapes.txt
     * or a Shape in the (protobuf) real-time feed. The order of stops (stop sequences) for this trip must remain the same as
     * (CSV) GTFS. Stops that are a part of the original trip but will no longer be made, such as when a detour occurs, should
     * be marked as schedule_relationship=SKIPPED.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. 
     * </pre>
     *
     * <code>optional string shape_id = 4;</code>
     * @return The shapeId.
     */
    @java.lang.Override
    public java.lang.String getShapeId() {
      java.lang.Object ref = shapeId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          shapeId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Specifies the shape of the vehicle travel path when the trip shape differs from the shape specified in
     * (CSV) GTFS or to specify it in real-time when it's not provided by (CSV) GTFS, such as a vehicle that takes differing
     * paths based on rider demand. See definition of trips.shape_id in (CSV) GTFS. If a shape is neither defined in (CSV) GTFS
     * nor in real-time, the shape is considered unknown. This field can refer to a shape defined in the (CSV) GTFS in shapes.txt
     * or a Shape in the (protobuf) real-time feed. The order of stops (stop sequences) for this trip must remain the same as
     * (CSV) GTFS. Stops that are a part of the original trip but will no longer be made, such as when a detour occurs, should
     * be marked as schedule_relationship=SKIPPED.
     * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. 
     * </pre>
     *
     * <code>optional string shape_id = 4;</code>
     * @return The bytes for shapeId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getShapeIdBytes() {
      java.lang.Object ref = shapeId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        shapeId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .ExtendableMessage<com.google.transit.realtime.TripUpdate.TripProperties>.ExtensionWriter
          extensionWriter = newExtensionWriter();
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, tripId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, startDate_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, startTime_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, shapeId_);
      }
      extensionWriter.writeUntil(10000, output);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, tripId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, startDate_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, startTime_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, shapeId_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.transit.realtime.TripUpdate.TripProperties)) {
        return super.equals(obj);
      }
      com.google.transit.realtime.TripUpdate.TripProperties other = (com.google.transit.realtime.TripUpdate.TripProperties) obj;

      if (hasTripId() != other.hasTripId()) return false;
      if (hasTripId()) {
        if (!getTripId()
            .equals(other.getTripId())) return false;
      }
      if (hasStartDate() != other.hasStartDate()) return false;
      if (hasStartDate()) {
        if (!getStartDate()
            .equals(other.getStartDate())) return false;
      }
      if (hasStartTime() != other.hasStartTime()) return false;
      if (hasStartTime()) {
        if (!getStartTime()
            .equals(other.getStartTime())) return false;
      }
      if (hasShapeId() != other.hasShapeId()) return false;
      if (hasShapeId()) {
        if (!getShapeId()
            .equals(other.getShapeId())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      if (!getExtensionFields().equals(other.getExtensionFields()))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTripId()) {
        hash = (37 * hash) + TRIP_ID_FIELD_NUMBER;
        hash = (53 * hash) + getTripId().hashCode();
      }
      if (hasStartDate()) {
        hash = (37 * hash) + START_DATE_FIELD_NUMBER;
        hash = (53 * hash) + getStartDate().hashCode();
      }
      if (hasStartTime()) {
        hash = (37 * hash) + START_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getStartTime().hashCode();
      }
      if (hasShapeId()) {
        hash = (37 * hash) + SHAPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getShapeId().hashCode();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.transit.realtime.TripUpdate.TripProperties parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.TripUpdate.TripProperties parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.TripUpdate.TripProperties parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.TripUpdate.TripProperties parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.TripUpdate.TripProperties parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.TripUpdate.TripProperties parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.TripUpdate.TripProperties parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.transit.realtime.TripUpdate.TripProperties parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.google.transit.realtime.TripUpdate.TripProperties parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.transit.realtime.TripUpdate.TripProperties parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.transit.realtime.TripUpdate.TripProperties parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.transit.realtime.TripUpdate.TripProperties parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.transit.realtime.TripUpdate.TripProperties prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines updated properties of the trip, such as a new shape_id when there is a detour. Or defines the
     * trip_id, start_date, and start_time of a DUPLICATED trip. 
     * NOTE: This message is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     *
     * Protobuf type {@code transit_realtime.TripUpdate.TripProperties}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<
          com.google.transit.realtime.TripUpdate.TripProperties, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.TripUpdate.TripProperties)
        com.google.transit.realtime.TripUpdate.TripPropertiesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_TripProperties_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_TripProperties_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.TripUpdate.TripProperties.class, com.google.transit.realtime.TripUpdate.TripProperties.Builder.class);
      }

      // Construct using com.google.transit.realtime.TripUpdate.TripProperties.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        tripId_ = "";
        startDate_ = "";
        startTime_ = "";
        shapeId_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_TripProperties_descriptor;
      }

      @java.lang.Override
      public com.google.transit.realtime.TripUpdate.TripProperties getDefaultInstanceForType() {
        return com.google.transit.realtime.TripUpdate.TripProperties.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.transit.realtime.TripUpdate.TripProperties build() {
        com.google.transit.realtime.TripUpdate.TripProperties result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.transit.realtime.TripUpdate.TripProperties buildPartial() {
        com.google.transit.realtime.TripUpdate.TripProperties result = new com.google.transit.realtime.TripUpdate.TripProperties(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.transit.realtime.TripUpdate.TripProperties result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.tripId_ = tripId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.startDate_ = startDate_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.startTime_ = startTime_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.shapeId_ = shapeId_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public <Type> Builder setExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              com.google.transit.realtime.TripUpdate.TripProperties, Type> extension,
          Type value) {
        return super.setExtension(extension, value);
      }
      @java.lang.Override
      public <Type> Builder setExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              com.google.transit.realtime.TripUpdate.TripProperties, java.util.List<Type>> extension,
          int index, Type value) {
        return super.setExtension(extension, index, value);
      }
      @java.lang.Override
      public <Type> Builder addExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              com.google.transit.realtime.TripUpdate.TripProperties, java.util.List<Type>> extension,
          Type value) {
        return super.addExtension(extension, value);
      }
      @java.lang.Override
      public <T> Builder clearExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              com.google.transit.realtime.TripUpdate.TripProperties, T> extension) {
        return super.clearExtension(extension);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.TripUpdate.TripProperties) {
          return mergeFrom((com.google.transit.realtime.TripUpdate.TripProperties)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.TripUpdate.TripProperties other) {
        if (other == com.google.transit.realtime.TripUpdate.TripProperties.getDefaultInstance()) return this;
        if (other.hasTripId()) {
          tripId_ = other.tripId_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasStartDate()) {
          startDate_ = other.startDate_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasStartTime()) {
          startTime_ = other.startTime_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.hasShapeId()) {
          shapeId_ = other.shapeId_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                tripId_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                startDate_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                startTime_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                shapeId_ = input.readBytes();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object tripId_ = "";
      /**
       * <pre>
       * Defines the identifier of a new trip that is a duplicate of an existing trip defined in (CSV) GTFS trips.txt
       * but will start at a different service date and/or time (defined using the TripProperties.start_date and
       * TripProperties.start_time fields). See definition of trips.trip_id in (CSV) GTFS. Its value must be different
       * than the ones used in the (CSV) GTFS. Required if schedule_relationship=DUPLICATED, otherwise this field must not
       * be populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string trip_id = 1;</code>
       * @return Whether the tripId field is set.
       */
      public boolean hasTripId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Defines the identifier of a new trip that is a duplicate of an existing trip defined in (CSV) GTFS trips.txt
       * but will start at a different service date and/or time (defined using the TripProperties.start_date and
       * TripProperties.start_time fields). See definition of trips.trip_id in (CSV) GTFS. Its value must be different
       * than the ones used in the (CSV) GTFS. Required if schedule_relationship=DUPLICATED, otherwise this field must not
       * be populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string trip_id = 1;</code>
       * @return The tripId.
       */
      public java.lang.String getTripId() {
        java.lang.Object ref = tripId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            tripId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Defines the identifier of a new trip that is a duplicate of an existing trip defined in (CSV) GTFS trips.txt
       * but will start at a different service date and/or time (defined using the TripProperties.start_date and
       * TripProperties.start_time fields). See definition of trips.trip_id in (CSV) GTFS. Its value must be different
       * than the ones used in the (CSV) GTFS. Required if schedule_relationship=DUPLICATED, otherwise this field must not
       * be populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string trip_id = 1;</code>
       * @return The bytes for tripId.
       */
      public com.google.protobuf.ByteString
          getTripIdBytes() {
        java.lang.Object ref = tripId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tripId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Defines the identifier of a new trip that is a duplicate of an existing trip defined in (CSV) GTFS trips.txt
       * but will start at a different service date and/or time (defined using the TripProperties.start_date and
       * TripProperties.start_time fields). See definition of trips.trip_id in (CSV) GTFS. Its value must be different
       * than the ones used in the (CSV) GTFS. Required if schedule_relationship=DUPLICATED, otherwise this field must not
       * be populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string trip_id = 1;</code>
       * @param value The tripId to set.
       * @return This builder for chaining.
       */
      public Builder setTripId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        tripId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Defines the identifier of a new trip that is a duplicate of an existing trip defined in (CSV) GTFS trips.txt
       * but will start at a different service date and/or time (defined using the TripProperties.start_date and
       * TripProperties.start_time fields). See definition of trips.trip_id in (CSV) GTFS. Its value must be different
       * than the ones used in the (CSV) GTFS. Required if schedule_relationship=DUPLICATED, otherwise this field must not
       * be populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string trip_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTripId() {
        tripId_ = getDefaultInstance().getTripId();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Defines the identifier of a new trip that is a duplicate of an existing trip defined in (CSV) GTFS trips.txt
       * but will start at a different service date and/or time (defined using the TripProperties.start_date and
       * TripProperties.start_time fields). See definition of trips.trip_id in (CSV) GTFS. Its value must be different
       * than the ones used in the (CSV) GTFS. Required if schedule_relationship=DUPLICATED, otherwise this field must not
       * be populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string trip_id = 1;</code>
       * @param value The bytes for tripId to set.
       * @return This builder for chaining.
       */
      public Builder setTripIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        tripId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object startDate_ = "";
      /**
       * <pre>
       * Service date on which the DUPLICATED trip will be run, in YYYYMMDD format. Required if
       * schedule_relationship=DUPLICATED, otherwise this field must not be populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string start_date = 2;</code>
       * @return Whether the startDate field is set.
       */
      public boolean hasStartDate() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Service date on which the DUPLICATED trip will be run, in YYYYMMDD format. Required if
       * schedule_relationship=DUPLICATED, otherwise this field must not be populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string start_date = 2;</code>
       * @return The startDate.
       */
      public java.lang.String getStartDate() {
        java.lang.Object ref = startDate_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            startDate_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Service date on which the DUPLICATED trip will be run, in YYYYMMDD format. Required if
       * schedule_relationship=DUPLICATED, otherwise this field must not be populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string start_date = 2;</code>
       * @return The bytes for startDate.
       */
      public com.google.protobuf.ByteString
          getStartDateBytes() {
        java.lang.Object ref = startDate_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          startDate_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Service date on which the DUPLICATED trip will be run, in YYYYMMDD format. Required if
       * schedule_relationship=DUPLICATED, otherwise this field must not be populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string start_date = 2;</code>
       * @param value The startDate to set.
       * @return This builder for chaining.
       */
      public Builder setStartDate(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        startDate_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Service date on which the DUPLICATED trip will be run, in YYYYMMDD format. Required if
       * schedule_relationship=DUPLICATED, otherwise this field must not be populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string start_date = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearStartDate() {
        startDate_ = getDefaultInstance().getStartDate();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Service date on which the DUPLICATED trip will be run, in YYYYMMDD format. Required if
       * schedule_relationship=DUPLICATED, otherwise this field must not be populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string start_date = 2;</code>
       * @param value The bytes for startDate to set.
       * @return This builder for chaining.
       */
      public Builder setStartDateBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        startDate_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object startTime_ = "";
      /**
       * <pre>
       * Defines the departure start time of the trip when it’s duplicated. See definition of stop_times.departure_time
       * in (CSV) GTFS. Scheduled arrival and departure times for the duplicated trip are calculated based on the offset
       * between the original trip departure_time and this field. For example, if a GTFS trip has stop A with a
       * departure_time of 10:00:00 and stop B with departure_time of 10:01:00, and this field is populated with the value
       * of 10:30:00, stop B on the duplicated trip will have a scheduled departure_time of 10:31:00. Real-time prediction
       * delay values are applied to this calculated schedule time to determine the predicted time. For example, if a
       * departure delay of 30 is provided for stop B, then the predicted departure time is 10:31:30. Real-time
       * prediction time values do not have any offset applied to them and indicate the predicted time as provided.
       * For example, if a departure time representing 10:31:30 is provided for stop B, then the predicted departure time
       * is 10:31:30. This field is required if schedule_relationship is DUPLICATED, otherwise this field must not be
       * populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string start_time = 3;</code>
       * @return Whether the startTime field is set.
       */
      public boolean hasStartTime() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Defines the departure start time of the trip when it’s duplicated. See definition of stop_times.departure_time
       * in (CSV) GTFS. Scheduled arrival and departure times for the duplicated trip are calculated based on the offset
       * between the original trip departure_time and this field. For example, if a GTFS trip has stop A with a
       * departure_time of 10:00:00 and stop B with departure_time of 10:01:00, and this field is populated with the value
       * of 10:30:00, stop B on the duplicated trip will have a scheduled departure_time of 10:31:00. Real-time prediction
       * delay values are applied to this calculated schedule time to determine the predicted time. For example, if a
       * departure delay of 30 is provided for stop B, then the predicted departure time is 10:31:30. Real-time
       * prediction time values do not have any offset applied to them and indicate the predicted time as provided.
       * For example, if a departure time representing 10:31:30 is provided for stop B, then the predicted departure time
       * is 10:31:30. This field is required if schedule_relationship is DUPLICATED, otherwise this field must not be
       * populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string start_time = 3;</code>
       * @return The startTime.
       */
      public java.lang.String getStartTime() {
        java.lang.Object ref = startTime_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            startTime_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Defines the departure start time of the trip when it’s duplicated. See definition of stop_times.departure_time
       * in (CSV) GTFS. Scheduled arrival and departure times for the duplicated trip are calculated based on the offset
       * between the original trip departure_time and this field. For example, if a GTFS trip has stop A with a
       * departure_time of 10:00:00 and stop B with departure_time of 10:01:00, and this field is populated with the value
       * of 10:30:00, stop B on the duplicated trip will have a scheduled departure_time of 10:31:00. Real-time prediction
       * delay values are applied to this calculated schedule time to determine the predicted time. For example, if a
       * departure delay of 30 is provided for stop B, then the predicted departure time is 10:31:30. Real-time
       * prediction time values do not have any offset applied to them and indicate the predicted time as provided.
       * For example, if a departure time representing 10:31:30 is provided for stop B, then the predicted departure time
       * is 10:31:30. This field is required if schedule_relationship is DUPLICATED, otherwise this field must not be
       * populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string start_time = 3;</code>
       * @return The bytes for startTime.
       */
      public com.google.protobuf.ByteString
          getStartTimeBytes() {
        java.lang.Object ref = startTime_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          startTime_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Defines the departure start time of the trip when it’s duplicated. See definition of stop_times.departure_time
       * in (CSV) GTFS. Scheduled arrival and departure times for the duplicated trip are calculated based on the offset
       * between the original trip departure_time and this field. For example, if a GTFS trip has stop A with a
       * departure_time of 10:00:00 and stop B with departure_time of 10:01:00, and this field is populated with the value
       * of 10:30:00, stop B on the duplicated trip will have a scheduled departure_time of 10:31:00. Real-time prediction
       * delay values are applied to this calculated schedule time to determine the predicted time. For example, if a
       * departure delay of 30 is provided for stop B, then the predicted departure time is 10:31:30. Real-time
       * prediction time values do not have any offset applied to them and indicate the predicted time as provided.
       * For example, if a departure time representing 10:31:30 is provided for stop B, then the predicted departure time
       * is 10:31:30. This field is required if schedule_relationship is DUPLICATED, otherwise this field must not be
       * populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string start_time = 3;</code>
       * @param value The startTime to set.
       * @return This builder for chaining.
       */
      public Builder setStartTime(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        startTime_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Defines the departure start time of the trip when it’s duplicated. See definition of stop_times.departure_time
       * in (CSV) GTFS. Scheduled arrival and departure times for the duplicated trip are calculated based on the offset
       * between the original trip departure_time and this field. For example, if a GTFS trip has stop A with a
       * departure_time of 10:00:00 and stop B with departure_time of 10:01:00, and this field is populated with the value
       * of 10:30:00, stop B on the duplicated trip will have a scheduled departure_time of 10:31:00. Real-time prediction
       * delay values are applied to this calculated schedule time to determine the predicted time. For example, if a
       * departure delay of 30 is provided for stop B, then the predicted departure time is 10:31:30. Real-time
       * prediction time values do not have any offset applied to them and indicate the predicted time as provided.
       * For example, if a departure time representing 10:31:30 is provided for stop B, then the predicted departure time
       * is 10:31:30. This field is required if schedule_relationship is DUPLICATED, otherwise this field must not be
       * populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string start_time = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearStartTime() {
        startTime_ = getDefaultInstance().getStartTime();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Defines the departure start time of the trip when it’s duplicated. See definition of stop_times.departure_time
       * in (CSV) GTFS. Scheduled arrival and departure times for the duplicated trip are calculated based on the offset
       * between the original trip departure_time and this field. For example, if a GTFS trip has stop A with a
       * departure_time of 10:00:00 and stop B with departure_time of 10:01:00, and this field is populated with the value
       * of 10:30:00, stop B on the duplicated trip will have a scheduled departure_time of 10:31:00. Real-time prediction
       * delay values are applied to this calculated schedule time to determine the predicted time. For example, if a
       * departure delay of 30 is provided for stop B, then the predicted departure time is 10:31:30. Real-time
       * prediction time values do not have any offset applied to them and indicate the predicted time as provided.
       * For example, if a departure time representing 10:31:30 is provided for stop B, then the predicted departure time
       * is 10:31:30. This field is required if schedule_relationship is DUPLICATED, otherwise this field must not be
       * populated and will be ignored by consumers.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       *
       * <code>optional string start_time = 3;</code>
       * @param value The bytes for startTime to set.
       * @return This builder for chaining.
       */
      public Builder setStartTimeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        startTime_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private java.lang.Object shapeId_ = "";
      /**
       * <pre>
       * Specifies the shape of the vehicle travel path when the trip shape differs from the shape specified in
       * (CSV) GTFS or to specify it in real-time when it's not provided by (CSV) GTFS, such as a vehicle that takes differing
       * paths based on rider demand. See definition of trips.shape_id in (CSV) GTFS. If a shape is neither defined in (CSV) GTFS
       * nor in real-time, the shape is considered unknown. This field can refer to a shape defined in the (CSV) GTFS in shapes.txt
       * or a Shape in the (protobuf) real-time feed. The order of stops (stop sequences) for this trip must remain the same as
       * (CSV) GTFS. Stops that are a part of the original trip but will no longer be made, such as when a detour occurs, should
       * be marked as schedule_relationship=SKIPPED.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. 
       * </pre>
       *
       * <code>optional string shape_id = 4;</code>
       * @return Whether the shapeId field is set.
       */
      public boolean hasShapeId() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Specifies the shape of the vehicle travel path when the trip shape differs from the shape specified in
       * (CSV) GTFS or to specify it in real-time when it's not provided by (CSV) GTFS, such as a vehicle that takes differing
       * paths based on rider demand. See definition of trips.shape_id in (CSV) GTFS. If a shape is neither defined in (CSV) GTFS
       * nor in real-time, the shape is considered unknown. This field can refer to a shape defined in the (CSV) GTFS in shapes.txt
       * or a Shape in the (protobuf) real-time feed. The order of stops (stop sequences) for this trip must remain the same as
       * (CSV) GTFS. Stops that are a part of the original trip but will no longer be made, such as when a detour occurs, should
       * be marked as schedule_relationship=SKIPPED.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. 
       * </pre>
       *
       * <code>optional string shape_id = 4;</code>
       * @return The shapeId.
       */
      public java.lang.String getShapeId() {
        java.lang.Object ref = shapeId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            shapeId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Specifies the shape of the vehicle travel path when the trip shape differs from the shape specified in
       * (CSV) GTFS or to specify it in real-time when it's not provided by (CSV) GTFS, such as a vehicle that takes differing
       * paths based on rider demand. See definition of trips.shape_id in (CSV) GTFS. If a shape is neither defined in (CSV) GTFS
       * nor in real-time, the shape is considered unknown. This field can refer to a shape defined in the (CSV) GTFS in shapes.txt
       * or a Shape in the (protobuf) real-time feed. The order of stops (stop sequences) for this trip must remain the same as
       * (CSV) GTFS. Stops that are a part of the original trip but will no longer be made, such as when a detour occurs, should
       * be marked as schedule_relationship=SKIPPED.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. 
       * </pre>
       *
       * <code>optional string shape_id = 4;</code>
       * @return The bytes for shapeId.
       */
      public com.google.protobuf.ByteString
          getShapeIdBytes() {
        java.lang.Object ref = shapeId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          shapeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Specifies the shape of the vehicle travel path when the trip shape differs from the shape specified in
       * (CSV) GTFS or to specify it in real-time when it's not provided by (CSV) GTFS, such as a vehicle that takes differing
       * paths based on rider demand. See definition of trips.shape_id in (CSV) GTFS. If a shape is neither defined in (CSV) GTFS
       * nor in real-time, the shape is considered unknown. This field can refer to a shape defined in the (CSV) GTFS in shapes.txt
       * or a Shape in the (protobuf) real-time feed. The order of stops (stop sequences) for this trip must remain the same as
       * (CSV) GTFS. Stops that are a part of the original trip but will no longer be made, such as when a detour occurs, should
       * be marked as schedule_relationship=SKIPPED.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. 
       * </pre>
       *
       * <code>optional string shape_id = 4;</code>
       * @param value The shapeId to set.
       * @return This builder for chaining.
       */
      public Builder setShapeId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        shapeId_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the shape of the vehicle travel path when the trip shape differs from the shape specified in
       * (CSV) GTFS or to specify it in real-time when it's not provided by (CSV) GTFS, such as a vehicle that takes differing
       * paths based on rider demand. See definition of trips.shape_id in (CSV) GTFS. If a shape is neither defined in (CSV) GTFS
       * nor in real-time, the shape is considered unknown. This field can refer to a shape defined in the (CSV) GTFS in shapes.txt
       * or a Shape in the (protobuf) real-time feed. The order of stops (stop sequences) for this trip must remain the same as
       * (CSV) GTFS. Stops that are a part of the original trip but will no longer be made, such as when a detour occurs, should
       * be marked as schedule_relationship=SKIPPED.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. 
       * </pre>
       *
       * <code>optional string shape_id = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearShapeId() {
        shapeId_ = getDefaultInstance().getShapeId();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the shape of the vehicle travel path when the trip shape differs from the shape specified in
       * (CSV) GTFS or to specify it in real-time when it's not provided by (CSV) GTFS, such as a vehicle that takes differing
       * paths based on rider demand. See definition of trips.shape_id in (CSV) GTFS. If a shape is neither defined in (CSV) GTFS
       * nor in real-time, the shape is considered unknown. This field can refer to a shape defined in the (CSV) GTFS in shapes.txt
       * or a Shape in the (protobuf) real-time feed. The order of stops (stop sequences) for this trip must remain the same as
       * (CSV) GTFS. Stops that are a part of the original trip but will no longer be made, such as when a detour occurs, should
       * be marked as schedule_relationship=SKIPPED.
       * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. 
       * </pre>
       *
       * <code>optional string shape_id = 4;</code>
       * @param value The bytes for shapeId to set.
       * @return This builder for chaining.
       */
      public Builder setShapeIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        shapeId_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:transit_realtime.TripUpdate.TripProperties)
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate.TripProperties)
    private static final com.google.transit.realtime.TripUpdate.TripProperties DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.transit.realtime.TripUpdate.TripProperties();
    }

    public static com.google.transit.realtime.TripUpdate.TripProperties getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TripProperties>
        PARSER = new com.google.protobuf.AbstractParser<TripProperties>() {
      @java.lang.Override
      public TripProperties parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TripProperties> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TripProperties> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.transit.realtime.TripUpdate.TripProperties getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int TRIP_FIELD_NUMBER = 1;
  private com.google.transit.realtime.TripDescriptor trip_;
  /**
   * <pre>
   * The Trip that this message applies to. There can be at most one
   * TripUpdate entity for each actual trip instance.
   * If there is none, that means there is no prediction information available.
   * It does *not* mean that the trip is progressing according to schedule.
   * </pre>
   *
   * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
   * @return Whether the trip field is set.
   */
  @java.lang.Override
  public boolean hasTrip() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The Trip that this message applies to. There can be at most one
   * TripUpdate entity for each actual trip instance.
   * If there is none, that means there is no prediction information available.
   * It does *not* mean that the trip is progressing according to schedule.
   * </pre>
   *
   * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
   * @return The trip.
   */
  @java.lang.Override
  public com.google.transit.realtime.TripDescriptor getTrip() {
    return trip_ == null ? com.google.transit.realtime.TripDescriptor.getDefaultInstance() : trip_;
  }
  /**
   * <pre>
   * The Trip that this message applies to. There can be at most one
   * TripUpdate entity for each actual trip instance.
   * If there is none, that means there is no prediction information available.
   * It does *not* mean that the trip is progressing according to schedule.
   * </pre>
   *
   * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
   */
  @java.lang.Override
  public com.google.transit.realtime.TripDescriptorOrBuilder getTripOrBuilder() {
    return trip_ == null ? com.google.transit.realtime.TripDescriptor.getDefaultInstance() : trip_;
  }

  public static final int VEHICLE_FIELD_NUMBER = 3;
  private com.google.transit.realtime.VehicleDescriptor vehicle_;
  /**
   * <pre>
   * Additional information on the vehicle that is serving this trip.
   * </pre>
   *
   * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
   * @return Whether the vehicle field is set.
   */
  @java.lang.Override
  public boolean hasVehicle() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Additional information on the vehicle that is serving this trip.
   * </pre>
   *
   * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
   * @return The vehicle.
   */
  @java.lang.Override
  public com.google.transit.realtime.VehicleDescriptor getVehicle() {
    return vehicle_ == null ? com.google.transit.realtime.VehicleDescriptor.getDefaultInstance() : vehicle_;
  }
  /**
   * <pre>
   * Additional information on the vehicle that is serving this trip.
   * </pre>
   *
   * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
   */
  @java.lang.Override
  public com.google.transit.realtime.VehicleDescriptorOrBuilder getVehicleOrBuilder() {
    return vehicle_ == null ? com.google.transit.realtime.VehicleDescriptor.getDefaultInstance() : vehicle_;
  }

  public static final int STOP_TIME_UPDATE_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<com.google.transit.realtime.TripUpdate.StopTimeUpdate> stopTimeUpdate_;
  /**
   * <pre>
   * Updates to StopTimes for the trip (both future, i.e., predictions, and in
   * some cases, past ones, i.e., those that already happened).
   * The updates must be sorted by stop_sequence, and apply for all the
   * following stops of the trip up to the next specified one.
   *
   * Example 1:
   * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
   * delay of 0 for stop_sequence of the current stop means that the trip is
   * exactly on time.
   *
   * Example 2:
   * For the same trip instance, 3 StopTimeUpdates are provided:
   * - delay of 5 min for stop_sequence 3
   * - delay of 1 min for stop_sequence 8
   * - delay of unspecified duration for stop_sequence 10
   * This will be interpreted as:
   * - stop_sequences 3,4,5,6,7 have delay of 5 min.
   * - stop_sequences 8,9 have delay of 1 min.
   * - stop_sequences 10,... have unknown delay.
   * </pre>
   *
   * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.transit.realtime.TripUpdate.StopTimeUpdate> getStopTimeUpdateList() {
    return stopTimeUpdate_;
  }
  /**
   * <pre>
   * Updates to StopTimes for the trip (both future, i.e., predictions, and in
   * some cases, past ones, i.e., those that already happened).
   * The updates must be sorted by stop_sequence, and apply for all the
   * following stops of the trip up to the next specified one.
   *
   * Example 1:
   * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
   * delay of 0 for stop_sequence of the current stop means that the trip is
   * exactly on time.
   *
   * Example 2:
   * For the same trip instance, 3 StopTimeUpdates are provided:
   * - delay of 5 min for stop_sequence 3
   * - delay of 1 min for stop_sequence 8
   * - delay of unspecified duration for stop_sequence 10
   * This will be interpreted as:
   * - stop_sequences 3,4,5,6,7 have delay of 5 min.
   * - stop_sequences 8,9 have delay of 1 min.
   * - stop_sequences 10,... have unknown delay.
   * </pre>
   *
   * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.transit.realtime.TripUpdate.StopTimeUpdateOrBuilder> 
      getStopTimeUpdateOrBuilderList() {
    return stopTimeUpdate_;
  }
  /**
   * <pre>
   * Updates to StopTimes for the trip (both future, i.e., predictions, and in
   * some cases, past ones, i.e., those that already happened).
   * The updates must be sorted by stop_sequence, and apply for all the
   * following stops of the trip up to the next specified one.
   *
   * Example 1:
   * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
   * delay of 0 for stop_sequence of the current stop means that the trip is
   * exactly on time.
   *
   * Example 2:
   * For the same trip instance, 3 StopTimeUpdates are provided:
   * - delay of 5 min for stop_sequence 3
   * - delay of 1 min for stop_sequence 8
   * - delay of unspecified duration for stop_sequence 10
   * This will be interpreted as:
   * - stop_sequences 3,4,5,6,7 have delay of 5 min.
   * - stop_sequences 8,9 have delay of 1 min.
   * - stop_sequences 10,... have unknown delay.
   * </pre>
   *
   * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
   */
  @java.lang.Override
  public int getStopTimeUpdateCount() {
    return stopTimeUpdate_.size();
  }
  /**
   * <pre>
   * Updates to StopTimes for the trip (both future, i.e., predictions, and in
   * some cases, past ones, i.e., those that already happened).
   * The updates must be sorted by stop_sequence, and apply for all the
   * following stops of the trip up to the next specified one.
   *
   * Example 1:
   * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
   * delay of 0 for stop_sequence of the current stop means that the trip is
   * exactly on time.
   *
   * Example 2:
   * For the same trip instance, 3 StopTimeUpdates are provided:
   * - delay of 5 min for stop_sequence 3
   * - delay of 1 min for stop_sequence 8
   * - delay of unspecified duration for stop_sequence 10
   * This will be interpreted as:
   * - stop_sequences 3,4,5,6,7 have delay of 5 min.
   * - stop_sequences 8,9 have delay of 1 min.
   * - stop_sequences 10,... have unknown delay.
   * </pre>
   *
   * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
   */
  @java.lang.Override
  public com.google.transit.realtime.TripUpdate.StopTimeUpdate getStopTimeUpdate(int index) {
    return stopTimeUpdate_.get(index);
  }
  /**
   * <pre>
   * Updates to StopTimes for the trip (both future, i.e., predictions, and in
   * some cases, past ones, i.e., those that already happened).
   * The updates must be sorted by stop_sequence, and apply for all the
   * following stops of the trip up to the next specified one.
   *
   * Example 1:
   * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
   * delay of 0 for stop_sequence of the current stop means that the trip is
   * exactly on time.
   *
   * Example 2:
   * For the same trip instance, 3 StopTimeUpdates are provided:
   * - delay of 5 min for stop_sequence 3
   * - delay of 1 min for stop_sequence 8
   * - delay of unspecified duration for stop_sequence 10
   * This will be interpreted as:
   * - stop_sequences 3,4,5,6,7 have delay of 5 min.
   * - stop_sequences 8,9 have delay of 1 min.
   * - stop_sequences 10,... have unknown delay.
   * </pre>
   *
   * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
   */
  @java.lang.Override
  public com.google.transit.realtime.TripUpdate.StopTimeUpdateOrBuilder getStopTimeUpdateOrBuilder(
      int index) {
    return stopTimeUpdate_.get(index);
  }

  public static final int TIMESTAMP_FIELD_NUMBER = 4;
  private long timestamp_ = 0L;
  /**
   * <pre>
   * The most recent moment at which the vehicle's real-time progress was measured
   * to estimate StopTimes in the future. When StopTimes in the past are provided,
   * arrival/departure times may be earlier than this value. In POSIX
   * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
   * </pre>
   *
   * <code>optional uint64 timestamp = 4;</code>
   * @return Whether the timestamp field is set.
   */
  @java.lang.Override
  public boolean hasTimestamp() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The most recent moment at which the vehicle's real-time progress was measured
   * to estimate StopTimes in the future. When StopTimes in the past are provided,
   * arrival/departure times may be earlier than this value. In POSIX
   * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
   * </pre>
   *
   * <code>optional uint64 timestamp = 4;</code>
   * @return The timestamp.
   */
  @java.lang.Override
  public long getTimestamp() {
    return timestamp_;
  }

  public static final int DELAY_FIELD_NUMBER = 5;
  private int delay_ = 0;
  /**
   * <pre>
   * The current schedule deviation for the trip.  Delay should only be
   * specified when the prediction is given relative to some existing schedule
   * in GTFS.
   *
   * Delay (in seconds) can be positive (meaning that the vehicle is late) or
   * negative (meaning that the vehicle is ahead of schedule). Delay of 0
   * means that the vehicle is exactly on time.
   *
   * Delay information in StopTimeUpdates take precedent of trip-level delay
   * information, such that trip-level delay is only propagated until the next
   * stop along the trip with a StopTimeUpdate delay value specified.
   *
   * Feed providers are strongly encouraged to provide a TripUpdate.timestamp
   * value indicating when the delay value was last updated, in order to
   * evaluate the freshness of the data.
   *
   * NOTE: This field is still experimental, and subject to change. It may be
   * formally adopted in the future.
   * </pre>
   *
   * <code>optional int32 delay = 5;</code>
   * @return Whether the delay field is set.
   */
  @java.lang.Override
  public boolean hasDelay() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * The current schedule deviation for the trip.  Delay should only be
   * specified when the prediction is given relative to some existing schedule
   * in GTFS.
   *
   * Delay (in seconds) can be positive (meaning that the vehicle is late) or
   * negative (meaning that the vehicle is ahead of schedule). Delay of 0
   * means that the vehicle is exactly on time.
   *
   * Delay information in StopTimeUpdates take precedent of trip-level delay
   * information, such that trip-level delay is only propagated until the next
   * stop along the trip with a StopTimeUpdate delay value specified.
   *
   * Feed providers are strongly encouraged to provide a TripUpdate.timestamp
   * value indicating when the delay value was last updated, in order to
   * evaluate the freshness of the data.
   *
   * NOTE: This field is still experimental, and subject to change. It may be
   * formally adopted in the future.
   * </pre>
   *
   * <code>optional int32 delay = 5;</code>
   * @return The delay.
   */
  @java.lang.Override
  public int getDelay() {
    return delay_;
  }

  public static final int TRIP_PROPERTIES_FIELD_NUMBER = 6;
  private com.google.transit.realtime.TripUpdate.TripProperties tripProperties_;
  /**
   * <code>optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;</code>
   * @return Whether the tripProperties field is set.
   */
  @java.lang.Override
  public boolean hasTripProperties() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <code>optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;</code>
   * @return The tripProperties.
   */
  @java.lang.Override
  public com.google.transit.realtime.TripUpdate.TripProperties getTripProperties() {
    return tripProperties_ == null ? com.google.transit.realtime.TripUpdate.TripProperties.getDefaultInstance() : tripProperties_;
  }
  /**
   * <code>optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;</code>
   */
  @java.lang.Override
  public com.google.transit.realtime.TripUpdate.TripPropertiesOrBuilder getTripPropertiesOrBuilder() {
    return tripProperties_ == null ? com.google.transit.realtime.TripUpdate.TripProperties.getDefaultInstance() : tripProperties_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasTrip()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getTrip().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (hasVehicle()) {
      if (!getVehicle().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    for (int i = 0; i < getStopTimeUpdateCount(); i++) {
      if (!getStopTimeUpdate(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasTripProperties()) {
      if (!getTripProperties().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (!extensionsAreInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessageV3
      .ExtendableMessage<com.google.transit.realtime.TripUpdate>.ExtensionWriter
        extensionWriter = newExtensionWriter();
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getTrip());
    }
    for (int i = 0; i < stopTimeUpdate_.size(); i++) {
      output.writeMessage(2, stopTimeUpdate_.get(i));
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(3, getVehicle());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeUInt64(4, timestamp_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeInt32(5, delay_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeMessage(6, getTripProperties());
    }
    extensionWriter.writeUntil(10000, output);
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getTrip());
    }
    for (int i = 0; i < stopTimeUpdate_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, stopTimeUpdate_.get(i));
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getVehicle());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(4, timestamp_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, delay_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getTripProperties());
    }
    size += extensionsSerializedSize();
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.transit.realtime.TripUpdate)) {
      return super.equals(obj);
    }
    com.google.transit.realtime.TripUpdate other = (com.google.transit.realtime.TripUpdate) obj;

    if (hasTrip() != other.hasTrip()) return false;
    if (hasTrip()) {
      if (!getTrip()
          .equals(other.getTrip())) return false;
    }
    if (hasVehicle() != other.hasVehicle()) return false;
    if (hasVehicle()) {
      if (!getVehicle()
          .equals(other.getVehicle())) return false;
    }
    if (!getStopTimeUpdateList()
        .equals(other.getStopTimeUpdateList())) return false;
    if (hasTimestamp() != other.hasTimestamp()) return false;
    if (hasTimestamp()) {
      if (getTimestamp()
          != other.getTimestamp()) return false;
    }
    if (hasDelay() != other.hasDelay()) return false;
    if (hasDelay()) {
      if (getDelay()
          != other.getDelay()) return false;
    }
    if (hasTripProperties() != other.hasTripProperties()) return false;
    if (hasTripProperties()) {
      if (!getTripProperties()
          .equals(other.getTripProperties())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    if (!getExtensionFields().equals(other.getExtensionFields()))
      return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasTrip()) {
      hash = (37 * hash) + TRIP_FIELD_NUMBER;
      hash = (53 * hash) + getTrip().hashCode();
    }
    if (hasVehicle()) {
      hash = (37 * hash) + VEHICLE_FIELD_NUMBER;
      hash = (53 * hash) + getVehicle().hashCode();
    }
    if (getStopTimeUpdateCount() > 0) {
      hash = (37 * hash) + STOP_TIME_UPDATE_FIELD_NUMBER;
      hash = (53 * hash) + getStopTimeUpdateList().hashCode();
    }
    if (hasTimestamp()) {
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
    }
    if (hasDelay()) {
      hash = (37 * hash) + DELAY_FIELD_NUMBER;
      hash = (53 * hash) + getDelay();
    }
    if (hasTripProperties()) {
      hash = (37 * hash) + TRIP_PROPERTIES_FIELD_NUMBER;
      hash = (53 * hash) + getTripProperties().hashCode();
    }
    hash = hashFields(hash, getExtensionFields());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.transit.realtime.TripUpdate parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.transit.realtime.TripUpdate parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.transit.realtime.TripUpdate parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.transit.realtime.TripUpdate parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.transit.realtime.TripUpdate parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.transit.realtime.TripUpdate parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.transit.realtime.TripUpdate parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.transit.realtime.TripUpdate parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.google.transit.realtime.TripUpdate parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.transit.realtime.TripUpdate parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.transit.realtime.TripUpdate parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.transit.realtime.TripUpdate parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.transit.realtime.TripUpdate prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Realtime update of the progress of a vehicle along a trip.
   * Depending on the value of ScheduleRelationship, a TripUpdate can specify:
   * - A trip that proceeds along the schedule.
   * - A trip that proceeds along a route but has no fixed schedule.
   * - A trip that have been added or removed with regard to schedule.
   *
   * The updates can be for future, predicted arrival/departure events, or for
   * past events that already occurred.
   * Normally, updates should get more precise and more certain (see
   * uncertainty below) as the events gets closer to current time.
   * Even if that is not possible, the information for past events should be
   * precise and certain. In particular, if an update points to time in the past
   * but its update's uncertainty is not 0, the client should conclude that the
   * update is a (wrong) prediction and that the trip has not completed yet.
   *
   * Note that the update can describe a trip that is already completed.
   * To this end, it is enough to provide an update for the last stop of the trip.
   * If the time of that is in the past, the client will conclude from that that
   * the whole trip is in the past (it is possible, although inconsequential, to
   * also provide updates for preceding stops).
   * This option is most relevant for a trip that has completed ahead of schedule,
   * but according to the schedule, the trip is still proceeding at the current
   * time. Removing the updates for this trip could make the client assume
   * that the trip is still proceeding.
   * Note that the feed provider is allowed, but not required, to purge past
   * updates - this is one case where this would be practically useful.
   * </pre>
   *
   * Protobuf type {@code transit_realtime.TripUpdate}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<
        com.google.transit.realtime.TripUpdate, Builder> implements
      // @@protoc_insertion_point(builder_implements:transit_realtime.TripUpdate)
      com.google.transit.realtime.TripUpdateOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.TripUpdate.class, com.google.transit.realtime.TripUpdate.Builder.class);
    }

    // Construct using com.google.transit.realtime.TripUpdate.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getTripFieldBuilder();
        getVehicleFieldBuilder();
        getStopTimeUpdateFieldBuilder();
        getTripPropertiesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      trip_ = null;
      if (tripBuilder_ != null) {
        tripBuilder_.dispose();
        tripBuilder_ = null;
      }
      vehicle_ = null;
      if (vehicleBuilder_ != null) {
        vehicleBuilder_.dispose();
        vehicleBuilder_ = null;
      }
      if (stopTimeUpdateBuilder_ == null) {
        stopTimeUpdate_ = java.util.Collections.emptyList();
      } else {
        stopTimeUpdate_ = null;
        stopTimeUpdateBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      timestamp_ = 0L;
      delay_ = 0;
      tripProperties_ = null;
      if (tripPropertiesBuilder_ != null) {
        tripPropertiesBuilder_.dispose();
        tripPropertiesBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_descriptor;
    }

    @java.lang.Override
    public com.google.transit.realtime.TripUpdate getDefaultInstanceForType() {
      return com.google.transit.realtime.TripUpdate.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.transit.realtime.TripUpdate build() {
      com.google.transit.realtime.TripUpdate result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.transit.realtime.TripUpdate buildPartial() {
      com.google.transit.realtime.TripUpdate result = new com.google.transit.realtime.TripUpdate(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.transit.realtime.TripUpdate result) {
      if (stopTimeUpdateBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          stopTimeUpdate_ = java.util.Collections.unmodifiableList(stopTimeUpdate_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.stopTimeUpdate_ = stopTimeUpdate_;
      } else {
        result.stopTimeUpdate_ = stopTimeUpdateBuilder_.build();
      }
    }

    private void buildPartial0(com.google.transit.realtime.TripUpdate result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.trip_ = tripBuilder_ == null
            ? trip_
            : tripBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.vehicle_ = vehicleBuilder_ == null
            ? vehicle_
            : vehicleBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.timestamp_ = timestamp_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.delay_ = delay_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.tripProperties_ = tripPropertiesBuilder_ == null
            ? tripProperties_
            : tripPropertiesBuilder_.build();
        to_bitField0_ |= 0x00000010;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public <Type> Builder setExtension(
        com.google.protobuf.GeneratedMessage.GeneratedExtension<
            com.google.transit.realtime.TripUpdate, Type> extension,
        Type value) {
      return super.setExtension(extension, value);
    }
    @java.lang.Override
    public <Type> Builder setExtension(
        com.google.protobuf.GeneratedMessage.GeneratedExtension<
            com.google.transit.realtime.TripUpdate, java.util.List<Type>> extension,
        int index, Type value) {
      return super.setExtension(extension, index, value);
    }
    @java.lang.Override
    public <Type> Builder addExtension(
        com.google.protobuf.GeneratedMessage.GeneratedExtension<
            com.google.transit.realtime.TripUpdate, java.util.List<Type>> extension,
        Type value) {
      return super.addExtension(extension, value);
    }
    @java.lang.Override
    public <T> Builder clearExtension(
        com.google.protobuf.GeneratedMessage.GeneratedExtension<
            com.google.transit.realtime.TripUpdate, T> extension) {
      return super.clearExtension(extension);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.transit.realtime.TripUpdate) {
        return mergeFrom((com.google.transit.realtime.TripUpdate)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.transit.realtime.TripUpdate other) {
      if (other == com.google.transit.realtime.TripUpdate.getDefaultInstance()) return this;
      if (other.hasTrip()) {
        mergeTrip(other.getTrip());
      }
      if (other.hasVehicle()) {
        mergeVehicle(other.getVehicle());
      }
      if (stopTimeUpdateBuilder_ == null) {
        if (!other.stopTimeUpdate_.isEmpty()) {
          if (stopTimeUpdate_.isEmpty()) {
            stopTimeUpdate_ = other.stopTimeUpdate_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureStopTimeUpdateIsMutable();
            stopTimeUpdate_.addAll(other.stopTimeUpdate_);
          }
          onChanged();
        }
      } else {
        if (!other.stopTimeUpdate_.isEmpty()) {
          if (stopTimeUpdateBuilder_.isEmpty()) {
            stopTimeUpdateBuilder_.dispose();
            stopTimeUpdateBuilder_ = null;
            stopTimeUpdate_ = other.stopTimeUpdate_;
            bitField0_ = (bitField0_ & ~0x00000004);
            stopTimeUpdateBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getStopTimeUpdateFieldBuilder() : null;
          } else {
            stopTimeUpdateBuilder_.addAllMessages(other.stopTimeUpdate_);
          }
        }
      }
      if (other.hasTimestamp()) {
        setTimestamp(other.getTimestamp());
      }
      if (other.hasDelay()) {
        setDelay(other.getDelay());
      }
      if (other.hasTripProperties()) {
        mergeTripProperties(other.getTripProperties());
      }
      this.mergeExtensionFields(other);
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      if (!hasTrip()) {
        return false;
      }
      if (!getTrip().isInitialized()) {
        return false;
      }
      if (hasVehicle()) {
        if (!getVehicle().isInitialized()) {
          return false;
        }
      }
      for (int i = 0; i < getStopTimeUpdateCount(); i++) {
        if (!getStopTimeUpdate(i).isInitialized()) {
          return false;
        }
      }
      if (hasTripProperties()) {
        if (!getTripProperties().isInitialized()) {
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        return false;
      }
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getTripFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              com.google.transit.realtime.TripUpdate.StopTimeUpdate m =
                  input.readMessage(
                      com.google.transit.realtime.TripUpdate.StopTimeUpdate.PARSER,
                      extensionRegistry);
              if (stopTimeUpdateBuilder_ == null) {
                ensureStopTimeUpdateIsMutable();
                stopTimeUpdate_.add(m);
              } else {
                stopTimeUpdateBuilder_.addMessage(m);
              }
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getVehicleFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 26
            case 32: {
              timestamp_ = input.readUInt64();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              delay_ = input.readInt32();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 50: {
              input.readMessage(
                  getTripPropertiesFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.transit.realtime.TripDescriptor trip_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.transit.realtime.TripDescriptor, com.google.transit.realtime.TripDescriptor.Builder, com.google.transit.realtime.TripDescriptorOrBuilder> tripBuilder_;
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     * @return Whether the trip field is set.
     */
    public boolean hasTrip() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     * @return The trip.
     */
    public com.google.transit.realtime.TripDescriptor getTrip() {
      if (tripBuilder_ == null) {
        return trip_ == null ? com.google.transit.realtime.TripDescriptor.getDefaultInstance() : trip_;
      } else {
        return tripBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public Builder setTrip(com.google.transit.realtime.TripDescriptor value) {
      if (tripBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        trip_ = value;
      } else {
        tripBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public Builder setTrip(
        com.google.transit.realtime.TripDescriptor.Builder builderForValue) {
      if (tripBuilder_ == null) {
        trip_ = builderForValue.build();
      } else {
        tripBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public Builder mergeTrip(com.google.transit.realtime.TripDescriptor value) {
      if (tripBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          trip_ != null &&
          trip_ != com.google.transit.realtime.TripDescriptor.getDefaultInstance()) {
          getTripBuilder().mergeFrom(value);
        } else {
          trip_ = value;
        }
      } else {
        tripBuilder_.mergeFrom(value);
      }
      if (trip_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public Builder clearTrip() {
      bitField0_ = (bitField0_ & ~0x00000001);
      trip_ = null;
      if (tripBuilder_ != null) {
        tripBuilder_.dispose();
        tripBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public com.google.transit.realtime.TripDescriptor.Builder getTripBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getTripFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public com.google.transit.realtime.TripDescriptorOrBuilder getTripOrBuilder() {
      if (tripBuilder_ != null) {
        return tripBuilder_.getMessageOrBuilder();
      } else {
        return trip_ == null ?
            com.google.transit.realtime.TripDescriptor.getDefaultInstance() : trip_;
      }
    }
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.transit.realtime.TripDescriptor, com.google.transit.realtime.TripDescriptor.Builder, com.google.transit.realtime.TripDescriptorOrBuilder> 
        getTripFieldBuilder() {
      if (tripBuilder_ == null) {
        tripBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.transit.realtime.TripDescriptor, com.google.transit.realtime.TripDescriptor.Builder, com.google.transit.realtime.TripDescriptorOrBuilder>(
                getTrip(),
                getParentForChildren(),
                isClean());
        trip_ = null;
      }
      return tripBuilder_;
    }

    private com.google.transit.realtime.VehicleDescriptor vehicle_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.transit.realtime.VehicleDescriptor, com.google.transit.realtime.VehicleDescriptor.Builder, com.google.transit.realtime.VehicleDescriptorOrBuilder> vehicleBuilder_;
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     * @return Whether the vehicle field is set.
     */
    public boolean hasVehicle() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     * @return The vehicle.
     */
    public com.google.transit.realtime.VehicleDescriptor getVehicle() {
      if (vehicleBuilder_ == null) {
        return vehicle_ == null ? com.google.transit.realtime.VehicleDescriptor.getDefaultInstance() : vehicle_;
      } else {
        return vehicleBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    public Builder setVehicle(com.google.transit.realtime.VehicleDescriptor value) {
      if (vehicleBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        vehicle_ = value;
      } else {
        vehicleBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    public Builder setVehicle(
        com.google.transit.realtime.VehicleDescriptor.Builder builderForValue) {
      if (vehicleBuilder_ == null) {
        vehicle_ = builderForValue.build();
      } else {
        vehicleBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    public Builder mergeVehicle(com.google.transit.realtime.VehicleDescriptor value) {
      if (vehicleBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          vehicle_ != null &&
          vehicle_ != com.google.transit.realtime.VehicleDescriptor.getDefaultInstance()) {
          getVehicleBuilder().mergeFrom(value);
        } else {
          vehicle_ = value;
        }
      } else {
        vehicleBuilder_.mergeFrom(value);
      }
      if (vehicle_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    public Builder clearVehicle() {
      bitField0_ = (bitField0_ & ~0x00000002);
      vehicle_ = null;
      if (vehicleBuilder_ != null) {
        vehicleBuilder_.dispose();
        vehicleBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    public com.google.transit.realtime.VehicleDescriptor.Builder getVehicleBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getVehicleFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    public com.google.transit.realtime.VehicleDescriptorOrBuilder getVehicleOrBuilder() {
      if (vehicleBuilder_ != null) {
        return vehicleBuilder_.getMessageOrBuilder();
      } else {
        return vehicle_ == null ?
            com.google.transit.realtime.VehicleDescriptor.getDefaultInstance() : vehicle_;
      }
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.transit.realtime.VehicleDescriptor, com.google.transit.realtime.VehicleDescriptor.Builder, com.google.transit.realtime.VehicleDescriptorOrBuilder> 
        getVehicleFieldBuilder() {
      if (vehicleBuilder_ == null) {
        vehicleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.transit.realtime.VehicleDescriptor, com.google.transit.realtime.VehicleDescriptor.Builder, com.google.transit.realtime.VehicleDescriptorOrBuilder>(
                getVehicle(),
                getParentForChildren(),
                isClean());
        vehicle_ = null;
      }
      return vehicleBuilder_;
    }

    private java.util.List<com.google.transit.realtime.TripUpdate.StopTimeUpdate> stopTimeUpdate_ =
      java.util.Collections.emptyList();
    private void ensureStopTimeUpdateIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        stopTimeUpdate_ = new java.util.ArrayList<com.google.transit.realtime.TripUpdate.StopTimeUpdate>(stopTimeUpdate_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.transit.realtime.TripUpdate.StopTimeUpdate, com.google.transit.realtime.TripUpdate.StopTimeUpdate.Builder, com.google.transit.realtime.TripUpdate.StopTimeUpdateOrBuilder> stopTimeUpdateBuilder_;

    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public java.util.List<com.google.transit.realtime.TripUpdate.StopTimeUpdate> getStopTimeUpdateList() {
      if (stopTimeUpdateBuilder_ == null) {
        return java.util.Collections.unmodifiableList(stopTimeUpdate_);
      } else {
        return stopTimeUpdateBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public int getStopTimeUpdateCount() {
      if (stopTimeUpdateBuilder_ == null) {
        return stopTimeUpdate_.size();
      } else {
        return stopTimeUpdateBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public com.google.transit.realtime.TripUpdate.StopTimeUpdate getStopTimeUpdate(int index) {
      if (stopTimeUpdateBuilder_ == null) {
        return stopTimeUpdate_.get(index);
      } else {
        return stopTimeUpdateBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder setStopTimeUpdate(
        int index, com.google.transit.realtime.TripUpdate.StopTimeUpdate value) {
      if (stopTimeUpdateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStopTimeUpdateIsMutable();
        stopTimeUpdate_.set(index, value);
        onChanged();
      } else {
        stopTimeUpdateBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder setStopTimeUpdate(
        int index, com.google.transit.realtime.TripUpdate.StopTimeUpdate.Builder builderForValue) {
      if (stopTimeUpdateBuilder_ == null) {
        ensureStopTimeUpdateIsMutable();
        stopTimeUpdate_.set(index, builderForValue.build());
        onChanged();
      } else {
        stopTimeUpdateBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder addStopTimeUpdate(com.google.transit.realtime.TripUpdate.StopTimeUpdate value) {
      if (stopTimeUpdateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStopTimeUpdateIsMutable();
        stopTimeUpdate_.add(value);
        onChanged();
      } else {
        stopTimeUpdateBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder addStopTimeUpdate(
        int index, com.google.transit.realtime.TripUpdate.StopTimeUpdate value) {
      if (stopTimeUpdateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStopTimeUpdateIsMutable();
        stopTimeUpdate_.add(index, value);
        onChanged();
      } else {
        stopTimeUpdateBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder addStopTimeUpdate(
        com.google.transit.realtime.TripUpdate.StopTimeUpdate.Builder builderForValue) {
      if (stopTimeUpdateBuilder_ == null) {
        ensureStopTimeUpdateIsMutable();
        stopTimeUpdate_.add(builderForValue.build());
        onChanged();
      } else {
        stopTimeUpdateBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder addStopTimeUpdate(
        int index, com.google.transit.realtime.TripUpdate.StopTimeUpdate.Builder builderForValue) {
      if (stopTimeUpdateBuilder_ == null) {
        ensureStopTimeUpdateIsMutable();
        stopTimeUpdate_.add(index, builderForValue.build());
        onChanged();
      } else {
        stopTimeUpdateBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder addAllStopTimeUpdate(
        java.lang.Iterable<? extends com.google.transit.realtime.TripUpdate.StopTimeUpdate> values) {
      if (stopTimeUpdateBuilder_ == null) {
        ensureStopTimeUpdateIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, stopTimeUpdate_);
        onChanged();
      } else {
        stopTimeUpdateBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder clearStopTimeUpdate() {
      if (stopTimeUpdateBuilder_ == null) {
        stopTimeUpdate_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        stopTimeUpdateBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder removeStopTimeUpdate(int index) {
      if (stopTimeUpdateBuilder_ == null) {
        ensureStopTimeUpdateIsMutable();
        stopTimeUpdate_.remove(index);
        onChanged();
      } else {
        stopTimeUpdateBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public com.google.transit.realtime.TripUpdate.StopTimeUpdate.Builder getStopTimeUpdateBuilder(
        int index) {
      return getStopTimeUpdateFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public com.google.transit.realtime.TripUpdate.StopTimeUpdateOrBuilder getStopTimeUpdateOrBuilder(
        int index) {
      if (stopTimeUpdateBuilder_ == null) {
        return stopTimeUpdate_.get(index);  } else {
        return stopTimeUpdateBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public java.util.List<? extends com.google.transit.realtime.TripUpdate.StopTimeUpdateOrBuilder> 
         getStopTimeUpdateOrBuilderList() {
      if (stopTimeUpdateBuilder_ != null) {
        return stopTimeUpdateBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(stopTimeUpdate_);
      }
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public com.google.transit.realtime.TripUpdate.StopTimeUpdate.Builder addStopTimeUpdateBuilder() {
      return getStopTimeUpdateFieldBuilder().addBuilder(
          com.google.transit.realtime.TripUpdate.StopTimeUpdate.getDefaultInstance());
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public com.google.transit.realtime.TripUpdate.StopTimeUpdate.Builder addStopTimeUpdateBuilder(
        int index) {
      return getStopTimeUpdateFieldBuilder().addBuilder(
          index, com.google.transit.realtime.TripUpdate.StopTimeUpdate.getDefaultInstance());
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     *
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     *
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public java.util.List<com.google.transit.realtime.TripUpdate.StopTimeUpdate.Builder> 
         getStopTimeUpdateBuilderList() {
      return getStopTimeUpdateFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.transit.realtime.TripUpdate.StopTimeUpdate, com.google.transit.realtime.TripUpdate.StopTimeUpdate.Builder, com.google.transit.realtime.TripUpdate.StopTimeUpdateOrBuilder> 
        getStopTimeUpdateFieldBuilder() {
      if (stopTimeUpdateBuilder_ == null) {
        stopTimeUpdateBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.transit.realtime.TripUpdate.StopTimeUpdate, com.google.transit.realtime.TripUpdate.StopTimeUpdate.Builder, com.google.transit.realtime.TripUpdate.StopTimeUpdateOrBuilder>(
                stopTimeUpdate_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        stopTimeUpdate_ = null;
      }
      return stopTimeUpdateBuilder_;
    }

    private long timestamp_ ;
    /**
     * <pre>
     * The most recent moment at which the vehicle's real-time progress was measured
     * to estimate StopTimes in the future. When StopTimes in the past are provided,
     * arrival/departure times may be earlier than this value. In POSIX
     * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     *
     * <code>optional uint64 timestamp = 4;</code>
     * @return Whether the timestamp field is set.
     */
    @java.lang.Override
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The most recent moment at which the vehicle's real-time progress was measured
     * to estimate StopTimes in the future. When StopTimes in the past are provided,
     * arrival/departure times may be earlier than this value. In POSIX
     * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     *
     * <code>optional uint64 timestamp = 4;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public long getTimestamp() {
      return timestamp_;
    }
    /**
     * <pre>
     * The most recent moment at which the vehicle's real-time progress was measured
     * to estimate StopTimes in the future. When StopTimes in the past are provided,
     * arrival/departure times may be earlier than this value. In POSIX
     * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     *
     * <code>optional uint64 timestamp = 4;</code>
     * @param value The timestamp to set.
     * @return This builder for chaining.
     */
    public Builder setTimestamp(long value) {

      timestamp_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The most recent moment at which the vehicle's real-time progress was measured
     * to estimate StopTimes in the future. When StopTimes in the past are provided,
     * arrival/departure times may be earlier than this value. In POSIX
     * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     *
     * <code>optional uint64 timestamp = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearTimestamp() {
      bitField0_ = (bitField0_ & ~0x00000008);
      timestamp_ = 0L;
      onChanged();
      return this;
    }

    private int delay_ ;
    /**
     * <pre>
     * The current schedule deviation for the trip.  Delay should only be
     * specified when the prediction is given relative to some existing schedule
     * in GTFS.
     *
     * Delay (in seconds) can be positive (meaning that the vehicle is late) or
     * negative (meaning that the vehicle is ahead of schedule). Delay of 0
     * means that the vehicle is exactly on time.
     *
     * Delay information in StopTimeUpdates take precedent of trip-level delay
     * information, such that trip-level delay is only propagated until the next
     * stop along the trip with a StopTimeUpdate delay value specified.
     *
     * Feed providers are strongly encouraged to provide a TripUpdate.timestamp
     * value indicating when the delay value was last updated, in order to
     * evaluate the freshness of the data.
     *
     * NOTE: This field is still experimental, and subject to change. It may be
     * formally adopted in the future.
     * </pre>
     *
     * <code>optional int32 delay = 5;</code>
     * @return Whether the delay field is set.
     */
    @java.lang.Override
    public boolean hasDelay() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The current schedule deviation for the trip.  Delay should only be
     * specified when the prediction is given relative to some existing schedule
     * in GTFS.
     *
     * Delay (in seconds) can be positive (meaning that the vehicle is late) or
     * negative (meaning that the vehicle is ahead of schedule). Delay of 0
     * means that the vehicle is exactly on time.
     *
     * Delay information in StopTimeUpdates take precedent of trip-level delay
     * information, such that trip-level delay is only propagated until the next
     * stop along the trip with a StopTimeUpdate delay value specified.
     *
     * Feed providers are strongly encouraged to provide a TripUpdate.timestamp
     * value indicating when the delay value was last updated, in order to
     * evaluate the freshness of the data.
     *
     * NOTE: This field is still experimental, and subject to change. It may be
     * formally adopted in the future.
     * </pre>
     *
     * <code>optional int32 delay = 5;</code>
     * @return The delay.
     */
    @java.lang.Override
    public int getDelay() {
      return delay_;
    }
    /**
     * <pre>
     * The current schedule deviation for the trip.  Delay should only be
     * specified when the prediction is given relative to some existing schedule
     * in GTFS.
     *
     * Delay (in seconds) can be positive (meaning that the vehicle is late) or
     * negative (meaning that the vehicle is ahead of schedule). Delay of 0
     * means that the vehicle is exactly on time.
     *
     * Delay information in StopTimeUpdates take precedent of trip-level delay
     * information, such that trip-level delay is only propagated until the next
     * stop along the trip with a StopTimeUpdate delay value specified.
     *
     * Feed providers are strongly encouraged to provide a TripUpdate.timestamp
     * value indicating when the delay value was last updated, in order to
     * evaluate the freshness of the data.
     *
     * NOTE: This field is still experimental, and subject to change. It may be
     * formally adopted in the future.
     * </pre>
     *
     * <code>optional int32 delay = 5;</code>
     * @param value The delay to set.
     * @return This builder for chaining.
     */
    public Builder setDelay(int value) {

      delay_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The current schedule deviation for the trip.  Delay should only be
     * specified when the prediction is given relative to some existing schedule
     * in GTFS.
     *
     * Delay (in seconds) can be positive (meaning that the vehicle is late) or
     * negative (meaning that the vehicle is ahead of schedule). Delay of 0
     * means that the vehicle is exactly on time.
     *
     * Delay information in StopTimeUpdates take precedent of trip-level delay
     * information, such that trip-level delay is only propagated until the next
     * stop along the trip with a StopTimeUpdate delay value specified.
     *
     * Feed providers are strongly encouraged to provide a TripUpdate.timestamp
     * value indicating when the delay value was last updated, in order to
     * evaluate the freshness of the data.
     *
     * NOTE: This field is still experimental, and subject to change. It may be
     * formally adopted in the future.
     * </pre>
     *
     * <code>optional int32 delay = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearDelay() {
      bitField0_ = (bitField0_ & ~0x00000010);
      delay_ = 0;
      onChanged();
      return this;
    }

    private com.google.transit.realtime.TripUpdate.TripProperties tripProperties_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.transit.realtime.TripUpdate.TripProperties, com.google.transit.realtime.TripUpdate.TripProperties.Builder, com.google.transit.realtime.TripUpdate.TripPropertiesOrBuilder> tripPropertiesBuilder_;
    /**
     * <code>optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;</code>
     * @return Whether the tripProperties field is set.
     */
    public boolean hasTripProperties() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;</code>
     * @return The tripProperties.
     */
    public com.google.transit.realtime.TripUpdate.TripProperties getTripProperties() {
      if (tripPropertiesBuilder_ == null) {
        return tripProperties_ == null ? com.google.transit.realtime.TripUpdate.TripProperties.getDefaultInstance() : tripProperties_;
      } else {
        return tripPropertiesBuilder_.getMessage();
      }
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;</code>
     */
    public Builder setTripProperties(com.google.transit.realtime.TripUpdate.TripProperties value) {
      if (tripPropertiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        tripProperties_ = value;
      } else {
        tripPropertiesBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;</code>
     */
    public Builder setTripProperties(
        com.google.transit.realtime.TripUpdate.TripProperties.Builder builderForValue) {
      if (tripPropertiesBuilder_ == null) {
        tripProperties_ = builderForValue.build();
      } else {
        tripPropertiesBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;</code>
     */
    public Builder mergeTripProperties(com.google.transit.realtime.TripUpdate.TripProperties value) {
      if (tripPropertiesBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0) &&
          tripProperties_ != null &&
          tripProperties_ != com.google.transit.realtime.TripUpdate.TripProperties.getDefaultInstance()) {
          getTripPropertiesBuilder().mergeFrom(value);
        } else {
          tripProperties_ = value;
        }
      } else {
        tripPropertiesBuilder_.mergeFrom(value);
      }
      if (tripProperties_ != null) {
        bitField0_ |= 0x00000020;
        onChanged();
      }
      return this;
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;</code>
     */
    public Builder clearTripProperties() {
      bitField0_ = (bitField0_ & ~0x00000020);
      tripProperties_ = null;
      if (tripPropertiesBuilder_ != null) {
        tripPropertiesBuilder_.dispose();
        tripPropertiesBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;</code>
     */
    public com.google.transit.realtime.TripUpdate.TripProperties.Builder getTripPropertiesBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getTripPropertiesFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;</code>
     */
    public com.google.transit.realtime.TripUpdate.TripPropertiesOrBuilder getTripPropertiesOrBuilder() {
      if (tripPropertiesBuilder_ != null) {
        return tripPropertiesBuilder_.getMessageOrBuilder();
      } else {
        return tripProperties_ == null ?
            com.google.transit.realtime.TripUpdate.TripProperties.getDefaultInstance() : tripProperties_;
      }
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.transit.realtime.TripUpdate.TripProperties, com.google.transit.realtime.TripUpdate.TripProperties.Builder, com.google.transit.realtime.TripUpdate.TripPropertiesOrBuilder> 
        getTripPropertiesFieldBuilder() {
      if (tripPropertiesBuilder_ == null) {
        tripPropertiesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.transit.realtime.TripUpdate.TripProperties, com.google.transit.realtime.TripUpdate.TripProperties.Builder, com.google.transit.realtime.TripUpdate.TripPropertiesOrBuilder>(
                getTripProperties(),
                getParentForChildren(),
                isClean());
        tripProperties_ = null;
      }
      return tripPropertiesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:transit_realtime.TripUpdate)
  }

  // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate)
  private static final com.google.transit.realtime.TripUpdate DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.transit.realtime.TripUpdate();
  }

  public static com.google.transit.realtime.TripUpdate getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<TripUpdate>
      PARSER = new com.google.protobuf.AbstractParser<TripUpdate>() {
    @java.lang.Override
    public TripUpdate parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<TripUpdate> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TripUpdate> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.transit.realtime.TripUpdate getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

